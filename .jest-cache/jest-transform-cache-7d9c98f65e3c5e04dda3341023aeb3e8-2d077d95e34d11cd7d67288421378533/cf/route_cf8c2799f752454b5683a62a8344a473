54c1f611dbf972087bfa80cc81ae0dcc
/* istanbul ignore next */
var _excluded = ["id"];
function cov_1u60zlmw3e() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/itk-sources/route.ts";
  var hash = "2ea8d34c6f5089792958849d8f78f727b875d0ae";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/itk-sources/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "1": {
        start: {
          line: 23,
          column: 30
        },
        end: {
          line: 23,
          column: 61
        }
      },
      "2": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "3": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 36
        }
      },
      "4": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "5": {
        start: {
          line: 32,
          column: 21
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "6": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "7": {
        start: {
          line: 34,
          column: 19
        },
        end: {
          line: 34,
          column: 45
        }
      },
      "8": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "9": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 38,
          column: 25
        }
      },
      "10": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "11": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 32
        }
      },
      "12": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      "13": {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 45,
          column: 34
        }
      },
      "14": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "15": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 28
        }
      },
      "16": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 85,
          column: 6
        }
      },
      "17": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 94,
          column: 7
        }
      },
      "18": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 57
        }
      },
      "19": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "20": {
        start: {
          line: 111,
          column: 2
        },
        end: {
          line: 170,
          column: 3
        }
      },
      "21": {
        start: {
          line: 112,
          column: 17
        },
        end: {
          line: 112,
          column: 37
        }
      },
      "22": {
        start: {
          line: 115,
          column: 26
        },
        end: {
          line: 115,
          column: 59
        }
      },
      "23": {
        start: {
          line: 118,
          column: 21
        },
        end: {
          line: 120,
          column: 6
        }
      },
      "24": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "25": {
        start: {
          line: 123,
          column: 6
        },
        end: {
          line: 129,
          column: 8
        }
      },
      "26": {
        start: {
          line: 133,
          column: 19
        },
        end: {
          line: 138,
          column: 6
        }
      },
      "27": {
        start: {
          line: 140,
          column: 4
        },
        end: {
          line: 147,
          column: 6
        }
      },
      "28": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "29": {
        start: {
          line: 150,
          column: 6
        },
        end: {
          line: 157,
          column: 8
        }
      },
      "30": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 57
        }
      },
      "31": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 169,
          column: 6
        }
      },
      "32": {
        start: {
          line: 175,
          column: 2
        },
        end: {
          line: 230,
          column: 3
        }
      },
      "33": {
        start: {
          line: 176,
          column: 17
        },
        end: {
          line: 176,
          column: 37
        }
      },
      "34": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 38
        }
      },
      "35": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "36": {
        start: {
          line: 180,
          column: 6
        },
        end: {
          line: 186,
          column: 8
        }
      },
      "37": {
        start: {
          line: 190,
          column: 26
        },
        end: {
          line: 190,
          column: 65
        }
      },
      "38": {
        start: {
          line: 193,
          column: 26
        },
        end: {
          line: 201,
          column: 6
        }
      },
      "39": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 207,
          column: 7
        }
      },
      "40": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "41": {
        start: {
          line: 210,
          column: 6
        },
        end: {
          line: 217,
          column: 8
        }
      },
      "42": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 220,
          column: 57
        }
      },
      "43": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 229,
          column: 6
        }
      },
      "44": {
        start: {
          line: 235,
          column: 2
        },
        end: {
          line: 269,
          column: 3
        }
      },
      "45": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 36
        }
      },
      "46": {
        start: {
          line: 237,
          column: 15
        },
        end: {
          line: 237,
          column: 41
        }
      },
      "47": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "48": {
        start: {
          line: 240,
          column: 6
        },
        end: {
          line: 246,
          column: 8
        }
      },
      "49": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 252,
          column: 7
        }
      },
      "50": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "51": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 259,
          column: 57
        }
      },
      "52": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 268,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 25
          }
        },
        loc: {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 26
      },
      "1": {
        name: "POST",
        decl: {
          start: {
            line: 110,
            column: 22
          },
          end: {
            line: 110,
            column: 26
          }
        },
        loc: {
          start: {
            line: 110,
            column: 49
          },
          end: {
            line: 171,
            column: 1
          }
        },
        line: 110
      },
      "2": {
        name: "PUT",
        decl: {
          start: {
            line: 174,
            column: 22
          },
          end: {
            line: 174,
            column: 25
          }
        },
        loc: {
          start: {
            line: 174,
            column: 48
          },
          end: {
            line: 231,
            column: 1
          }
        },
        line: 174
      },
      "3": {
        name: "DELETE",
        decl: {
          start: {
            line: 234,
            column: 22
          },
          end: {
            line: 234,
            column: 28
          }
        },
        loc: {
          start: {
            line: 234,
            column: 51
          },
          end: {
            line: 270,
            column: 1
          }
        },
        line: 234
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 74,
            column: 24
          }
        }, {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 83,
            column: 9
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 102,
            column: 17
          },
          end: {
            line: 102,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 102,
            column: 55
          }
        }, {
          start: {
            line: 102,
            column: 58
          },
          end: {
            line: 102,
            column: 73
          }
        }],
        line: 102
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "6": {
        loc: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "7": {
        loc: {
          start: {
            line: 166,
            column: 17
          },
          end: {
            line: 166,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 42
          },
          end: {
            line: 166,
            column: 55
          }
        }, {
          start: {
            line: 166,
            column: 58
          },
          end: {
            line: 166,
            column: 73
          }
        }],
        line: 166
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 197,
            column: 34
          }
        }, {
          start: {
            line: 197,
            column: 38
          },
          end: {
            line: 199,
            column: 9
          }
        }],
        line: 197
      },
      "10": {
        loc: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "11": {
        loc: {
          start: {
            line: 226,
            column: 17
          },
          end: {
            line: 226,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 42
          },
          end: {
            line: 226,
            column: 55
          }
        }, {
          start: {
            line: 226,
            column: 58
          },
          end: {
            line: 226,
            column: 73
          }
        }],
        line: 226
      },
      "12": {
        loc: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "13": {
        loc: {
          start: {
            line: 265,
            column: 17
          },
          end: {
            line: 265,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 42
          },
          end: {
            line: 265,
            column: 55
          }
        }, {
          start: {
            line: 265,
            column: 58
          },
          end: {
            line: 265,
            column: 73
          }
        }],
        line: 265
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2ea8d34c6f5089792958849d8f78f727b875d0ae"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1u60zlmw3e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u60zlmw3e();
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * API Route: ITK Sources Management
 * Handles CRUD operations for In The Know transfer sources
 */

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { z } from "zod";

// Validation schemas
var CreateITKSourceSchema =
/* istanbul ignore next */
(cov_1u60zlmw3e().s[0]++, z.object({
  name: z.string().min(1).max(100),
  username: z.string().min(1).max(50),
  // Twitter handle without @
  tier: z.number().min(1).max(3)[
  /* istanbul ignore next */
  "default"](3),
  reliability: z.number().min(0).max(1)[
  /* istanbul ignore next */
  "default"](0.5),
  region: z.string()[
  /* istanbul ignore next */
  "default"]("GLOBAL"),
  isActive: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](true),
  isVerified: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](false),
  description: z.string().optional(),
  fetchInterval: z.number().min(300)[
  /* istanbul ignore next */
  "default"](900) // Min 5 minutes
}));
var UpdateITKSourceSchema =
/* istanbul ignore next */
(cov_1u60zlmw3e().s[1]++, CreateITKSourceSchema.partial());

// GET - Retrieve all ITK sources or filtered list
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}

// POST - Create a new ITK source
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var url, searchParams, isActive, tier, region, includeStats, where, sources, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1u60zlmw3e().f[0]++;
          cov_1u60zlmw3e().s[2]++;
          _context.p = 1;
          url = (cov_1u60zlmw3e().s[3]++, new URL(request.url));
          searchParams = (cov_1u60zlmw3e().s[4]++, url.searchParams); // Parse query parameters
          isActive = (cov_1u60zlmw3e().s[5]++, searchParams.get("active") === "true");
          tier = (cov_1u60zlmw3e().s[6]++, searchParams.get("tier"));
          region = (cov_1u60zlmw3e().s[7]++, searchParams.get("region"));
          includeStats = (cov_1u60zlmw3e().s[8]++, searchParams.get("includeStats") === "true"); // Build where clause
          where = (cov_1u60zlmw3e().s[9]++, {});
          cov_1u60zlmw3e().s[10]++;
          if (searchParams.has("active")) {
            /* istanbul ignore next */
            cov_1u60zlmw3e().b[0][0]++;
            cov_1u60zlmw3e().s[11]++;
            where.isActive = isActive;
          } else
          /* istanbul ignore next */
          {
            cov_1u60zlmw3e().b[0][1]++;
          }
          cov_1u60zlmw3e().s[12]++;
          if (tier) {
            /* istanbul ignore next */
            cov_1u60zlmw3e().b[1][0]++;
            cov_1u60zlmw3e().s[13]++;
            where.tier = parseInt(tier);
          } else
          /* istanbul ignore next */
          {
            cov_1u60zlmw3e().b[1][1]++;
          }
          cov_1u60zlmw3e().s[14]++;
          if (region) {
            /* istanbul ignore next */
            cov_1u60zlmw3e().b[2][0]++;
            cov_1u60zlmw3e().s[15]++;
            where.region = region;
          } else
          /* istanbul ignore next */
          {
            cov_1u60zlmw3e().b[2][1]++;
          }

          // Fetch sources
          cov_1u60zlmw3e().s[16]++;
          _context.n = 2;
          return prisma.iTKSource.findMany({
            where: where,
            orderBy: [{
              tier: "asc"
            }, {
              reliability: "desc"
            }, {
              name: "asc"
            }],
            select:
            /* istanbul ignore next */
            _objectSpread({
              id: true,
              name: true,
              username: true,
              twitterId: true,
              tier: true,
              reliability: true,
              region: true,
              isActive: true,
              isVerified: true,
              followerCount: true,
              description: true,
              profileImageUrl: true,
              lastFetchedAt: true,
              fetchInterval: true,
              createdAt: true,
              updatedAt: true
            },
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[3][0]++, includeStats) &&
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[3][1]++, {
              totalTweets: true,
              relevantTweets: true,
              avgRelevance: true,
              _count: {
                select: {
                  feedItems: true
                }
              }
            }))
          });
        case 2:
          sources = _context.v;
          cov_1u60zlmw3e().s[17]++;
          return _context.a(2, NextResponse.json({
            success: true,
            data: sources,
            meta: {
              count: sources.length,
              fetchedAt: new Date().toISOString()
            }
          }));
        case 3:
          _context.p = 3;
          _t = _context.v;
          cov_1u60zlmw3e().s[18]++;
          console.error("Failed to fetch ITK sources:",
          /* istanbul ignore next */
          _t);
          cov_1u60zlmw3e().s[19]++;
          return _context.a(2, NextResponse.json({
            success: false,
            error: "Failed to fetch ITK sources",
            details:
            /* istanbul ignore next */
            _t instanceof Error ?
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[4][0]++,
            /* istanbul ignore next */
            _t.message) :
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[4][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 3]]);
  }));
  return _GET.apply(this, arguments);
}
export
/* istanbul ignore next */
function POST(_x2) {
  return _POST.apply(this, arguments);
}

// PUT - Update an ITK source
/* istanbul ignore next */
function _POST() {
  _POST = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(request)
  /* istanbul ignore next */
  {
    var body, validatedData, existing, source, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_1u60zlmw3e().f[1]++;
          cov_1u60zlmw3e().s[20]++;
          _context2.p = 1;
          cov_1u60zlmw3e().s[21]++;
          _context2.n = 2;
          return request.json();
        case 2:
          body = _context2.v;
          // Validate input
          validatedData = (cov_1u60zlmw3e().s[22]++, CreateITKSourceSchema.parse(body)); // Check if username already exists
          cov_1u60zlmw3e().s[23]++;
          _context2.n = 3;
          return prisma.iTKSource.findUnique({
            where: {
              username: validatedData.username
            }
          });
        case 3:
          existing = _context2.v;
          cov_1u60zlmw3e().s[24]++;
          if (!existing) {
            _context2.n = 4;
            break;
          }
          cov_1u60zlmw3e().b[5][0]++;
          cov_1u60zlmw3e().s[25]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "ITK source with this username already exists"
          }, {
            status: 409
          }));
        case 4:
          cov_1u60zlmw3e().b[5][1]++;
        case 5:
          cov_1u60zlmw3e().s[26]++;
          _context2.n = 6;
          return prisma.iTKSource.create({
            data:
            /* istanbul ignore next */
            _objectSpread(_objectSpread({}, validatedData), {}, {
              username: validatedData.username.replace("@", "") // Remove @ if present
            })
          });
        case 6:
          source = _context2.v;
          cov_1u60zlmw3e().s[27]++;
          return _context2.a(2, NextResponse.json({
            success: true,
            data: source,
            message: "ITK source created successfully"
          }, {
            status: 201
          }));
        case 7:
          _context2.p = 7;
          _t2 = _context2.v;
          cov_1u60zlmw3e().s[28]++;
          if (!(
          /* istanbul ignore next */
          _t2 instanceof z.ZodError)) {
            _context2.n = 8;
            break;
          }
          cov_1u60zlmw3e().b[6][0]++;
          cov_1u60zlmw3e().s[29]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "Invalid input data",
            details:
            /* istanbul ignore next */
            _t2.errors
          }, {
            status: 400
          }));
        case 8:
          cov_1u60zlmw3e().b[6][1]++;
        case 9:
          cov_1u60zlmw3e().s[30]++;
          console.error("Failed to create ITK source:",
          /* istanbul ignore next */
          _t2);
          cov_1u60zlmw3e().s[31]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "Failed to create ITK source",
            details:
            /* istanbul ignore next */
            _t2 instanceof Error ?
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[7][0]++,
            /* istanbul ignore next */
            _t2.message) :
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[7][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee2, null, [[1, 7]]);
  }));
  return _POST.apply(this, arguments);
}
export
/* istanbul ignore next */
function PUT(_x3) {
  return _PUT.apply(this, arguments);
}

// DELETE - Remove an ITK source
/* istanbul ignore next */
function _PUT() {
  _PUT = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(request)
  /* istanbul ignore next */
  {
    var body, _ref, id, updateData, validatedData, updatedSource, _t3;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_1u60zlmw3e().f[2]++;
          cov_1u60zlmw3e().s[32]++;
          _context3.p = 1;
          cov_1u60zlmw3e().s[33]++;
          _context3.n = 2;
          return request.json();
        case 2:
          body = _context3.v;
          _ref = (cov_1u60zlmw3e().s[34]++, body), id = _ref.id, updateData = _objectWithoutProperties(_ref, _excluded);
          cov_1u60zlmw3e().s[35]++;
          if (id) {
            _context3.n = 3;
            break;
          }
          cov_1u60zlmw3e().b[8][0]++;
          cov_1u60zlmw3e().s[36]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Source ID is required"
          }, {
            status: 400
          }));
        case 3:
          cov_1u60zlmw3e().b[8][1]++;
        case 4:
          // Validate update data
          validatedData = (cov_1u60zlmw3e().s[37]++, UpdateITKSourceSchema.parse(updateData)); // Update the source
          cov_1u60zlmw3e().s[38]++;
          _context3.n = 5;
          return prisma.iTKSource.update({
            where: {
              id: id
            },
            data:
            /* istanbul ignore next */
            _objectSpread(_objectSpread({}, validatedData),
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[9][0]++, validatedData.username) &&
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[9][1]++, {
              username: validatedData.username.replace("@", "")
            }))
          });
        case 5:
          updatedSource = _context3.v;
          cov_1u60zlmw3e().s[39]++;
          return _context3.a(2, NextResponse.json({
            success: true,
            data: updatedSource,
            message: "ITK source updated successfully"
          }));
        case 6:
          _context3.p = 6;
          _t3 = _context3.v;
          cov_1u60zlmw3e().s[40]++;
          if (!(
          /* istanbul ignore next */
          _t3 instanceof z.ZodError)) {
            _context3.n = 7;
            break;
          }
          cov_1u60zlmw3e().b[10][0]++;
          cov_1u60zlmw3e().s[41]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Invalid update data",
            details:
            /* istanbul ignore next */
            _t3.errors
          }, {
            status: 400
          }));
        case 7:
          cov_1u60zlmw3e().b[10][1]++;
        case 8:
          cov_1u60zlmw3e().s[42]++;
          console.error("Failed to update ITK source:",
          /* istanbul ignore next */
          _t3);
          cov_1u60zlmw3e().s[43]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Failed to update ITK source",
            details:
            /* istanbul ignore next */
            _t3 instanceof Error ?
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[11][0]++,
            /* istanbul ignore next */
            _t3.message) :
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[11][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee3, null, [[1, 6]]);
  }));
  return _PUT.apply(this, arguments);
}
export
/* istanbul ignore next */
function DELETE(_x4) {
  return _DELETE.apply(this, arguments);
}
/* istanbul ignore next */
function _DELETE() {
  _DELETE = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4(request)
  /* istanbul ignore next */
  {
    var url, id, _t4;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          cov_1u60zlmw3e().f[3]++;
          cov_1u60zlmw3e().s[44]++;
          _context4.p = 1;
          url = (cov_1u60zlmw3e().s[45]++, new URL(request.url));
          id = (cov_1u60zlmw3e().s[46]++, url.searchParams.get("id"));
          cov_1u60zlmw3e().s[47]++;
          if (id) {
            _context4.n = 2;
            break;
          }
          cov_1u60zlmw3e().b[12][0]++;
          cov_1u60zlmw3e().s[48]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Source ID is required"
          }, {
            status: 400
          }));
        case 2:
          cov_1u60zlmw3e().b[12][1]++;
        case 3:
          cov_1u60zlmw3e().s[49]++;
          _context4.n = 4;
          return prisma.iTKSource[
          /* istanbul ignore next */
          "delete"]({
            where: {
              id: id
            }
          });
        case 4:
          cov_1u60zlmw3e().s[50]++;
          return _context4.a(2, NextResponse.json({
            success: true,
            message: "ITK source deleted successfully"
          }));
        case 5:
          _context4.p = 5;
          _t4 = _context4.v;
          cov_1u60zlmw3e().s[51]++;
          console.error("Failed to delete ITK source:",
          /* istanbul ignore next */
          _t4);
          cov_1u60zlmw3e().s[52]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Failed to delete ITK source",
            details:
            /* istanbul ignore next */
            _t4 instanceof Error ?
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[13][0]++,
            /* istanbul ignore next */
            _t4.message) :
            /* istanbul ignore next */
            (cov_1u60zlmw3e().b[13][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee4, null, [[1, 5]]);
  }));
  return _DELETE.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,