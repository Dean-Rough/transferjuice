{"version":3,"names":["cov_2ipr5m4cp6","actualCoverage","TIER_1_SOURCES","TIER_2_SOURCES","TIER_3_SOURCES","ALL_ITK_SOURCES","TRANSFER_KEYWORDS","getSourcesByRegion","getSourcesByTier","getSourcesByLanguage","getTransferKeywords","getActiveSources","getSourceByHandle","updateSourceRateLimit","isSourceRateLimited","getAvailableSources","getMonitoringPriority","detectLanguage","extractTransferKeywords","determineTransferType","calculateConfidence","classifyTransferContent","classifyBatchTransferContent","filterByConfidence","getClassificationStats","GlobalITKMonitor","globalMonitor","DEFAULT_CONFIG","convertTweetToFeedItem","convertTweetsToFeedItems","integrateClassifiedTweets","filterDuplicateTweets","mergeSimilarTweets","s","startGlobalMonitoring","config","f","b","updateConfig","start","stopGlobalMonitoring","stop","getMonitoringStatus","getStatus","runSingleMonitoringCycle","runMonitoringCycle","getRegionalSources","region","filter","source","isActive","getHighReliabilitySources","tier","reliability","quickClassifyTweet","tweetText","authorHandle","mockTweet","id","text","author","username","replace","displayName","createdAt","Date","toISOString","developmentUtils","generateMockMonitoringStats","totalSources","length","activeSources","rateLimitedSources","totalTweetsChecked","totalTransferTweets","averageConfidence","processingTimeMs","errors","regionStats","UK","sources","tweets","transfers","ES","IT","FR","DE","BR","GLOBAL","languageStats","en","es","it","fr","de","pt","testClassification","sampleTweets","handle","map","tweet","result","listAllSources","name","concat","Math","round","language"],"sources":["index.ts"],"sourcesContent":["/**\n * Twitter Global Monitoring System\n * Comprehensive ITK source monitoring with multi-language detection\n */\n\n// Core types and interfaces\nexport type { ITKSource } from \"./globalSources\";\n\nexport type { TweetData, ClassificationResult } from \"./transferClassifier\";\n\nexport type {\n  MonitoringConfig,\n  MonitoringResult,\n  GlobalMonitoringStats,\n} from \"./globalMonitor\";\n\n// Source management\nexport {\n  TIER_1_SOURCES,\n  TIER_2_SOURCES,\n  TIER_3_SOURCES,\n  ALL_ITK_SOURCES,\n  TRANSFER_KEYWORDS,\n  getSourcesByRegion,\n  getSourcesByTier,\n  getSourcesByLanguage,\n  getTransferKeywords,\n  getActiveSources,\n  getSourceByHandle,\n  updateSourceRateLimit,\n  isSourceRateLimited,\n  getAvailableSources,\n  getMonitoringPriority,\n} from \"./globalSources\";\n\n// Classification and detection\nexport {\n  detectLanguage,\n  extractTransferKeywords,\n  determineTransferType,\n  calculateConfidence,\n  classifyTransferContent,\n  classifyBatchTransferContent,\n  filterByConfidence,\n  getClassificationStats,\n} from \"./transferClassifier\";\n\n// Global monitoring\nexport {\n  GlobalITKMonitor,\n  globalMonitor,\n  DEFAULT_CONFIG,\n} from \"./globalMonitor\";\n\n// Feed integration\nexport {\n  convertTweetToFeedItem,\n  convertTweetsToFeedItems,\n  integrateClassifiedTweets,\n  filterDuplicateTweets,\n  mergeSimilarTweets,\n} from \"./feedIntegration\";\n\n// Import types needed for convenience functions\nimport {\n  type MonitoringConfig,\n  type GlobalMonitoringStats,\n} from \"./globalMonitor\";\nimport { globalMonitor } from \"./globalMonitor\";\nimport {\n  type ITKSource,\n  getSourcesByRegion,\n  ALL_ITK_SOURCES,\n  getActiveSources,\n} from \"./globalSources\";\nimport { type TweetData, classifyTransferContent } from \"./transferClassifier\";\n\n// Convenience functions for common use cases\n\n/**\n * Quick start function for global monitoring\n */\nexport const startGlobalMonitoring = (config?: Partial<MonitoringConfig>) => {\n  if (config) {\n    globalMonitor.updateConfig(config);\n  }\n  globalMonitor.start();\n  return globalMonitor;\n};\n\n/**\n * Stop global monitoring\n */\nexport const stopGlobalMonitoring = () => {\n  globalMonitor.stop();\n};\n\n/**\n * Get current monitoring status\n */\nexport const getMonitoringStatus = () => {\n  return globalMonitor.getStatus();\n};\n\n/**\n * Run a one-time monitoring cycle (for testing/manual runs)\n */\nexport const runSingleMonitoringCycle = () => {\n  return globalMonitor.runMonitoringCycle();\n};\n\n/**\n * Get all available sources for a specific region\n */\nexport const getRegionalSources = (region: ITKSource[\"region\"]) => {\n  return getSourcesByRegion(region).filter((source) => source.isActive);\n};\n\n/**\n * Get high-reliability sources (Tier 1 + Tier 2 with >85% reliability)\n */\nexport const getHighReliabilitySources = () => {\n  return ALL_ITK_SOURCES.filter(\n    (source) =>\n      source.isActive &&\n      (source.tier === 1 || (source.tier === 2 && source.reliability >= 0.85))\n  );\n};\n\n/**\n * Quick classification of single tweet\n */\nexport const quickClassifyTweet = (tweetText: string, authorHandle: string) => {\n  const mockTweet: TweetData = {\n    id: \"temp-id\",\n    text: tweetText,\n    author: {\n      username: authorHandle.replace(\"@\", \"\"),\n      displayName: authorHandle,\n    },\n    createdAt: new Date().toISOString(),\n  };\n\n  return classifyTransferContent(mockTweet);\n};\n\n/**\n * Development utilities\n */\nexport const developmentUtils = {\n  /**\n   * Generate mock monitoring data for testing\n   */\n  generateMockMonitoringStats: (): GlobalMonitoringStats => ({\n    totalSources: ALL_ITK_SOURCES.length,\n    activeSources: getActiveSources().length,\n    rateLimitedSources: 2,\n    totalTweetsChecked: 287,\n    totalTransferTweets: 42,\n    averageConfidence: 73,\n    processingTimeMs: 2400,\n    errors: [],\n    regionStats: {\n      UK: { sources: 3, tweets: 85, transfers: 12 },\n      ES: { sources: 2, tweets: 67, transfers: 8 },\n      IT: { sources: 3, tweets: 71, transfers: 11 },\n      FR: { sources: 2, tweets: 34, transfers: 5 },\n      DE: { sources: 1, tweets: 18, transfers: 3 },\n      BR: { sources: 1, tweets: 12, transfers: 3 },\n      GLOBAL: { sources: 1, tweets: 0, transfers: 0 },\n    },\n    languageStats: {\n      en: 5,\n      es: 2,\n      it: 3,\n      fr: 2,\n      de: 1,\n      pt: 1,\n    },\n  }),\n\n  /**\n   * Test classification with sample tweets\n   */\n  testClassification: () => {\n    const sampleTweets = [\n      {\n        text: \"ðŸš¨ BREAKING: Arsenal agree â‚¬50M fee for Declan Rice! Medical scheduled for tomorrow. Here we go! âœ…\",\n        handle: \"@FabrizioRomano\",\n      },\n      {\n        text: \"Personal terms agreed between Mbappe and Real Madrid. Club-to-club negotiations ongoing.\",\n        handle: \"@David_Ornstein\",\n      },\n      {\n        text: \"Beautiful weather today in London! Perfect for a walk in the park.\",\n        handle: \"@randomuser\",\n      },\n    ];\n\n    return sampleTweets.map((tweet) => ({\n      tweet: tweet.text,\n      handle: tweet.handle,\n      result: quickClassifyTweet(tweet.text, tweet.handle),\n    }));\n  },\n\n  /**\n   * List all configured sources\n   */\n  listAllSources: () => {\n    return ALL_ITK_SOURCES.map((source) => ({\n      name: source.name,\n      handle: source.handle,\n      tier: source.tier,\n      reliability: `${Math.round(source.reliability * 100)}%`,\n      region: source.region,\n      language: source.language,\n      isActive: source.isActive,\n    }));\n  },\n};\n"],"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","ignoreList":[]}