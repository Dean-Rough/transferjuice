ad963d638d8714c84188779de6ca7278
"use strict";

var _globalSources = require("../globalSources");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; } /**
 * Global ITK Sources Tests
 * Validates that we have 20+ sources covering 5 major leagues
 */
describe("Global ITK Sources Configuration", function () {
  describe("Source Count Requirements", function () {
    it("should have 20+ global ITK sources", function () {
      expect(_globalSources.ALL_ITK_SOURCES.length).toBeGreaterThanOrEqual(20);
      console.log("Total ITK Sources: ".concat(_globalSources.ALL_ITK_SOURCES.length));
      console.log("Breakdown:");
      console.log("  Tier 1: ".concat(_globalSources.TIER_1_SOURCES.length, " sources"));
      console.log("  Tier 2: ".concat(_globalSources.TIER_2_SOURCES.length, " sources"));
      console.log("  Tier 2 Additional: ".concat(_globalSources.TIER_2_ADDITIONAL.length, " sources"));
      console.log("  Tier 3: ".concat(_globalSources.TIER_3_SOURCES.length, " sources"));
    });
    it("should have all sources active by default", function () {
      var activeSources = (0, _globalSources.getActiveSources)();
      expect(activeSources.length).toBe(_globalSources.ALL_ITK_SOURCES.length);
      expect(activeSources.length).toBeGreaterThanOrEqual(20);
    });
    it("should have proper tier distribution", function () {
      var tier1 = (0, _globalSources.getSourcesByTier)(1);
      var tier2 = (0, _globalSources.getSourcesByTier)(2);
      var tier3 = (0, _globalSources.getSourcesByTier)(3);
      expect(tier1.length).toBeGreaterThanOrEqual(3); // Elite sources
      expect(tier2.length).toBeGreaterThanOrEqual(5); // Trusted sources
      expect(tier3.length).toBeGreaterThanOrEqual(8); // Regional sources

      expect(tier1.length + tier2.length + tier3.length).toBe(_globalSources.ALL_ITK_SOURCES.length);
    });
  });
  describe("Regional Coverage Requirements", function () {
    it("should cover 5 major leagues regions", function () {
      var regions = _toConsumableArray(new Set(_globalSources.ALL_ITK_SOURCES.map(function (s) {
        return s.region;
      })));

      // Should include major regions
      expect(regions).toContain("UK"); // Premier League
      expect(regions).toContain("ES"); // La Liga
      expect(regions).toContain("IT"); // Serie A
      expect(regions).toContain("FR"); // Ligue 1
      expect(regions).toContain("DE"); // Bundesliga
      expect(regions).toContain("BR"); // Brazilian sources
      expect(regions).toContain("GLOBAL"); // Global sources

      console.log("Regions covered: ".concat(regions.join(", ")));
      console.log("Total regions: ".concat(regions.length));
    });
    it("should have sources for each major region", function () {
      var ukSources = (0, _globalSources.getSourcesByRegion)("UK");
      var esSources = (0, _globalSources.getSourcesByRegion)("ES");
      var itSources = (0, _globalSources.getSourcesByRegion)("IT");
      var frSources = (0, _globalSources.getSourcesByRegion)("FR");
      var deSources = (0, _globalSources.getSourcesByRegion)("DE");
      var globalSources = (0, _globalSources.getSourcesByRegion)("GLOBAL");
      expect(ukSources.length).toBeGreaterThanOrEqual(2);
      expect(esSources.length).toBeGreaterThanOrEqual(2);
      expect(itSources.length).toBeGreaterThanOrEqual(2);
      expect(frSources.length).toBeGreaterThanOrEqual(2);
      expect(deSources.length).toBeGreaterThanOrEqual(2);
      expect(globalSources.length).toBeGreaterThanOrEqual(2);
      console.log("Regional distribution:");
      console.log("  UK: ".concat(ukSources.length, " sources"));
      console.log("  ES: ".concat(esSources.length, " sources"));
      console.log("  IT: ".concat(itSources.length, " sources"));
      console.log("  FR: ".concat(frSources.length, " sources"));
      console.log("  DE: ".concat(deSources.length, " sources"));
      console.log("  GLOBAL: ".concat(globalSources.length, " sources"));
    });
    it("should support major league coverage", function () {
      var leagueCoverage = _globalSources.ALL_ITK_SOURCES.reduce(function (acc, source) {
        source.leagues.forEach(function (league) {
          acc[league] = (acc[league] || 0) + 1;
        });
        return acc;
      }, {});

      // Major leagues should have multiple sources
      expect(leagueCoverage["PL"]).toBeGreaterThanOrEqual(5);
      expect(leagueCoverage["LaLiga"]).toBeGreaterThanOrEqual(3);
      expect(leagueCoverage["SerieA"]).toBeGreaterThanOrEqual(3);
      expect(leagueCoverage["Bundesliga"]).toBeGreaterThanOrEqual(3);
      expect(leagueCoverage["Ligue1"]).toBeGreaterThanOrEqual(3);
      console.log("League coverage:", leagueCoverage);
    });
  });
  describe("Language Support Requirements", function () {
    it("should support multiple languages", function () {
      var languages = _toConsumableArray(new Set(_globalSources.ALL_ITK_SOURCES.map(function (s) {
        return s.language;
      })));
      expect(languages).toContain("en"); // English
      expect(languages).toContain("es"); // Spanish
      expect(languages).toContain("it"); // Italian
      expect(languages).toContain("fr"); // French
      expect(languages).toContain("de"); // German
      expect(languages).toContain("pt"); // Portuguese

      console.log("Languages supported: ".concat(languages.join(", ")));
    });
    it("should have balanced language distribution", function () {
      var enSources = (0, _globalSources.getSourcesByLanguage)("en");
      var esSources = (0, _globalSources.getSourcesByLanguage)("es");
      var itSources = (0, _globalSources.getSourcesByLanguage)("it");
      var frSources = (0, _globalSources.getSourcesByLanguage)("fr");
      var deSources = (0, _globalSources.getSourcesByLanguage)("de");
      var ptSources = (0, _globalSources.getSourcesByLanguage)("pt");
      expect(enSources.length).toBeGreaterThanOrEqual(6); // English dominant
      expect(esSources.length).toBeGreaterThanOrEqual(2);
      expect(itSources.length).toBeGreaterThanOrEqual(2);
      expect(frSources.length).toBeGreaterThanOrEqual(2);
      expect(deSources.length).toBeGreaterThanOrEqual(2);
      expect(ptSources.length).toBeGreaterThanOrEqual(1);
      console.log("Language distribution:");
      console.log("  English: ".concat(enSources.length, " sources"));
      console.log("  Spanish: ".concat(esSources.length, " sources"));
      console.log("  Italian: ".concat(itSources.length, " sources"));
      console.log("  French: ".concat(frSources.length, " sources"));
      console.log("  German: ".concat(deSources.length, " sources"));
      console.log("  Portuguese: ".concat(ptSources.length, " sources"));
    });
  });
  describe("Source Quality Requirements", function () {
    it("should have high reliability scores", function () {
      var tier1Reliability = _globalSources.TIER_1_SOURCES.every(function (s) {
        return s.reliability >= 0.9;
      });
      var tier2Reliability = [].concat(_toConsumableArray(_globalSources.TIER_2_SOURCES), _toConsumableArray(_globalSources.TIER_2_ADDITIONAL)).every(function (s) {
        return s.reliability >= 0.75;
      });
      var tier3Reliability = _globalSources.TIER_3_SOURCES.every(function (s) {
        return s.reliability >= 0.7;
      });
      expect(tier1Reliability).toBe(true);
      expect(tier2Reliability).toBe(true);
      expect(tier3Reliability).toBe(true);
      var avgReliability = _globalSources.ALL_ITK_SOURCES.reduce(function (sum, s) {
        return sum + s.reliability;
      }, 0) / _globalSources.ALL_ITK_SOURCES.length;
      expect(avgReliability).toBeGreaterThan(0.75);
      console.log("Average reliability: ".concat((avgReliability * 100).toFixed(1), "%"));
    });
    it("should have proper monitoring priority order", function () {
      var prioritySources = (0, _globalSources.getMonitoringPriority)();
      expect(prioritySources.length).toBe(_globalSources.ALL_ITK_SOURCES.length);

      // First sources should be Tier 1
      var firstFew = prioritySources.slice(0, 3);
      expect(firstFew.every(function (s) {
        return s.tier === 1;
      })).toBe(true);

      // Should be ordered by tier first, then reliability
      for (var i = 0; i < prioritySources.length - 1; i++) {
        var current = prioritySources[i];
        var next = prioritySources[i + 1];
        if (current.tier === next.tier) {
          expect(current.reliability).toBeGreaterThanOrEqual(next.reliability);
        } else {
          expect(current.tier).toBeLessThan(next.tier);
        }
      }
      console.log("Top 5 priority sources:");
      prioritySources.slice(0, 5).forEach(function (source, index) {
        console.log("  ".concat(index + 1, ". ").concat(source.name, " (Tier ").concat(source.tier, ", ").concat((source.reliability * 100).toFixed(1), "%)"));
      });
    });
  });
  describe("Source Data Validation", function () {
    it("should have all required fields for each source", function () {
      _globalSources.ALL_ITK_SOURCES.forEach(function (source) {
        expect(source.id).toBeTruthy();
        expect(source.name).toBeTruthy();
        expect(source.handle).toMatch(/^@\w+/);
        expect([1, 2, 3]).toContain(source.tier);
        expect(source.reliability).toBeGreaterThan(0);
        expect(source.reliability).toBeLessThanOrEqual(1);
        expect(["UK", "ES", "IT", "FR", "DE", "BR", "GLOBAL"]).toContain(source.region);
        expect(["en", "es", "it", "fr", "de", "pt"]).toContain(source.language);
        expect(Array.isArray(source.specialties)).toBe(true);
        expect(Array.isArray(source.leagues)).toBe(true);
        expect(_typeof(source.isActive)).toBe("boolean");
      });
    });
    it("should have unique IDs and handles", function () {
      var ids = _globalSources.ALL_ITK_SOURCES.map(function (s) {
        return s.id;
      });
      var handles = _globalSources.ALL_ITK_SOURCES.map(function (s) {
        return s.handle;
      });
      expect(new Set(ids).size).toBe(_globalSources.ALL_ITK_SOURCES.length);
      expect(new Set(handles).size).toBe(_globalSources.ALL_ITK_SOURCES.length);
    });
    it("should have proper league assignments", function () {
      var validLeagues = ["PL", "LaLiga", "SerieA", "Bundesliga", "Ligue1", "UCL", "Championship", "Brasileirao"];
      _globalSources.ALL_ITK_SOURCES.forEach(function (source) {
        expect(source.leagues.length).toBeGreaterThan(0);
        source.leagues.forEach(function (league) {
          expect(validLeagues).toContain(league);
        });
      });
    });
  });
  describe("Elite Sources (Tier 1)", function () {
    it("should include global transfer experts", function () {
      var sourceNames = _globalSources.TIER_1_SOURCES.map(function (s) {
        return s.name.toLowerCase();
      });
      expect(sourceNames).toContain("fabrizio romano");
      expect(sourceNames).toContain("david ornstein");
      expect(sourceNames).toContain("gianluca di marzio");

      // All Tier 1 should have >90% reliability
      _globalSources.TIER_1_SOURCES.forEach(function (source) {
        expect(source.reliability).toBeGreaterThan(0.9);
      });
    });
  });
  describe("Global Coverage Analysis", function () {
    it("should provide comprehensive global coverage", function () {
      // Test data for comprehensive analysis
      var stats = {
        totalSources: _globalSources.ALL_ITK_SOURCES.length,
        activeSources: (0, _globalSources.getActiveSources)().length,
        regions: _toConsumableArray(new Set(_globalSources.ALL_ITK_SOURCES.map(function (s) {
          return s.region;
        }))).length,
        languages: _toConsumableArray(new Set(_globalSources.ALL_ITK_SOURCES.map(function (s) {
          return s.language;
        }))).length,
        leagues: _toConsumableArray(new Set(_globalSources.ALL_ITK_SOURCES.flatMap(function (s) {
          return s.leagues;
        }))).length,
        avgReliability: _globalSources.ALL_ITK_SOURCES.reduce(function (sum, s) {
          return sum + s.reliability;
        }, 0) / _globalSources.ALL_ITK_SOURCES.length
      };
      expect(stats.totalSources).toBeGreaterThanOrEqual(20);
      expect(stats.regions).toBeGreaterThanOrEqual(6);
      expect(stats.languages).toBeGreaterThanOrEqual(5);
      expect(stats.leagues).toBeGreaterThanOrEqual(6);
      expect(stats.avgReliability).toBeGreaterThan(0.75);
      console.log("📊 Global ITK Coverage Analysis:");
      console.log("  \u2705 Total Sources: ".concat(stats.totalSources, " (requirement: 20+)"));
      console.log("  \u2705 Active Sources: ".concat(stats.activeSources));
      console.log("  \u2705 Regions Covered: ".concat(stats.regions));
      console.log("  \u2705 Languages Supported: ".concat(stats.languages));
      console.log("  \u2705 Leagues Monitored: ".concat(stats.leagues));
      console.log("  \u2705 Average Reliability: ".concat((stats.avgReliability * 100).toFixed(1), "%"));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,