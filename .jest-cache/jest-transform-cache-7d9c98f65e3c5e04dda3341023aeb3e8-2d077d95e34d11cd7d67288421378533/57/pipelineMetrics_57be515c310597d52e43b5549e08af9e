74bd20721d169745208a63b7968695bb
/* istanbul ignore next */
var _templateObject;
function cov_12810rv1bg() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/monitoring/pipelineMetrics.ts";
  var hash = "b23a5f98c74c12d380c84e59e1e1c9d7ea1acc1e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/monitoring/pipelineMetrics.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 46
        },
        end: {
          line: 47,
          column: 2
        }
      },
      "1": {
        start: {
          line: 49,
          column: 39
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "2": {
        start: {
          line: 58,
          column: 40
        },
        end: {
          line: 90,
          column: 2
        }
      },
      "3": {
        start: {
          line: 107,
          column: 68
        },
        end: {
          line: 107,
          column: 77
        }
      },
      "4": {
        start: {
          line: 108,
          column: 56
        },
        end: {
          line: 108,
          column: 65
        }
      },
      "5": {
        start: {
          line: 109,
          column: 48
        },
        end: {
          line: 109,
          column: 50
        }
      },
      "6": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 118,
          column: 6
        }
      },
      "7": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "8": {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 121,
          column: 36
        }
      },
      "9": {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 87
        }
      },
      "10": {
        start: {
          line: 134,
          column: 48
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "11": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 54
        }
      },
      "12": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 76
        }
      },
      "13": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 152,
          column: 23
        }
      },
      "14": {
        start: {
          line: 162,
          column: 22
        },
        end: {
          line: 162,
          column: 60
        }
      },
      "15": {
        start: {
          line: 163,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "16": {
        start: {
          line: 164,
          column: 6
        },
        end: {
          line: 164,
          column: 68
        }
      },
      "17": {
        start: {
          line: 165,
          column: 6
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "18": {
        start: {
          line: 169,
          column: 4
        },
        end: {
          line: 169,
          column: 38
        }
      },
      "19": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 174,
          column: 5
        }
      },
      "20": {
        start: {
          line: 173,
          column: 6
        },
        end: {
          line: 173,
          column: 70
        }
      },
      "21": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 176,
          column: 54
        }
      },
      "22": {
        start: {
          line: 187,
          column: 22
        },
        end: {
          line: 187,
          column: 60
        }
      },
      "23": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 191,
          column: 5
        }
      },
      "24": {
        start: {
          line: 189,
          column: 6
        },
        end: {
          line: 189,
          column: 72
        }
      },
      "25": {
        start: {
          line: 190,
          column: 6
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "26": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 35
        }
      },
      "27": {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 196,
          column: 66
        }
      },
      "28": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 197,
          column: 30
        }
      },
      "29": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 203,
          column: 5
        }
      },
      "30": {
        start: {
          line: 200,
          column: 6
        },
        end: {
          line: 200,
          column: 39
        }
      },
      "31": {
        start: {
          line: 201,
          column: 6
        },
        end: {
          line: 201,
          column: 45
        }
      },
      "32": {
        start: {
          line: 202,
          column: 6
        },
        end: {
          line: 202,
          column: 41
        }
      },
      "33": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "34": {
        start: {
          line: 207,
          column: 26
        },
        end: {
          line: 207,
          column: 47
        }
      },
      "35": {
        start: {
          line: 208,
          column: 6
        },
        end: {
          line: 208,
          column: 50
        }
      },
      "36": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 212,
          column: 43
        }
      },
      "37": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 46
        }
      },
      "38": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 220,
          column: 5
        }
      },
      "39": {
        start: {
          line: 219,
          column: 6
        },
        end: {
          line: 219,
          column: 40
        }
      },
      "40": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "41": {
        start: {
          line: 233,
          column: 22
        },
        end: {
          line: 233,
          column: 32
        }
      },
      "42": {
        start: {
          line: 234,
          column: 46
        },
        end: {
          line: 234,
          column: 55
        }
      },
      "43": {
        start: {
          line: 235,
          column: 39
        },
        end: {
          line: 235,
          column: 41
        }
      },
      "44": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 266,
          column: 5
        }
      },
      "45": {
        start: {
          line: 239,
          column: 6
        },
        end: {
          line: 262,
          column: 7
        }
      },
      "46": {
        start: {
          line: 241,
          column: 10
        },
        end: {
          line: 241,
          column: 43
        }
      },
      "47": {
        start: {
          line: 242,
          column: 10
        },
        end: {
          line: 242,
          column: 77
        }
      },
      "48": {
        start: {
          line: 243,
          column: 10
        },
        end: {
          line: 243,
          column: 16
        }
      },
      "49": {
        start: {
          line: 246,
          column: 10
        },
        end: {
          line: 246,
          column: 37
        }
      },
      "50": {
        start: {
          line: 247,
          column: 10
        },
        end: {
          line: 247,
          column: 61
        }
      },
      "51": {
        start: {
          line: 248,
          column: 10
        },
        end: {
          line: 248,
          column: 16
        }
      },
      "52": {
        start: {
          line: 251,
          column: 10
        },
        end: {
          line: 251,
          column: 42
        }
      },
      "53": {
        start: {
          line: 252,
          column: 10
        },
        end: {
          line: 252,
          column: 77
        }
      },
      "54": {
        start: {
          line: 253,
          column: 10
        },
        end: {
          line: 253,
          column: 16
        }
      },
      "55": {
        start: {
          line: 256,
          column: 10
        },
        end: {
          line: 256,
          column: 54
        }
      },
      "56": {
        start: {
          line: 257,
          column: 10
        },
        end: {
          line: 257,
          column: 16
        }
      },
      "57": {
        start: {
          line: 260,
          column: 10
        },
        end: {
          line: 260,
          column: 50
        }
      },
      "58": {
        start: {
          line: 261,
          column: 10
        },
        end: {
          line: 261,
          column: 16
        }
      },
      "59": {
        start: {
          line: 264,
          column: 6
        },
        end: {
          line: 264,
          column: 27
        }
      },
      "60": {
        start: {
          line: 265,
          column: 6
        },
        end: {
          line: 265,
          column: 67
        }
      },
      "61": {
        start: {
          line: 268,
          column: 38
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "62": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 278,
          column: 42
        }
      },
      "63": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 280,
          column: 18
        }
      },
      "64": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 26
        }
      },
      "65": {
        start: {
          line: 290,
          column: 29
        },
        end: {
          line: 290,
          column: 75
        }
      },
      "66": {
        start: {
          line: 292,
          column: 40
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "67": {
        start: {
          line: 329,
          column: 4
        },
        end: {
          line: 329,
          column: 37
        }
      },
      "68": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 331,
          column: 19
        }
      },
      "69": {
        start: {
          line: 344,
          column: 43
        },
        end: {
          line: 347,
          column: 6
        }
      },
      "70": {
        start: {
          line: 349,
          column: 29
        },
        end: {
          line: 349,
          column: 71
        }
      },
      "71": {
        start: {
          line: 350,
          column: 25
        },
        end: {
          line: 350,
          column: 53
        }
      },
      "72": {
        start: {
          line: 351,
          column: 29
        },
        end: {
          line: 351,
          column: 61
        }
      },
      "73": {
        start: {
          line: 353,
          column: 4
        },
        end: {
          line: 359,
          column: 6
        }
      },
      "74": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 375,
          column: 40
        }
      },
      "75": {
        start: {
          line: 368,
          column: 6
        },
        end: {
          line: 374,
          column: 7
        }
      },
      "76": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 39
        }
      },
      "77": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 44
        }
      },
      "78": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 39
        }
      },
      "79": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 58
        }
      },
      "80": {
        start: {
          line: 377,
          column: 4
        },
        end: {
          line: 377,
          column: 58
        }
      },
      "81": {
        start: {
          line: 384,
          column: 53
        },
        end: {
          line: 390,
          column: 5
        }
      },
      "82": {
        start: {
          line: 392,
          column: 20
        },
        end: {
          line: 394,
          column: 5
        }
      },
      "83": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 64
        }
      },
      "84": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 401,
          column: 37
        }
      },
      "85": {
        start: {
          line: 399,
          column: 10
        },
        end: {
          line: 399,
          column: 39
        }
      },
      "86": {
        start: {
          line: 401,
          column: 23
        },
        end: {
          line: 401,
          column: 35
        }
      },
      "87": {
        start: {
          line: 410,
          column: 29
        },
        end: {
          line: 410,
          column: 31
        }
      },
      "88": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 420,
          column: 5
        }
      },
      "89": {
        start: {
          line: 417,
          column: 6
        },
        end: {
          line: 419,
          column: 8
        }
      },
      "90": {
        start: {
          line: 423,
          column: 22
        },
        end: {
          line: 423,
          column: 77
        }
      },
      "91": {
        start: {
          line: 424,
          column: 4
        },
        end: {
          line: 426,
          column: 5
        }
      },
      "92": {
        start: {
          line: 425,
          column: 6
        },
        end: {
          line: 425,
          column: 80
        }
      },
      "93": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 437,
          column: 5
        }
      },
      "94": {
        start: {
          line: 434,
          column: 6
        },
        end: {
          line: 436,
          column: 8
        }
      },
      "95": {
        start: {
          line: 440,
          column: 4
        },
        end: {
          line: 442,
          column: 5
        }
      },
      "96": {
        start: {
          line: 441,
          column: 6
        },
        end: {
          line: 441,
          column: 45
        }
      },
      "97": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 452,
          column: 41
        }
      },
      "98": {
        start: {
          line: 457,
          column: 4
        },
        end: {
          line: 465,
          column: 5
        }
      },
      "99": {
        start: {
          line: 460,
          column: 6
        },
        end: {
          line: 462,
          column: 8
        }
      },
      "100": {
        start: {
          line: 464,
          column: 6
        },
        end: {
          line: 464,
          column: 53
        }
      },
      "101": {
        start: {
          line: 472,
          column: 4
        },
        end: {
          line: 472,
          column: 37
        }
      },
      "102": {
        start: {
          line: 477,
          column: 4
        },
        end: {
          line: 477,
          column: 13
        }
      },
      "103": {
        start: {
          line: 498,
          column: 4
        },
        end: {
          line: 498,
          column: 15
        }
      },
      "104": {
        start: {
          line: 505,
          column: 4
        },
        end: {
          line: 508,
          column: 6
        }
      },
      "105": {
        start: {
          line: 515,
          column: 4
        },
        end: {
          line: 518,
          column: 6
        }
      },
      "106": {
        start: {
          line: 527,
          column: 4
        },
        end: {
          line: 527,
          column: 42
        }
      },
      "107": {
        start: {
          line: 527,
          column: 33
        },
        end: {
          line: 527,
          column: 42
        }
      },
      "108": {
        start: {
          line: 528,
          column: 22
        },
        end: {
          line: 531,
          column: 5
        }
      },
      "109": {
        start: {
          line: 529,
          column: 21
        },
        end: {
          line: 529,
          column: 47
        }
      },
      "110": {
        start: {
          line: 532,
          column: 4
        },
        end: {
          line: 532,
          column: 41
        }
      },
      "111": {
        start: {
          line: 536,
          column: 4
        },
        end: {
          line: 536,
          column: 42
        }
      },
      "112": {
        start: {
          line: 536,
          column: 33
        },
        end: {
          line: 536,
          column: 42
        }
      },
      "113": {
        start: {
          line: 537,
          column: 23
        },
        end: {
          line: 539,
          column: 12
        }
      },
      "114": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 538,
          column: 43
        }
      },
      "115": {
        start: {
          line: 540,
          column: 4
        },
        end: {
          line: 540,
          column: 42
        }
      },
      "116": {
        start: {
          line: 544,
          column: 4
        },
        end: {
          line: 544,
          column: 53
        }
      },
      "117": {
        start: {
          line: 548,
          column: 23
        },
        end: {
          line: 551,
          column: 5
        }
      },
      "118": {
        start: {
          line: 549,
          column: 21
        },
        end: {
          line: 549,
          column: 46
        }
      },
      "119": {
        start: {
          line: 552,
          column: 4
        },
        end: {
          line: 552,
          column: 22
        }
      },
      "120": {
        start: {
          line: 558,
          column: 24
        },
        end: {
          line: 558,
          column: 77
        }
      },
      "121": {
        start: {
          line: 558,
          column: 52
        },
        end: {
          line: 558,
          column: 76
        }
      },
      "122": {
        start: {
          line: 559,
          column: 4
        },
        end: {
          line: 559,
          column: 43
        }
      },
      "123": {
        start: {
          line: 559,
          column: 34
        },
        end: {
          line: 559,
          column: 43
        }
      },
      "124": {
        start: {
          line: 560,
          column: 25
        },
        end: {
          line: 563,
          column: 5
        }
      },
      "125": {
        start: {
          line: 561,
          column: 21
        },
        end: {
          line: 561,
          column: 58
        }
      },
      "126": {
        start: {
          line: 564,
          column: 4
        },
        end: {
          line: 564,
          column: 45
        }
      },
      "127": {
        start: {
          line: 570,
          column: 24
        },
        end: {
          line: 570,
          column: 77
        }
      },
      "128": {
        start: {
          line: 570,
          column: 52
        },
        end: {
          line: 570,
          column: 76
        }
      },
      "129": {
        start: {
          line: 571,
          column: 4
        },
        end: {
          line: 571,
          column: 43
        }
      },
      "130": {
        start: {
          line: 571,
          column: 34
        },
        end: {
          line: 571,
          column: 43
        }
      },
      "131": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 576,
          column: 5
        }
      },
      "132": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 575,
          column: 49
        }
      },
      "133": {
        start: {
          line: 577,
          column: 4
        },
        end: {
          line: 577,
          column: 47
        }
      },
      "134": {
        start: {
          line: 583,
          column: 23
        },
        end: {
          line: 586,
          column: 5
        }
      },
      "135": {
        start: {
          line: 584,
          column: 21
        },
        end: {
          line: 584,
          column: 46
        }
      },
      "136": {
        start: {
          line: 587,
          column: 24
        },
        end: {
          line: 590,
          column: 5
        }
      },
      "137": {
        start: {
          line: 588,
          column: 21
        },
        end: {
          line: 588,
          column: 51
        }
      },
      "138": {
        start: {
          line: 591,
          column: 4
        },
        end: {
          line: 591,
          column: 57
        }
      },
      "139": {
        start: {
          line: 595,
          column: 4
        },
        end: {
          line: 598,
          column: 5
        }
      },
      "140": {
        start: {
          line: 596,
          column: 21
        },
        end: {
          line: 596,
          column: 42
        }
      },
      "141": {
        start: {
          line: 597,
          column: 6
        },
        end: {
          line: 597,
          column: 56
        }
      },
      "142": {
        start: {
          line: 599,
          column: 4
        },
        end: {
          line: 599,
          column: 13
        }
      },
      "143": {
        start: {
          line: 604,
          column: 4
        },
        end: {
          line: 604,
          column: 13
        }
      },
      "144": {
        start: {
          line: 609,
          column: 4
        },
        end: {
          line: 609,
          column: 16
        }
      },
      "145": {
        start: {
          line: 614,
          column: 4
        },
        end: {
          line: 614,
          column: 15
        }
      },
      "146": {
        start: {
          line: 619,
          column: 4
        },
        end: {
          line: 619,
          column: 15
        }
      },
      "147": {
        start: {
          line: 623,
          column: 4
        },
        end: {
          line: 623,
          column: 35
        }
      },
      "148": {
        start: {
          line: 627,
          column: 18
        },
        end: {
          line: 627,
          column: 47
        }
      },
      "149": {
        start: {
          line: 628,
          column: 20
        },
        end: {
          line: 630,
          column: 6
        }
      },
      "150": {
        start: {
          line: 631,
          column: 4
        },
        end: {
          line: 631,
          column: 43
        }
      },
      "151": {
        start: {
          line: 636,
          column: 4
        },
        end: {
          line: 636,
          column: 15
        }
      },
      "152": {
        start: {
          line: 645,
          column: 4
        },
        end: {
          line: 651,
          column: 5
        }
      },
      "153": {
        start: {
          line: 648,
          column: 6
        },
        end: {
          line: 648,
          column: 79
        }
      },
      "154": {
        start: {
          line: 650,
          column: 6
        },
        end: {
          line: 650,
          column: 67
        }
      },
      "155": {
        start: {
          line: 658,
          column: 4
        },
        end: {
          line: 658,
          column: 14
        }
      },
      "156": {
        start: {
          line: 663,
          column: 4
        },
        end: {
          line: 663,
          column: 14
        }
      },
      "157": {
        start: {
          line: 668,
          column: 4
        },
        end: {
          line: 668,
          column: 14
        }
      },
      "158": {
        start: {
          line: 672,
          column: 23
        },
        end: {
          line: 672,
          column: 73
        }
      },
      "159": {
        start: {
          line: 674,
          column: 4
        },
        end: {
          line: 674,
          column: 78
        }
      },
      "160": {
        start: {
          line: 679,
          column: 32
        },
        end: {
          line: 682,
          column: 2
        }
      },
      "161": {
        start: {
          line: 690,
          column: 22
        },
        end: {
          line: 690,
          column: 76
        }
      },
      "162": {
        start: {
          line: 692,
          column: 2
        },
        end: {
          line: 704,
          column: 3
        }
      },
      "163": {
        start: {
          line: 693,
          column: 19
        },
        end: {
          line: 693,
          column: 36
        }
      },
      "164": {
        start: {
          line: 694,
          column: 4
        },
        end: {
          line: 694,
          column: 71
        }
      },
      "165": {
        start: {
          line: 695,
          column: 4
        },
        end: {
          line: 695,
          column: 18
        }
      },
      "166": {
        start: {
          line: 697,
          column: 4
        },
        end: {
          line: 702,
          column: 7
        }
      },
      "167": {
        start: {
          line: 703,
          column: 4
        },
        end: {
          line: 703,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 111,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        loc: {
          start: {
            line: 111,
            column: 60
          },
          end: {
            line: 123,
            column: 3
          }
        },
        line: 111
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 128,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        },
        loc: {
          start: {
            line: 131,
            column: 21
          },
          end: {
            line: 153,
            column: 3
          }
        },
        line: 131
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 158,
            column: 2
          },
          end: {
            line: 158,
            column: 3
          }
        },
        loc: {
          start: {
            line: 161,
            column: 10
          },
          end: {
            line: 177,
            column: 3
          }
        },
        line: 161
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 182,
            column: 2
          },
          end: {
            line: 182,
            column: 3
          }
        },
        loc: {
          start: {
            line: 186,
            column: 19
          },
          end: {
            line: 225,
            column: 3
          }
        },
        line: 186
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 230,
            column: 2
          },
          end: {
            line: 230,
            column: 3
          }
        },
        loc: {
          start: {
            line: 232,
            column: 32
          },
          end: {
            line: 281,
            column: 3
          }
        },
        line: 232
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 286,
            column: 2
          },
          end: {
            line: 286,
            column: 3
          }
        },
        loc: {
          start: {
            line: 286,
            column: 57
          },
          end: {
            line: 332,
            column: 3
          }
        },
        line: 286
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 337,
            column: 2
          },
          end: {
            line: 337,
            column: 3
          }
        },
        loc: {
          start: {
            line: 343,
            column: 5
          },
          end: {
            line: 360,
            column: 3
          }
        },
        line: 343
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 365,
            column: 2
          },
          end: {
            line: 365,
            column: 3
          }
        },
        loc: {
          start: {
            line: 365,
            column: 41
          },
          end: {
            line: 378,
            column: 3
          }
        },
        line: 365
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 367,
            column: 17
          }
        },
        loc: {
          start: {
            line: 367,
            column: 28
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 367
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 383,
            column: 2
          },
          end: {
            line: 383,
            column: 3
          }
        },
        loc: {
          start: {
            line: 383,
            column: 71
          },
          end: {
            line: 402,
            column: 3
          }
        },
        line: 383
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 393,
            column: 19
          },
          end: {
            line: 393,
            column: 20
          }
        },
        loc: {
          start: {
            line: 393,
            column: 32
          },
          end: {
            line: 393,
            column: 64
          }
        },
        line: 393
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        loc: {
          start: {
            line: 399,
            column: 10
          },
          end: {
            line: 399,
            column: 39
          }
        },
        line: 399
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 401,
            column: 11
          },
          end: {
            line: 401,
            column: 12
          }
        },
        loc: {
          start: {
            line: 401,
            column: 23
          },
          end: {
            line: 401,
            column: 35
          }
        },
        line: 401
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 407,
            column: 2
          },
          end: {
            line: 407,
            column: 3
          }
        },
        loc: {
          start: {
            line: 409,
            column: 19
          },
          end: {
            line: 443,
            column: 3
          }
        },
        line: 409
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 448,
            column: 2
          },
          end: {
            line: 448,
            column: 3
          }
        },
        loc: {
          start: {
            line: 451,
            column: 19
          },
          end: {
            line: 466,
            column: 3
          }
        },
        line: 451
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 471,
            column: 2
          },
          end: {
            line: 471,
            column: 3
          }
        },
        loc: {
          start: {
            line: 471,
            column: 53
          },
          end: {
            line: 473,
            column: 3
          }
        },
        line: 471
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 475,
            column: 2
          },
          end: {
            line: 475,
            column: 3
          }
        },
        loc: {
          start: {
            line: 475,
            column: 58
          },
          end: {
            line: 478,
            column: 3
          }
        },
        line: 475
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 483,
            column: 2
          },
          end: {
            line: 483,
            column: 3
          }
        },
        loc: {
          start: {
            line: 483,
            column: 47
          },
          end: {
            line: 486,
            column: 3
          }
        },
        line: 483
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 491,
            column: 2
          },
          end: {
            line: 491,
            column: 3
          }
        },
        loc: {
          start: {
            line: 491,
            column: 52
          },
          end: {
            line: 494,
            column: 3
          }
        },
        line: 491
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 496,
            column: 2
          },
          end: {
            line: 496,
            column: 3
          }
        },
        loc: {
          start: {
            line: 496,
            column: 55
          },
          end: {
            line: 499,
            column: 3
          }
        },
        line: 496
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 504,
            column: 2
          },
          end: {
            line: 504,
            column: 3
          }
        },
        loc: {
          start: {
            line: 504,
            column: 69
          },
          end: {
            line: 509,
            column: 3
          }
        },
        line: 504
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 514,
            column: 2
          },
          end: {
            line: 514,
            column: 3
          }
        },
        loc: {
          start: {
            line: 514,
            column: 65
          },
          end: {
            line: 519,
            column: 3
          }
        },
        line: 514
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 524,
            column: 2
          },
          end: {
            line: 524,
            column: 3
          }
        },
        loc: {
          start: {
            line: 526,
            column: 12
          },
          end: {
            line: 533,
            column: 3
          }
        },
        line: 526
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 529,
            column: 6
          },
          end: {
            line: 529,
            column: 7
          }
        },
        loc: {
          start: {
            line: 529,
            column: 21
          },
          end: {
            line: 529,
            column: 47
          }
        },
        line: 529
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 535,
            column: 2
          },
          end: {
            line: 535,
            column: 3
          }
        },
        loc: {
          start: {
            line: 535,
            column: 79
          },
          end: {
            line: 541,
            column: 3
          }
        },
        line: 535
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 538,
            column: 6
          },
          end: {
            line: 538,
            column: 7
          }
        },
        loc: {
          start: {
            line: 538,
            column: 16
          },
          end: {
            line: 538,
            column: 43
          }
        },
        line: 538
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 543,
            column: 2
          },
          end: {
            line: 543,
            column: 3
          }
        },
        loc: {
          start: {
            line: 543,
            column: 77
          },
          end: {
            line: 545,
            column: 3
          }
        },
        line: 543
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 547,
            column: 2
          },
          end: {
            line: 547,
            column: 3
          }
        },
        loc: {
          start: {
            line: 547,
            column: 78
          },
          end: {
            line: 553,
            column: 3
          }
        },
        line: 547
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 549,
            column: 6
          },
          end: {
            line: 549,
            column: 7
          }
        },
        loc: {
          start: {
            line: 549,
            column: 21
          },
          end: {
            line: 549,
            column: 46
          }
        },
        line: 549
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 555,
            column: 2
          },
          end: {
            line: 555,
            column: 3
          }
        },
        loc: {
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 565,
            column: 3
          }
        },
        line: 557
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 558,
            column: 42
          },
          end: {
            line: 558,
            column: 43
          }
        },
        loc: {
          start: {
            line: 558,
            column: 52
          },
          end: {
            line: 558,
            column: 76
          }
        },
        line: 558
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 561,
            column: 6
          },
          end: {
            line: 561,
            column: 7
          }
        },
        loc: {
          start: {
            line: 561,
            column: 21
          },
          end: {
            line: 561,
            column: 58
          }
        },
        line: 561
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 567,
            column: 2
          },
          end: {
            line: 567,
            column: 3
          }
        },
        loc: {
          start: {
            line: 569,
            column: 12
          },
          end: {
            line: 578,
            column: 3
          }
        },
        line: 569
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 570,
            column: 42
          },
          end: {
            line: 570,
            column: 43
          }
        },
        loc: {
          start: {
            line: 570,
            column: 52
          },
          end: {
            line: 570,
            column: 76
          }
        },
        line: 570
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 573,
            column: 6
          },
          end: {
            line: 573,
            column: 7
          }
        },
        loc: {
          start: {
            line: 574,
            column: 8
          },
          end: {
            line: 575,
            column: 49
          }
        },
        line: 574
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 580,
            column: 2
          },
          end: {
            line: 580,
            column: 3
          }
        },
        loc: {
          start: {
            line: 582,
            column: 12
          },
          end: {
            line: 592,
            column: 3
          }
        },
        line: 582
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 584,
            column: 6
          },
          end: {
            line: 584,
            column: 7
          }
        },
        loc: {
          start: {
            line: 584,
            column: 21
          },
          end: {
            line: 584,
            column: 46
          }
        },
        line: 584
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 588,
            column: 6
          },
          end: {
            line: 588,
            column: 7
          }
        },
        loc: {
          start: {
            line: 588,
            column: 21
          },
          end: {
            line: 588,
            column: 51
          }
        },
        line: 588
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 594,
            column: 2
          },
          end: {
            line: 594,
            column: 3
          }
        },
        loc: {
          start: {
            line: 594,
            column: 42
          },
          end: {
            line: 600,
            column: 3
          }
        },
        line: 594
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 602,
            column: 2
          },
          end: {
            line: 602,
            column: 3
          }
        },
        loc: {
          start: {
            line: 602,
            column: 39
          },
          end: {
            line: 605,
            column: 3
          }
        },
        line: 602
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 607,
            column: 2
          },
          end: {
            line: 607,
            column: 3
          }
        },
        loc: {
          start: {
            line: 607,
            column: 51
          },
          end: {
            line: 610,
            column: 3
          }
        },
        line: 607
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 612,
            column: 2
          },
          end: {
            line: 612,
            column: 3
          }
        },
        loc: {
          start: {
            line: 612,
            column: 59
          },
          end: {
            line: 615,
            column: 3
          }
        },
        line: 612
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 617,
            column: 2
          },
          end: {
            line: 617,
            column: 3
          }
        },
        loc: {
          start: {
            line: 617,
            column: 56
          },
          end: {
            line: 620,
            column: 3
          }
        },
        line: 617
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 622,
            column: 2
          },
          end: {
            line: 622,
            column: 3
          }
        },
        loc: {
          start: {
            line: 622,
            column: 53
          },
          end: {
            line: 624,
            column: 3
          }
        },
        line: 622
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 626,
            column: 2
          },
          end: {
            line: 626,
            column: 3
          }
        },
        loc: {
          start: {
            line: 626,
            column: 58
          },
          end: {
            line: 632,
            column: 3
          }
        },
        line: 626
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 634,
            column: 2
          },
          end: {
            line: 634,
            column: 3
          }
        },
        loc: {
          start: {
            line: 634,
            column: 53
          },
          end: {
            line: 637,
            column: 3
          }
        },
        line: 634
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 642,
            column: 2
          },
          end: {
            line: 642,
            column: 3
          }
        },
        loc: {
          start: {
            line: 644,
            column: 19
          },
          end: {
            line: 652,
            column: 3
          }
        },
        line: 644
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 654,
            column: 2
          },
          end: {
            line: 654,
            column: 3
          }
        },
        loc: {
          start: {
            line: 656,
            column: 41
          },
          end: {
            line: 659,
            column: 3
          }
        },
        line: 656
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 661,
            column: 2
          },
          end: {
            line: 661,
            column: 3
          }
        },
        loc: {
          start: {
            line: 661,
            column: 50
          },
          end: {
            line: 664,
            column: 3
          }
        },
        line: 661
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 666,
            column: 2
          },
          end: {
            line: 666,
            column: 3
          }
        },
        loc: {
          start: {
            line: 666,
            column: 54
          },
          end: {
            line: 669,
            column: 3
          }
        },
        line: 666
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 671,
            column: 2
          },
          end: {
            line: 671,
            column: 3
          }
        },
        loc: {
          start: {
            line: 671,
            column: 51
          },
          end: {
            line: 675,
            column: 3
          }
        },
        line: 671
      },
      "51": {
        name: "trackPipelineExecution",
        decl: {
          start: {
            line: 685,
            column: 22
          },
          end: {
            line: 685,
            column: 44
          }
        },
        loc: {
          start: {
            line: 689,
            column: 14
          },
          end: {
            line: 705,
            column: 1
          }
        },
        line: 689
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 111,
            column: 14
          },
          end: {
            line: 111,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 56
          },
          end: {
            line: 111,
            column: 58
          }
        }],
        line: 111
      },
      "1": {
        loc: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "2": {
        loc: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 166,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "3": {
        loc: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "4": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 172,
            column: 27
          }
        }, {
          start: {
            line: 172,
            column: 31
          },
          end: {
            line: 172,
            column: 50
          }
        }],
        line: 172
      },
      "5": {
        loc: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "6": {
        loc: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "7": {
        loc: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "8": {
        loc: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "9": {
        loc: {
          start: {
            line: 239,
            column: 6
          },
          end: {
            line: 262,
            column: 7
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 243,
            column: 16
          }
        }, {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 248,
            column: 16
          }
        }, {
          start: {
            line: 250,
            column: 8
          },
          end: {
            line: 253,
            column: 16
          }
        }, {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 16
          }
        }, {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 16
          }
        }],
        line: 239
      },
      "10": {
        loc: {
          start: {
            line: 265,
            column: 14
          },
          end: {
            line: 265,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 37
          },
          end: {
            line: 265,
            column: 48
          }
        }, {
          start: {
            line: 265,
            column: 51
          },
          end: {
            line: 265,
            column: 66
          }
        }],
        line: 265
      },
      "11": {
        loc: {
          start: {
            line: 313,
            column: 28
          },
          end: {
            line: 313,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 28
          },
          end: {
            line: 313,
            column: 74
          }
        }, {
          start: {
            line: 313,
            column: 78
          },
          end: {
            line: 313,
            column: 79
          }
        }],
        line: 313
      },
      "12": {
        loc: {
          start: {
            line: 314,
            column: 29
          },
          end: {
            line: 314,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 29
          },
          end: {
            line: 314,
            column: 69
          }
        }, {
          start: {
            line: 314,
            column: 73
          },
          end: {
            line: 314,
            column: 74
          }
        }],
        line: 314
      },
      "13": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 316,
            column: 53
          }
        }, {
          start: {
            line: 316,
            column: 57
          },
          end: {
            line: 316,
            column: 58
          }
        }],
        line: 316
      },
      "14": {
        loc: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "15": {
        loc: {
          start: {
            line: 414,
            column: 6
          },
          end: {
            line: 415,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 6
          },
          end: {
            line: 414,
            column: 24
          }
        }, {
          start: {
            line: 415,
            column: 6
          },
          end: {
            line: 415,
            column: 72
          }
        }],
        line: 414
      },
      "16": {
        loc: {
          start: {
            line: 423,
            column: 47
          },
          end: {
            line: 423,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 423,
            column: 47
          },
          end: {
            line: 423,
            column: 71
          }
        }, {
          start: {
            line: 423,
            column: 75
          },
          end: {
            line: 423,
            column: 76
          }
        }],
        line: 423
      },
      "17": {
        loc: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "18": {
        loc: {
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "19": {
        loc: {
          start: {
            line: 430,
            column: 6
          },
          end: {
            line: 432,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 6
          },
          end: {
            line: 430,
            column: 35
          }
        }, {
          start: {
            line: 431,
            column: 6
          },
          end: {
            line: 432,
            column: 66
          }
        }],
        line: 430
      },
      "20": {
        loc: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 527
      },
      "21": {
        loc: {
          start: {
            line: 529,
            column: 28
          },
          end: {
            line: 529,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 28
          },
          end: {
            line: 529,
            column: 41
          }
        }, {
          start: {
            line: 529,
            column: 45
          },
          end: {
            line: 529,
            column: 46
          }
        }],
        line: 529
      },
      "22": {
        loc: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 42
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 42
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 536
      },
      "23": {
        loc: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 559
      },
      "24": {
        loc: {
          start: {
            line: 561,
            column: 28
          },
          end: {
            line: 561,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 561,
            column: 28
          },
          end: {
            line: 561,
            column: 52
          }
        }, {
          start: {
            line: 561,
            column: 56
          },
          end: {
            line: 561,
            column: 57
          }
        }],
        line: 561
      },
      "25": {
        loc: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 571
      },
      "26": {
        loc: {
          start: {
            line: 574,
            column: 9
          },
          end: {
            line: 574,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 9
          },
          end: {
            line: 574,
            column: 33
          }
        }, {
          start: {
            line: 574,
            column: 37
          },
          end: {
            line: 574,
            column: 38
          }
        }],
        line: 574
      },
      "27": {
        loc: {
          start: {
            line: 591,
            column: 11
          },
          end: {
            line: 591,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 591,
            column: 28
          },
          end: {
            line: 591,
            column: 52
          }
        }, {
          start: {
            line: 591,
            column: 55
          },
          end: {
            line: 591,
            column: 56
          }
        }],
        line: 591
      },
      "28": {
        loc: {
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 595,
            column: 4
          },
          end: {
            line: 598,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 595
      },
      "29": {
        loc: {
          start: {
            line: 631,
            column: 11
          },
          end: {
            line: 631,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 631,
            column: 23
          },
          end: {
            line: 631,
            column: 38
          }
        }, {
          start: {
            line: 631,
            column: 41
          },
          end: {
            line: 631,
            column: 42
          }
        }],
        line: 631
      },
      "30": {
        loc: {
          start: {
            line: 698,
            column: 12
          },
          end: {
            line: 698,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 698,
            column: 37
          },
          end: {
            line: 698,
            column: 59
          }
        }, {
          start: {
            line: 698,
            column: 62
          },
          end: {
            line: 698,
            column: 76
          }
        }],
        line: 698
      },
      "31": {
        loc: {
          start: {
            line: 700,
            column: 8
          },
          end: {
            line: 700,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 700,
            column: 33
          },
          end: {
            line: 700,
            column: 46
          }
        }, {
          start: {
            line: 700,
            column: 49
          },
          end: {
            line: 700,
            column: 73
          }
        }],
        line: 700
      },
      "32": {
        loc: {
          start: {
            line: 701,
            column: 13
          },
          end: {
            line: 701,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 701,
            column: 38
          },
          end: {
            line: 701,
            column: 49
          }
        }, {
          start: {
            line: 701,
            column: 52
          },
          end: {
            line: 701,
            column: 61
          }
        }],
        line: 701
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b23a5f98c74c12d380c84e59e1e1c9d7ea1acc1e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12810rv1bg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12810rv1bg();
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Pipeline Metrics Collection and Monitoring
 * Real-time performance tracking for the Transfer Juice data pipeline
 */

import { prisma } from "@/lib/prisma";
import { CONFIG } from "@/config/pipeline";
import { z } from "zod";

// Metrics schemas
export var PipelineExecutionMetricsSchema =
/* istanbul ignore next */
(cov_12810rv1bg().s[0]++, z.object({
  id: z.string(),
  executionId: z.string(),
  startTime: z.date(),
  endTime: z.date().optional(),
  duration: z.number().optional(),
  status: z[
  /* istanbul ignore next */
  "enum"](["running", "completed", "failed", "timeout"]),
  stage: z[
  /* istanbul ignore next */
  "enum"](["source_monitoring", "classification", "processing", "quality", "mixing", "broadcasting"]),
  // Performance metrics
  itemsProcessed: z.number()[
  /* istanbul ignore next */
  "default"](0),
  itemsSuccessful: z.number()[
  /* istanbul ignore next */
  "default"](0),
  itemsFailed: z.number()[
  /* istanbul ignore next */
  "default"](0),
  // Resource usage
  memoryUsed: z.number().optional(),
  cpuUsage: z.number().optional(),
  // Quality metrics
  averageQualityScore: z.number().optional(),
  terryCompatibilityScore: z.number().optional(),
  humanReviewRequired: z.number()[
  /* istanbul ignore next */
  "default"](0),
  // Error information
  errorType: z.string().optional(),
  errorMessage: z.string().optional(),
  stackTrace: z.string().optional(),
  metadata: z.record(z.any()).optional()
}));
export var HealthCheckResultSchema =
/* istanbul ignore next */
(cov_12810rv1bg().s[1]++, z.object({
  service: z[
  /* istanbul ignore next */
  "enum"](["database", "ai", "twitter", "websocket", "cache"]),
  status: z[
  /* istanbul ignore next */
  "enum"](["healthy", "degraded", "unhealthy"]),
  responseTime: z.number(),
  timestamp: z.date(),
  details: z.record(z.any()).optional(),
  error: z.string().optional()
}));
export var PerformanceMetricsSchema =
/* istanbul ignore next */
(cov_12810rv1bg().s[2]++, z.object({
  timestamp: z.date(),
  // Pipeline performance
  averageProcessingTime: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  throughput: z.number(),
  // items per hour

  // Quality metrics
  averageQualityScore: z.number(),
  qualityPassRate: z.number(),
  humanReviewRate: z.number(),
  // Resource metrics
  memoryUsage: z.number(),
  cpuUsage: z.number(),
  cacheHitRate: z.number(),
  // External service metrics
  databaseResponseTime: z.number(),
  aiServiceResponseTime: z.number(),
  twitterApiResponseTime: z.number(),
  // User experience metrics
  websocketConnections: z.number(),
  feedUpdateLatency: z.number(),
  // Content metrics
  totalFeedItems: z.number(),
  partnerContentRatio: z.number(),
  uniqueTagsUsed: z.number()
}));
export
/* istanbul ignore next */
var PipelineMetricsCollector = /*#__PURE__*/function () {
  function
  /* istanbul ignore next */
  PipelineMetricsCollector() {
    /* istanbul ignore next */
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_12810rv1bg().b[0][0]++, {});
    /* istanbul ignore next */
    _classCallCheck(this, PipelineMetricsCollector);
    _defineProperty(this, "currentExecution", (cov_12810rv1bg().s[3]++, new Map()));
    /* istanbul ignore next */
    _defineProperty(this, "healthCache", (cov_12810rv1bg().s[4]++, new Map()));
    /* istanbul ignore next */
    _defineProperty(this, "metricsBuffer", (cov_12810rv1bg().s[5]++, []));
    /* istanbul ignore next */
    cov_12810rv1bg().f[0]++;
    cov_12810rv1bg().s[6]++;
    this.config =
    /* istanbul ignore next */
    _objectSpread({
      enabled: true,
      retentionPeriod: 30 * 24 * 60 * 60 * 1000,
      // 30 days
      aggregationInterval: 60 * 1000,
      // 1 minute
      enableRealTimeAlerts: true
    }, config);
    /* istanbul ignore next */
    cov_12810rv1bg().s[7]++;
    if (this.config.enabled) {
      /* istanbul ignore next */
      cov_12810rv1bg().b[1][0]++;
      cov_12810rv1bg().s[8]++;
      this.startMetricsCollection();
    } else
    /* istanbul ignore next */
    {
      cov_12810rv1bg().b[1][1]++;
    }
  }

  /**
   * Track pipeline execution start
   */
  return _createClass(PipelineMetricsCollector, [{
    key: "startExecution",
    value: (function () {
      var _startExecution = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee(stage, metadata)
      /* istanbul ignore next */
      {
        var executionId, execution;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              cov_12810rv1bg().f[1]++;
              executionId = (cov_12810rv1bg().s[9]++, "exec_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)));
              execution = (cov_12810rv1bg().s[10]++, {
                id:
                /* istanbul ignore next */
                "metrics_".concat(executionId),
                executionId: executionId,
                startTime: new Date(),
                status: "running",
                stage: stage,
                itemsProcessed: 0,
                itemsSuccessful: 0,
                itemsFailed: 0,
                humanReviewRequired: 0,
                metadata: metadata
              });
              cov_12810rv1bg().s[11]++;
              this.currentExecution.set(executionId, execution);

              // Log execution start
              cov_12810rv1bg().s[12]++;
              console.log(
              /* istanbul ignore next */
              "\uD83D\uDCCA Pipeline execution started: ".concat(executionId, " (").concat(stage, ")"));
              cov_12810rv1bg().s[13]++;
              return _context.a(2, executionId);
          }
        }, _callee, this);
      }));
      function startExecution(_x, _x2) {
        return _startExecution.apply(this, arguments);
      }
      return startExecution;
    }()
    /**
     * Update execution progress
     */
    )
  }, {
    key: "updateExecution",
    value: function updateExecution(executionId, updates) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[2]++;
      var execution =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[14]++, this.currentExecution.get(executionId));
      /* istanbul ignore next */
      cov_12810rv1bg().s[15]++;
      if (!execution) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[2][0]++;
        cov_12810rv1bg().s[16]++;
        console.warn(
        /* istanbul ignore next */
        "Execution ".concat(executionId, " not found for update"));
        /* istanbul ignore next */
        cov_12810rv1bg().s[17]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[2][1]++;
      }

      // Update execution metrics
      cov_12810rv1bg().s[18]++;
      Object.assign(execution, updates);

      // Calculate duration if not provided
      /* istanbul ignore next */
      cov_12810rv1bg().s[19]++;
      if (
      /* istanbul ignore next */
      (cov_12810rv1bg().b[4][0]++, !execution.duration) &&
      /* istanbul ignore next */
      (cov_12810rv1bg().b[4][1]++, execution.startTime)) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[3][0]++;
        cov_12810rv1bg().s[20]++;
        execution.duration = Date.now() - execution.startTime.getTime();
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[3][1]++;
      }
      cov_12810rv1bg().s[21]++;
      this.currentExecution.set(executionId, execution);
    }

    /**
     * Complete pipeline execution
     */
  }, {
    key: "completeExecution",
    value: (function () {
      var _completeExecution = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee2(executionId, status, error)
      /* istanbul ignore next */
      {
        var execution, memoryUsage;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              cov_12810rv1bg().f[3]++;
              execution = (cov_12810rv1bg().s[22]++, this.currentExecution.get(executionId));
              cov_12810rv1bg().s[23]++;
              if (execution) {
                _context2.n = 1;
                break;
              }
              cov_12810rv1bg().b[5][0]++;
              cov_12810rv1bg().s[24]++;
              console.warn(
              /* istanbul ignore next */
              "Execution ".concat(executionId, " not found for completion"));
              cov_12810rv1bg().s[25]++;
              return _context2.a(2);
            case 1:
              cov_12810rv1bg().b[5][1]++;
            case 2:
              cov_12810rv1bg().s[26]++;
              // Finalize execution metrics
              execution.endTime = new Date();
              cov_12810rv1bg().s[27]++;
              execution.duration = execution.endTime.getTime() - execution.startTime.getTime();
              cov_12810rv1bg().s[28]++;
              execution.status = status;
              cov_12810rv1bg().s[29]++;
              if (error) {
                /* istanbul ignore next */
                cov_12810rv1bg().b[6][0]++;
                cov_12810rv1bg().s[30]++;
                execution.errorType = error.type;
                /* istanbul ignore next */
                cov_12810rv1bg().s[31]++;
                execution.errorMessage = error.message;
                /* istanbul ignore next */
                cov_12810rv1bg().s[32]++;
                execution.stackTrace = error.stack;
              } else
              /* istanbul ignore next */
              {
                cov_12810rv1bg().b[6][1]++;
              }

              // Calculate resource usage if available
              cov_12810rv1bg().s[33]++;
              if (process.memoryUsage) {
                /* istanbul ignore next */
                cov_12810rv1bg().b[7][0]++;
                memoryUsage = (cov_12810rv1bg().s[34]++, process.memoryUsage());
                /* istanbul ignore next */
                cov_12810rv1bg().s[35]++;
                execution.memoryUsed = memoryUsage.heapUsed;
              } else
              /* istanbul ignore next */
              {
                cov_12810rv1bg().b[7][1]++;
              }

              // Store in database for historical tracking
              cov_12810rv1bg().s[36]++;
              _context2.n = 3;
              return this.persistExecution(execution);
            case 3:
              cov_12810rv1bg().s[37]++;
              // Remove from current executions
              this.currentExecution[
              /* istanbul ignore next */
              "delete"](executionId);

              // Check for alerts
              cov_12810rv1bg().s[38]++;
              if (!this.config.enableRealTimeAlerts) {
                _context2.n = 5;
                break;
              }
              cov_12810rv1bg().b[8][0]++;
              cov_12810rv1bg().s[39]++;
              _context2.n = 4;
              return this.checkAlerts(execution);
            case 4:
              _context2.n = 6;
              break;
            case 5:
              cov_12810rv1bg().b[8][1]++;
            case 6:
              cov_12810rv1bg().s[40]++;
              console.log(
              /* istanbul ignore next */
              "\uD83D\uDCCA Pipeline execution completed: ".concat(executionId, " (").concat(status, ") - ").concat(execution.duration, "ms"));
            case 7:
              return _context2.a(2);
          }
        }, _callee2, this);
      }));
      function completeExecution(_x3, _x4, _x5) {
        return _completeExecution.apply(this, arguments);
      }
      return completeExecution;
    }()
    /**
     * Perform health check on a service
     */
    )
  }, {
    key: "checkServiceHealth",
    value: (function () {
      var _checkServiceHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee3(service)
      /* istanbul ignore next */
      {
        var startTime, status, details, error, result, _t, _t2, _t3, _t4;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              cov_12810rv1bg().f[4]++;
              startTime = (cov_12810rv1bg().s[41]++, Date.now());
              status = (cov_12810rv1bg().s[42]++, "healthy");
              details = (cov_12810rv1bg().s[43]++, {});
              cov_12810rv1bg().s[44]++;
              _context3.p = 1;
              cov_12810rv1bg().s[45]++;
              _t = service;
              _context3.n = _t === "database" ? 2 : _t === "ai" ? 5 : _t === "twitter" ? 7 : _t === "websocket" ? 10 : _t === "cache" ? 12 : 14;
              break;
            case 2:
              cov_12810rv1bg().b[9][0]++;
              cov_12810rv1bg().s[46]++;
              _context3.n = 3;
              return this.checkDatabaseHealth();
            case 3:
              cov_12810rv1bg().s[47]++;
              _context3.n = 4;
              return this.getDatabaseConnections();
            case 4:
              _t2 = _context3.v;
              details = {
                connectionCount: _t2
              };
              cov_12810rv1bg().s[48]++;
              return _context3.a(3, 14);
            case 5:
              cov_12810rv1bg().b[9][1]++;
              cov_12810rv1bg().s[49]++;
              _context3.n = 6;
              return this.checkAIHealth();
            case 6:
              cov_12810rv1bg().s[50]++;
              details = {
                modelVersion: CONFIG.ai.openai.model
              };
              cov_12810rv1bg().s[51]++;
              return _context3.a(3, 14);
            case 7:
              cov_12810rv1bg().b[9][2]++;
              cov_12810rv1bg().s[52]++;
              _context3.n = 8;
              return this.checkTwitterHealth();
            case 8:
              cov_12810rv1bg().s[53]++;
              _context3.n = 9;
              return this.getTwitterRateLimit();
            case 9:
              _t3 = _context3.v;
              details = {
                rateLimitRemaining: _t3
              };
              cov_12810rv1bg().s[54]++;
              return _context3.a(3, 14);
            case 10:
              cov_12810rv1bg().b[9][3]++;
              cov_12810rv1bg().s[55]++;
              _context3.n = 11;
              return this.checkWebSocketHealth();
            case 11:
              details = _context3.v;
              cov_12810rv1bg().s[56]++;
              return _context3.a(3, 14);
            case 12:
              cov_12810rv1bg().b[9][4]++;
              cov_12810rv1bg().s[57]++;
              _context3.n = 13;
              return this.checkCacheHealth();
            case 13:
              details = _context3.v;
              cov_12810rv1bg().s[58]++;
              return _context3.a(3, 14);
            case 14:
              _context3.n = 16;
              break;
            case 15:
              _context3.p = 15;
              _t4 = _context3.v;
              cov_12810rv1bg().s[59]++;
              status = "unhealthy";
              cov_12810rv1bg().s[60]++;
              error =
              /* istanbul ignore next */
              _t4 instanceof Error ?
              /* istanbul ignore next */
              (cov_12810rv1bg().b[10][0]++,
              /* istanbul ignore next */
              _t4.message) :
              /* istanbul ignore next */
              (cov_12810rv1bg().b[10][1]++, "Unknown error");
            case 16:
              result = (cov_12810rv1bg().s[61]++, {
                service: service,
                status: status,
                responseTime: Date.now() - startTime,
                timestamp: new Date(),
                details: details,
                error: error
              }); // Cache result for dashboard
              cov_12810rv1bg().s[62]++;
              this.healthCache.set(service, result);
              cov_12810rv1bg().s[63]++;
              return _context3.a(2, result);
          }
        }, _callee3, this, [[1, 15]]);
      }));
      function checkServiceHealth(_x6) {
        return _checkServiceHealth.apply(this, arguments);
      }
      return checkServiceHealth;
    }()
    /**
     * Get current pipeline metrics
     */
    )
  }, {
    key: "getCurrentMetrics",
    value: (function () {
      var _getCurrentMetrics = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee4()
      /* istanbul ignore next */
      {
        var _this$healthCache$get, _this$healthCache$get2, _this$healthCache$get3;
        var now, recentExecutions, metrics, _t5, _t6, _t7, _t8, _t9, _t0, _t1, _t10, _t11, _t12, _t13, _t14, _t15, _t16, _t17, _t18, _t19, _t20, _t21;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              cov_12810rv1bg().f[5]++;
              now = (cov_12810rv1bg().s[64]++, new Date()); // Calculate metrics from recent executions
              cov_12810rv1bg().s[65]++;
              _context4.n = 1;
              return this.getRecentExecutions(60 * 60 * 1000);
            case 1:
              recentExecutions = _context4.v;
              cov_12810rv1bg().s[66]++;
              _t5 = now;
              _t6 = this.calculateAverageProcessingTime(recentExecutions);
              _t7 = this.calculateSuccessRate(recentExecutions);
              _t8 = this.calculateErrorRate(recentExecutions);
              _t9 = this.calculateThroughput(recentExecutions);
              _t0 = this.calculateAverageQualityScore(recentExecutions);
              _t1 = this.calculateQualityPassRate(recentExecutions);
              _t10 = this.calculateHumanReviewRate(recentExecutions);
              _t11 = this.getCurrentMemoryUsage();
              _t12 = this.getCurrentCPUUsage();
              _context4.n = 2;
              return this.getCacheHitRate();
            case 2:
              _t13 = _context4.v;
              _t14 =
              /* istanbul ignore next */
              (cov_12810rv1bg().b[11][0]++, (_this$healthCache$get = this.healthCache.get("database")) === null || _this$healthCache$get === void 0 ? void 0 :
              /* istanbul ignore next */
              _this$healthCache$get.responseTime) ||
              /* istanbul ignore next */
              (cov_12810rv1bg().b[11][1]++, 0);
              _t15 =
              /* istanbul ignore next */
              (cov_12810rv1bg().b[12][0]++, (_this$healthCache$get2 = this.healthCache.get("ai")) === null || _this$healthCache$get2 === void 0 ? void 0 :
              /* istanbul ignore next */
              _this$healthCache$get2.responseTime) ||
              /* istanbul ignore next */
              (cov_12810rv1bg().b[12][1]++, 0);
              _t16 =
              /* istanbul ignore next */
              (cov_12810rv1bg().b[13][0]++, (_this$healthCache$get3 = this.healthCache.get("twitter")) === null || _this$healthCache$get3 === void 0 ? void 0 :
              /* istanbul ignore next */
              _this$healthCache$get3.responseTime) ||
              /* istanbul ignore next */
              (cov_12810rv1bg().b[13][1]++, 0);
              _context4.n = 3;
              return this.getWebSocketConnections();
            case 3:
              _t17 = _context4.v;
              _context4.n = 4;
              return this.getFeedUpdateLatency();
            case 4:
              _t18 = _context4.v;
              _context4.n = 5;
              return this.getTotalFeedItems();
            case 5:
              _t19 = _context4.v;
              _context4.n = 6;
              return this.getPartnerContentRatio();
            case 6:
              _t20 = _context4.v;
              _context4.n = 7;
              return this.getUniqueTagsUsed();
            case 7:
              _t21 = _context4.v;
              metrics = {
                timestamp: _t5,
                averageProcessingTime: _t6,
                successRate: _t7,
                errorRate: _t8,
                throughput: _t9,
                averageQualityScore: _t0,
                qualityPassRate: _t1,
                humanReviewRate: _t10,
                memoryUsage: _t11,
                cpuUsage: _t12,
                cacheHitRate: _t13,
                databaseResponseTime: _t14,
                aiServiceResponseTime: _t15,
                twitterApiResponseTime: _t16,
                websocketConnections: _t17,
                feedUpdateLatency: _t18,
                totalFeedItems: _t19,
                partnerContentRatio: _t20,
                uniqueTagsUsed: _t21
              };
              cov_12810rv1bg().s[67]++;
              // Add to buffer for aggregation
              this.metricsBuffer.push(metrics);
              cov_12810rv1bg().s[68]++;
              return _context4.a(2, metrics);
          }
        }, _callee4, this);
      }));
      function getCurrentMetrics() {
        return _getCurrentMetrics.apply(this, arguments);
      }
      return getCurrentMetrics;
    }()
    /**
     * Get dashboard data
     */
    )
  }, {
    key: "getDashboardData",
    value: (function () {
      var _getDashboardData = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee5()
      /* istanbul ignore next */
      {
        var _ref, _ref2, currentMetrics, healthChecks, activeExecutions, recentAlerts, historicalTrends;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              cov_12810rv1bg().f[6]++;
              cov_12810rv1bg().s[69]++;
              _context5.n = 1;
              return Promise.all([this.getCurrentMetrics(), this.performAllHealthChecks()]);
            case 1:
              _ref = _context5.v;
              _ref2 = _slicedToArray(_ref, 2);
              currentMetrics = _ref2[0];
              healthChecks = _ref2[1];
              activeExecutions = (cov_12810rv1bg().s[70]++, Array.from(this.currentExecution.values()));
              cov_12810rv1bg().s[71]++;
              _context5.n = 2;
              return this.getRecentAlerts();
            case 2:
              recentAlerts = _context5.v;
              cov_12810rv1bg().s[72]++;
              _context5.n = 3;
              return this.getHistoricalTrends();
            case 3:
              historicalTrends = _context5.v;
              cov_12810rv1bg().s[73]++;
              return _context5.a(2, {
                currentMetrics: currentMetrics,
                healthChecks: healthChecks,
                activeExecutions: activeExecutions,
                recentAlerts: recentAlerts,
                historicalTrends: historicalTrends
              });
          }
        }, _callee5, this);
      }));
      function getDashboardData() {
        return _getDashboardData.apply(this, arguments);
      }
      return getDashboardData;
    }()
    /**
     * Start automatic metrics collection
     */
    )
  }, {
    key: "startMetricsCollection",
    value: function startMetricsCollection() {
      /* istanbul ignore next */
      var _this = this;
      cov_12810rv1bg().f[7]++;
      cov_12810rv1bg().s[74]++;
      // Collect metrics every minute
      setInterval(
      /* istanbul ignore next */
      /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee6()
      /* istanbul ignore next */
      {
        var _t22;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              cov_12810rv1bg().f[8]++;
              cov_12810rv1bg().s[75]++;
              _context6.p = 1;
              cov_12810rv1bg().s[76]++;
              _context6.n = 2;
              return _this.getCurrentMetrics();
            case 2:
              cov_12810rv1bg().s[77]++;
              _context6.n = 3;
              return _this.performAllHealthChecks();
            case 3:
              cov_12810rv1bg().s[78]++;
              _context6.n = 4;
              return _this.cleanupOldMetrics();
            case 4:
              _context6.n = 6;
              break;
            case 5:
              _context6.p = 5;
              _t22 = _context6.v;
              cov_12810rv1bg().s[79]++;
              console.error("Error collecting metrics:",
              /* istanbul ignore next */
              _t22);
            case 6:
              return _context6.a(2);
          }
        }, _callee6, null, [[1, 5]]);
      })), this.config.aggregationInterval);
      /* istanbul ignore next */
      cov_12810rv1bg().s[80]++;
      console.log("📊 Pipeline metrics collection started");
    }

    /**
     * Perform all health checks
     */
  }, {
    key: "performAllHealthChecks",
    value: (function () {
      var _performAllHealthChecks = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee7()
      /* istanbul ignore next */
      {
        var _this2 = this;
        var services, results;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.n) {
            case 0:
              cov_12810rv1bg().f[9]++;
              services = (cov_12810rv1bg().s[81]++, ["database", "ai", "twitter", "websocket", "cache"]);
              cov_12810rv1bg().s[82]++;
              _context7.n = 1;
              return Promise.allSettled(services.map(function (service) {
                /* istanbul ignore next */
                cov_12810rv1bg().f[10]++;
                cov_12810rv1bg().s[83]++;
                return _this2.checkServiceHealth(service);
              }));
            case 1:
              results = _context7.v;
              cov_12810rv1bg().s[84]++;
              return _context7.a(2, results.filter(function (result) {
                /* istanbul ignore next */
                cov_12810rv1bg().f[11]++;
                cov_12810rv1bg().s[85]++;
                return result.status === "fulfilled";
              }).map(function (result) {
                /* istanbul ignore next */
                cov_12810rv1bg().f[12]++;
                cov_12810rv1bg().s[86]++;
                return result.value;
              }));
          }
        }, _callee7);
      }));
      function performAllHealthChecks() {
        return _performAllHealthChecks.apply(this, arguments);
      }
      return performAllHealthChecks;
    }()
    /**
     * Check for alert conditions
     */
    )
  }, {
    key: "checkAlerts",
    value: (function () {
      var _checkAlerts = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee8(execution)
      /* istanbul ignore next */
      {
        var alerts, errorRate, _i, _alerts, alert;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.n) {
            case 0:
              cov_12810rv1bg().f[13]++;
              alerts = (cov_12810rv1bg().s[87]++, []); // Check processing time
              cov_12810rv1bg().s[88]++;
              if (
              /* istanbul ignore next */
              (cov_12810rv1bg().b[15][0]++, execution.duration) &&
              /* istanbul ignore next */
              (cov_12810rv1bg().b[15][1]++, execution.duration > CONFIG.monitoring.alerts.performanceThreshold)) {
                /* istanbul ignore next */
                cov_12810rv1bg().b[14][0]++;
                cov_12810rv1bg().s[89]++;
                alerts.push(
                /* istanbul ignore next */
                "Pipeline execution exceeded performance threshold: ".concat(execution.duration, "ms"));
              } else
              /* istanbul ignore next */
              {
                cov_12810rv1bg().b[14][1]++;
              }

              // Check error rate
              errorRate = (cov_12810rv1bg().s[90]++, execution.itemsFailed / (
              /* istanbul ignore next */
              (cov_12810rv1bg().b[16][0]++, execution.itemsProcessed) ||
              /* istanbul ignore next */
              (cov_12810rv1bg().b[16][1]++, 1)));
              cov_12810rv1bg().s[91]++;
              if (errorRate > CONFIG.monitoring.alerts.pipelineFailureThreshold) {
                /* istanbul ignore next */
                cov_12810rv1bg().b[17][0]++;
                cov_12810rv1bg().s[92]++;
                alerts.push(
                /* istanbul ignore next */
                "High error rate detected: ".concat((errorRate * 100).toFixed(2), "%"));
              } else
              /* istanbul ignore next */
              {
                cov_12810rv1bg().b[17][1]++;
              }

              // Check quality score
              cov_12810rv1bg().s[93]++;
              if (
              /* istanbul ignore next */
              (cov_12810rv1bg().b[19][0]++, execution.averageQualityScore) &&
              /* istanbul ignore next */
              (cov_12810rv1bg().b[19][1]++, execution.averageQualityScore < CONFIG.monitoring.alerts.qualityDegradationThreshold * 100)) {
                /* istanbul ignore next */
                cov_12810rv1bg().b[18][0]++;
                cov_12810rv1bg().s[94]++;
                alerts.push(
                /* istanbul ignore next */
                "Quality score below threshold: ".concat(execution.averageQualityScore));
              } else
              /* istanbul ignore next */
              {
                cov_12810rv1bg().b[18][1]++;
              }

              // Send alerts if any
              cov_12810rv1bg().s[95]++;
              _i = 0, _alerts = alerts;
            case 1:
              if (!(_i < _alerts.length)) {
                _context8.n = 3;
                break;
              }
              alert = _alerts[_i];
              cov_12810rv1bg().s[96]++;
              _context8.n = 2;
              return this.sendAlert(alert, execution);
            case 2:
              _i++;
              _context8.n = 1;
              break;
            case 3:
              return _context8.a(2);
          }
        }, _callee8, this);
      }));
      function checkAlerts(_x7) {
        return _checkAlerts.apply(this, arguments);
      }
      return checkAlerts;
    }()
    /**
     * Send alert notification
     */
    )
  }, {
    key: "sendAlert",
    value: (function () {
      var _sendAlert = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee9(message, execution)
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context9) {
          while (1) switch (_context9.n) {
            case 0:
              cov_12810rv1bg().f[14]++;
              cov_12810rv1bg().s[97]++;
              console.warn(
              /* istanbul ignore next */
              "\uD83D\uDEA8 ALERT: ".concat(message));

              // Here you would integrate with your alerting system (Slack, email, etc.)
              // For now, we'll just log and store in database
              cov_12810rv1bg().s[98]++;
              try {
                /* istanbul ignore next */
                cov_12810rv1bg().s[99]++;
                // Store alert in database for tracking
                // This would be implemented based on your alerting schema
                console.log(
                /* istanbul ignore next */
                "Alert stored for execution ".concat(execution.executionId, ": ").concat(message));
              } catch (error) {
                /* istanbul ignore next */
                cov_12810rv1bg().s[100]++;
                console.error("Failed to store alert:", error);
              }
            case 1:
              return _context9.a(2);
          }
        }, _callee9);
      }));
      function sendAlert(_x8, _x9) {
        return _sendAlert.apply(this, arguments);
      }
      return sendAlert;
    }()
    /**
     * Database-specific health checks
     */
    )
  }, {
    key: "checkDatabaseHealth",
    value: (function () {
      var _checkDatabaseHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee0()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context0) {
          while (1) switch (_context0.n) {
            case 0:
              cov_12810rv1bg().f[15]++;
              cov_12810rv1bg().s[101]++;
              _context0.n = 1;
              return prisma.$queryRaw(_templateObject || (_templateObject = _taggedTemplateLiteral(["SELECT 1"])));
            case 1:
              return _context0.a(2);
          }
        }, _callee0);
      }));
      function checkDatabaseHealth() {
        return _checkDatabaseHealth.apply(this, arguments);
      }
      return checkDatabaseHealth;
    }())
  }, {
    key: "getDatabaseConnections",
    value: function () {
      var _getDatabaseConnections = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee1()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context1) {
          while (1) switch (_context1.n) {
            case 0:
              cov_12810rv1bg().f[16]++;
              cov_12810rv1bg().s[102]++;
              return _context1.a(2, 5);
          }
        }, _callee1);
      }));
      function getDatabaseConnections() {
        return _getDatabaseConnections.apply(this, arguments);
      }
      return getDatabaseConnections;
    }()
    /**
     * AI service health checks
     */
  }, {
    key: "checkAIHealth",
    value: (function () {
      var _checkAIHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee10()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context10) {
          while (1) switch (_context10.n) {
            case 0:
              cov_12810rv1bg().f[17]++;
            case 1:
              return _context10.a(2);
          }
        }, _callee10);
      }));
      function checkAIHealth() {
        return _checkAIHealth.apply(this, arguments);
      }
      return checkAIHealth;
    }()
    /**
     * Twitter API health checks
     */
    )
  }, {
    key: "checkTwitterHealth",
    value: (function () {
      var _checkTwitterHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee11()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context11) {
          while (1) switch (_context11.n) {
            case 0:
              cov_12810rv1bg().f[18]++;
            case 1:
              return _context11.a(2);
          }
        }, _callee11);
      }));
      function checkTwitterHealth() {
        return _checkTwitterHealth.apply(this, arguments);
      }
      return checkTwitterHealth;
    }())
  }, {
    key: "getTwitterRateLimit",
    value: function () {
      var _getTwitterRateLimit = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee12()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context12) {
          while (1) switch (_context12.n) {
            case 0:
              cov_12810rv1bg().f[19]++;
              cov_12810rv1bg().s[103]++;
              return _context12.a(2, 100);
          }
        }, _callee12);
      }));
      function getTwitterRateLimit() {
        return _getTwitterRateLimit.apply(this, arguments);
      }
      return getTwitterRateLimit;
    }()
    /**
     * WebSocket health checks
     */
  }, {
    key: "checkWebSocketHealth",
    value: (function () {
      var _checkWebSocketHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee13()
      /* istanbul ignore next */
      {
        var _t23;
        return _regenerator().w(function (_context13) {
          while (1) switch (_context13.n) {
            case 0:
              cov_12810rv1bg().f[20]++;
              cov_12810rv1bg().s[104]++;
              _context13.n = 1;
              return this.getWebSocketConnections();
            case 1:
              _t23 = _context13.v;
              return _context13.a(2, {
                activeConnections: _t23,
                messageQueue: 0
              });
          }
        }, _callee13, this);
      }));
      function checkWebSocketHealth() {
        return _checkWebSocketHealth.apply(this, arguments);
      }
      return checkWebSocketHealth;
    }()
    /**
     * Cache health checks
     */
    )
  }, {
    key: "checkCacheHealth",
    value: (function () {
      var _checkCacheHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee14()
      /* istanbul ignore next */
      {
        var _t24;
        return _regenerator().w(function (_context14) {
          while (1) switch (_context14.n) {
            case 0:
              cov_12810rv1bg().f[21]++;
              cov_12810rv1bg().s[105]++;
              _context14.n = 1;
              return this.getCacheHitRate();
            case 1:
              _t24 = _context14.v;
              return _context14.a(2, {
                hitRate: _t24,
                memoryUsage: 50
              });
          }
        }, _callee14, this);
      }));
      function checkCacheHealth() {
        return _checkCacheHealth.apply(this, arguments);
      }
      return checkCacheHealth;
    }()
    /**
     * Utility methods for metric calculations
     */
    )
  }, {
    key: "calculateAverageProcessingTime",
    value: function calculateAverageProcessingTime(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[22]++;
      cov_12810rv1bg().s[106]++;
      if (executions.length === 0) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[20][0]++;
        cov_12810rv1bg().s[107]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[20][1]++;
      }
      var totalTime =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[108]++, executions.reduce(function (sum, exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[23]++;
        cov_12810rv1bg().s[109]++;
        return sum + (
        /* istanbul ignore next */
        (cov_12810rv1bg().b[21][0]++, exec.duration) ||
        /* istanbul ignore next */
        (cov_12810rv1bg().b[21][1]++, 0));
      }, 0));
      /* istanbul ignore next */
      cov_12810rv1bg().s[110]++;
      return totalTime / executions.length;
    }
  }, {
    key: "calculateSuccessRate",
    value: function calculateSuccessRate(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[24]++;
      cov_12810rv1bg().s[111]++;
      if (executions.length === 0) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[22][0]++;
        cov_12810rv1bg().s[112]++;
        return 1;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[22][1]++;
      }
      var successful =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[113]++, executions.filter(function (exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[25]++;
        cov_12810rv1bg().s[114]++;
        return exec.status === "completed";
      }).length);
      /* istanbul ignore next */
      cov_12810rv1bg().s[115]++;
      return successful / executions.length;
    }
  }, {
    key: "calculateErrorRate",
    value: function calculateErrorRate(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[26]++;
      cov_12810rv1bg().s[116]++;
      return 1 - this.calculateSuccessRate(executions);
    }
  }, {
    key: "calculateThroughput",
    value: function calculateThroughput(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[27]++;
      var totalItems =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[117]++, executions.reduce(function (sum, exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[28]++;
        cov_12810rv1bg().s[118]++;
        return sum + exec.itemsProcessed;
      }, 0));
      /* istanbul ignore next */
      cov_12810rv1bg().s[119]++;
      return totalItems; // Items processed in the time period
    }
  }, {
    key: "calculateAverageQualityScore",
    value: function calculateAverageQualityScore(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[29]++;
      var withQuality =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[120]++, executions.filter(function (exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[30]++;
        cov_12810rv1bg().s[121]++;
        return exec.averageQualityScore;
      }));
      /* istanbul ignore next */
      cov_12810rv1bg().s[122]++;
      if (withQuality.length === 0) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[23][0]++;
        cov_12810rv1bg().s[123]++;
        return 0;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[23][1]++;
      }
      var totalQuality =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[124]++, withQuality.reduce(function (sum, exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[31]++;
        cov_12810rv1bg().s[125]++;
        return sum + (
        /* istanbul ignore next */
        (cov_12810rv1bg().b[24][0]++, exec.averageQualityScore) ||
        /* istanbul ignore next */
        (cov_12810rv1bg().b[24][1]++, 0));
      }, 0));
      /* istanbul ignore next */
      cov_12810rv1bg().s[126]++;
      return totalQuality / withQuality.length;
    }
  }, {
    key: "calculateQualityPassRate",
    value: function calculateQualityPassRate(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[32]++;
      var withQuality =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[127]++, executions.filter(function (exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[33]++;
        cov_12810rv1bg().s[128]++;
        return exec.averageQualityScore;
      }));
      /* istanbul ignore next */
      cov_12810rv1bg().s[129]++;
      if (withQuality.length === 0) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[25][0]++;
        cov_12810rv1bg().s[130]++;
        return 1;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[25][1]++;
      }
      var passing =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[131]++, withQuality.filter(function (exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[34]++;
        cov_12810rv1bg().s[132]++;
        return (
        /* istanbul ignore next */
        (cov_12810rv1bg().b[26][0]++, exec.averageQualityScore) ||
        /* istanbul ignore next */
        (cov_12810rv1bg().b[26][1]++, 0)) >= CONFIG.quality.autoPublishThreshold * 100;
      }));
      /* istanbul ignore next */
      cov_12810rv1bg().s[133]++;
      return passing.length / withQuality.length;
    }
  }, {
    key: "calculateHumanReviewRate",
    value: function calculateHumanReviewRate(executions) {
      /* istanbul ignore next */
      cov_12810rv1bg().f[35]++;
      var totalItems =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[134]++, executions.reduce(function (sum, exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[36]++;
        cov_12810rv1bg().s[135]++;
        return sum + exec.itemsProcessed;
      }, 0));
      var reviewItems =
      /* istanbul ignore next */
      (cov_12810rv1bg().s[136]++, executions.reduce(function (sum, exec) {
        /* istanbul ignore next */
        cov_12810rv1bg().f[37]++;
        cov_12810rv1bg().s[137]++;
        return sum + exec.humanReviewRequired;
      }, 0));
      /* istanbul ignore next */
      cov_12810rv1bg().s[138]++;
      return totalItems > 0 ?
      /* istanbul ignore next */
      (cov_12810rv1bg().b[27][0]++, reviewItems / totalItems) :
      /* istanbul ignore next */
      (cov_12810rv1bg().b[27][1]++, 0);
    }
  }, {
    key: "getCurrentMemoryUsage",
    value: function getCurrentMemoryUsage() {
      /* istanbul ignore next */
      cov_12810rv1bg().f[38]++;
      cov_12810rv1bg().s[139]++;
      if (process.memoryUsage) {
        /* istanbul ignore next */
        cov_12810rv1bg().b[28][0]++;
        var memory =
        /* istanbul ignore next */
        (cov_12810rv1bg().s[140]++, process.memoryUsage());
        /* istanbul ignore next */
        cov_12810rv1bg().s[141]++;
        return memory.heapUsed / memory.heapTotal * 100;
      } else
      /* istanbul ignore next */
      {
        cov_12810rv1bg().b[28][1]++;
      }
      cov_12810rv1bg().s[142]++;
      return 0;
    }
  }, {
    key: "getCurrentCPUUsage",
    value: function getCurrentCPUUsage() {
      /* istanbul ignore next */
      cov_12810rv1bg().f[39]++;
      cov_12810rv1bg().s[143]++;
      // This would require a CPU monitoring library
      return 0; // Placeholder
    }
  }, {
    key: "getCacheHitRate",
    value: function () {
      var _getCacheHitRate = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee15()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context15) {
          while (1) switch (_context15.n) {
            case 0:
              cov_12810rv1bg().f[40]++;
              cov_12810rv1bg().s[144]++;
              return _context15.a(2, 0.85);
          }
        }, _callee15);
      }));
      function getCacheHitRate() {
        return _getCacheHitRate.apply(this, arguments);
      }
      return getCacheHitRate;
    }()
  }, {
    key: "getWebSocketConnections",
    value: function () {
      var _getWebSocketConnections = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee16()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context16) {
          while (1) switch (_context16.n) {
            case 0:
              cov_12810rv1bg().f[41]++;
              cov_12810rv1bg().s[145]++;
              return _context16.a(2, 150);
          }
        }, _callee16);
      }));
      function getWebSocketConnections() {
        return _getWebSocketConnections.apply(this, arguments);
      }
      return getWebSocketConnections;
    }()
  }, {
    key: "getFeedUpdateLatency",
    value: function () {
      var _getFeedUpdateLatency = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee17()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context17) {
          while (1) switch (_context17.n) {
            case 0:
              cov_12810rv1bg().f[42]++;
              cov_12810rv1bg().s[146]++;
              return _context17.a(2, 2.5);
          }
        }, _callee17);
      }));
      function getFeedUpdateLatency() {
        return _getFeedUpdateLatency.apply(this, arguments);
      }
      return getFeedUpdateLatency;
    }()
  }, {
    key: "getTotalFeedItems",
    value: function () {
      var _getTotalFeedItems = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee18()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context18) {
          while (1) switch (_context18.n) {
            case 0:
              cov_12810rv1bg().f[43]++;
              cov_12810rv1bg().s[147]++;
              return _context18.a(2, prisma.feedItem.count());
          }
        }, _callee18);
      }));
      function getTotalFeedItems() {
        return _getTotalFeedItems.apply(this, arguments);
      }
      return getTotalFeedItems;
    }()
  }, {
    key: "getPartnerContentRatio",
    value: function () {
      var _getPartnerContentRatio = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee19()
      /* istanbul ignore next */
      {
        var total, partner;
        return _regenerator().w(function (_context19) {
          while (1) switch (_context19.n) {
            case 0:
              cov_12810rv1bg().f[44]++;
              cov_12810rv1bg().s[148]++;
              _context19.n = 1;
              return prisma.feedItem.count();
            case 1:
              total = _context19.v;
              cov_12810rv1bg().s[149]++;
              _context19.n = 2;
              return prisma.feedItem.count({
                where: {
                  type: "PARTNER"
                }
              });
            case 2:
              partner = _context19.v;
              cov_12810rv1bg().s[150]++;
              return _context19.a(2, total > 0 ?
              /* istanbul ignore next */
              (cov_12810rv1bg().b[29][0]++, partner / total) :
              /* istanbul ignore next */
              (cov_12810rv1bg().b[29][1]++, 0));
          }
        }, _callee19);
      }));
      function getPartnerContentRatio() {
        return _getPartnerContentRatio.apply(this, arguments);
      }
      return getPartnerContentRatio;
    }()
  }, {
    key: "getUniqueTagsUsed",
    value: function () {
      var _getUniqueTagsUsed = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee20()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context20) {
          while (1) switch (_context20.n) {
            case 0:
              cov_12810rv1bg().f[45]++;
              cov_12810rv1bg().s[151]++;
              return _context20.a(2, 250);
          }
        }, _callee20);
      }));
      function getUniqueTagsUsed() {
        return _getUniqueTagsUsed.apply(this, arguments);
      }
      return getUniqueTagsUsed;
    }()
    /**
     * Database persistence methods
     */
  }, {
    key: "persistExecution",
    value: (function () {
      var _persistExecution = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee21(execution)
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context21) {
          while (1) switch (_context21.n) {
            case 0:
              cov_12810rv1bg().f[46]++;
              cov_12810rv1bg().s[152]++;
              try {
                /* istanbul ignore next */
                cov_12810rv1bg().s[153]++;
                // Store execution metrics in database
                // This would use your actual metrics table schema
                console.log(
                /* istanbul ignore next */
                "Persisting execution metrics for ".concat(execution.executionId));
              } catch (error) {
                /* istanbul ignore next */
                cov_12810rv1bg().s[154]++;
                console.error("Failed to persist execution metrics:", error);
              }
            case 1:
              return _context21.a(2);
          }
        }, _callee21);
      }));
      function persistExecution(_x0) {
        return _persistExecution.apply(this, arguments);
      }
      return persistExecution;
    }())
  }, {
    key: "getRecentExecutions",
    value: function () {
      var _getRecentExecutions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee22(timeWindow)
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context22) {
          while (1) switch (_context22.n) {
            case 0:
              cov_12810rv1bg().f[47]++;
              cov_12810rv1bg().s[155]++;
              return _context22.a(2, []);
          }
        }, _callee22);
      }));
      function getRecentExecutions(_x1) {
        return _getRecentExecutions.apply(this, arguments);
      }
      return getRecentExecutions;
    }()
  }, {
    key: "getRecentAlerts",
    value: function () {
      var _getRecentAlerts = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee23()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context23) {
          while (1) switch (_context23.n) {
            case 0:
              cov_12810rv1bg().f[48]++;
              cov_12810rv1bg().s[156]++;
              return _context23.a(2, []);
          }
        }, _callee23);
      }));
      function getRecentAlerts() {
        return _getRecentAlerts.apply(this, arguments);
      }
      return getRecentAlerts;
    }()
  }, {
    key: "getHistoricalTrends",
    value: function () {
      var _getHistoricalTrends = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee24()
      /* istanbul ignore next */
      {
        return _regenerator().w(function (_context24) {
          while (1) switch (_context24.n) {
            case 0:
              cov_12810rv1bg().f[49]++;
              cov_12810rv1bg().s[157]++;
              return _context24.a(2, []);
          }
        }, _callee24);
      }));
      function getHistoricalTrends() {
        return _getHistoricalTrends.apply(this, arguments);
      }
      return getHistoricalTrends;
    }()
  }, {
    key: "cleanupOldMetrics",
    value: function () {
      var _cleanupOldMetrics = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
      /* istanbul ignore next */
      _callee25()
      /* istanbul ignore next */
      {
        var cutoffDate;
        return _regenerator().w(function (_context25) {
          while (1) switch (_context25.n) {
            case 0:
              cov_12810rv1bg().f[50]++;
              cutoffDate = (cov_12810rv1bg().s[158]++, new Date(Date.now() - this.config.retentionPeriod)); // Delete old metrics based on retention policy
              cov_12810rv1bg().s[159]++;
              console.log(
              /* istanbul ignore next */
              "Cleaning up metrics older than ".concat(cutoffDate.toISOString()));
            case 1:
              return _context25.a(2);
          }
        }, _callee25, this);
      }));
      function cleanupOldMetrics() {
        return _cleanupOldMetrics.apply(this, arguments);
      }
      return cleanupOldMetrics;
    }()
  }]);
}();

// Export singleton instance
export var metricsCollector =
/* istanbul ignore next */
(cov_12810rv1bg().s[160]++, new PipelineMetricsCollector({
  enabled: CONFIG.monitoring.metrics.exportEnabled,
  retentionPeriod: CONFIG.monitoring.metrics.retentionPeriod
}));

// Export utility functions for manual metric collection
export
/* istanbul ignore next */
function trackPipelineExecution(_x10, _x11, _x12) {
  return _trackPipelineExecution.apply(this, arguments);
}
/* istanbul ignore next */
function _trackPipelineExecution() {
  _trackPipelineExecution = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee26(stage, operation, metadata)
  /* istanbul ignore next */
  {
    var executionId, result, _t25;
    return _regenerator().w(function (_context26) {
      while (1) switch (_context26.n) {
        case 0:
          cov_12810rv1bg().f[51]++;
          cov_12810rv1bg().s[161]++;
          _context26.n = 1;
          return metricsCollector.startExecution(stage, metadata);
        case 1:
          executionId = _context26.v;
          cov_12810rv1bg().s[162]++;
          _context26.p = 2;
          cov_12810rv1bg().s[163]++;
          _context26.n = 3;
          return operation();
        case 3:
          result = _context26.v;
          cov_12810rv1bg().s[164]++;
          _context26.n = 4;
          return metricsCollector.completeExecution(executionId, "completed");
        case 4:
          cov_12810rv1bg().s[165]++;
          return _context26.a(2, result);
        case 5:
          _context26.p = 5;
          _t25 = _context26.v;
          cov_12810rv1bg().s[166]++;
          _context26.n = 6;
          return metricsCollector.completeExecution(executionId, "failed", {
            type:
            /* istanbul ignore next */
            _t25 instanceof Error ?
            /* istanbul ignore next */
            (cov_12810rv1bg().b[30][0]++,
            /* istanbul ignore next */
            _t25.constructor.name) :
            /* istanbul ignore next */
            (cov_12810rv1bg().b[30][1]++, "UnknownError"),
            message:
            /* istanbul ignore next */
            _t25 instanceof Error ?
            /* istanbul ignore next */
            (cov_12810rv1bg().b[31][0]++,
            /* istanbul ignore next */
            _t25.message) :
            /* istanbul ignore next */
            (cov_12810rv1bg().b[31][1]++, "Unknown error occurred"),
            stack:
            /* istanbul ignore next */
            _t25 instanceof Error ?
            /* istanbul ignore next */
            (cov_12810rv1bg().b[32][0]++,
            /* istanbul ignore next */
            _t25.stack) :
            /* istanbul ignore next */
            (cov_12810rv1bg().b[32][1]++, undefined)
          });
        case 6:
          cov_12810rv1bg().s[167]++;
          throw _t25;
        case 7:
          return _context26.a(2);
      }
    }, _callee26, null, [[2, 5]]);
  }));
  return _trackPipelineExecution.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,