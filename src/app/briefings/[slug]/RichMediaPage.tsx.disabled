/**
 * Rich Media Briefing Page
 * Server component that fetches enriched data and renders the OneFootball-style layout
 */

import { notFound } from "next/navigation";
import { RichMediaBriefingLayout } from "@/components/briefings/RichMediaBriefingLayout";
import {
  getBriefingBySlug,
  getRelatedBriefings,
} from "@/lib/database/briefings";
import { enrichContent } from "@/briefing-generator/steps/03a-enrich-content";
import { fetchEnhancedImages } from "@/briefing-generator/steps/06a-fetch-enhanced-images";
import { logger } from "@/lib/logger";

interface RichMediaPageProps {
  params: {
    slug: string;
  };
}

export default async function RichMediaBriefingPage({
  params,
}: RichMediaPageProps) {
  const { slug } = params;

  try {
    // Fetch the briefing
    const briefing = await getBriefingBySlug(slug);

    if (!briefing) {
      notFound();
    }

    // Get the raw tweet data from the briefing
    const rawTweets = extractTweetsFromBriefing(briefing);

    // Enrich the tweet content
    const enrichedTweets = await enrichContent({
      tweets: rawTweets,
      priority: "depth",
    });

    // Fetch enhanced images
    const images = await fetchEnhancedImages({
      enrichedTweets,
      maxStoriesWithImages: 5,
    });

    // Get related briefings
    const relatedBriefings = await getRelatedBriefings(briefing.id, 5);

    // Transform content to rich article format
    const richContent = await transformToRichArticle(
      briefing.content as string,
      enrichedTweets,
    );

    return (
      <RichMediaBriefingLayout
        title={briefing.title as string}
        timestamp={briefing.createdAt}
        summary={extractSummary(briefing.content as string)}
        content={richContent}
        enrichedTweets={enrichedTweets}
        images={images}
        relatedBriefings={relatedBriefings.map((b) => ({
          id: b.id,
          title: b.title as string,
          slug: b.slug,
          timestamp: b.createdAt,
          image: undefined, // No imageUrl field in briefing model
        }))}
        theme="dark"
      />
    );
  } catch (error) {
    logger.error("Failed to load rich media briefing", error);
    notFound();
  }
}

/**
 * Extract tweet data from briefing content
 * This is a simplified version - in production you'd parse the actual stored tweet data
 */
function extractTweetsFromBriefing(briefing: any): Array<{
  id: string;
  content: string;
  author: string;
  timestamp: Date;
}> {
  // For now, create mock tweets based on briefing content
  // In production, briefings would store the source tweet IDs
  const tweets = [];

  // Extract quotes from the briefing content as tweet sources
  const quoteRegex = /"([^"]+)"\s*[-â€“]\s*(@?\w+)/g;
  let match;
  let index = 0;

  while ((match = quoteRegex.exec(briefing.content)) !== null) {
    tweets.push({
      id: `tweet-${briefing.id}-${index}`,
      content: match[1],
      author: match[2].replace("@", ""),
      timestamp: briefing.createdAt,
    });
    index++;
  }

  // If no tweets found, create a default one
  if (tweets.length === 0) {
    tweets.push({
      id: `tweet-${briefing.id}-0`,
      content: briefing.summary || briefing.title,
      author: "TransferJuice",
      timestamp: briefing.createdAt,
    });
  }

  return tweets;
}

/**
 * Extract summary from content if not provided
 */
function extractSummary(content: string): string {
  // Take first paragraph or first 200 characters
  const firstParagraph = content.split("\n\n")[0];

  if (firstParagraph.length > 200) {
    return firstParagraph.substring(0, 197) + "...";
  }

  return firstParagraph;
}

/**
 * Transform briefing content to rich article format
 * This would use the Terry AI enhanced prompts in production
 */
async function transformToRichArticle(
  originalContent: string,
  enrichedTweets: any[],
): Promise<string> {
  // For now, return the original content with some formatting
  // In production, this would call the Terry AI with enhanced prompts

  // Add section headers based on content structure
  let richContent = originalContent;

  // Ensure proper paragraph spacing
  richContent = richContent.replace(/\n\n+/g, "\n\n");

  // Add section headers if not present
  if (!richContent.includes("PLAYER PROFILE")) {
    const sections = richContent.split("\n\n");
    if (sections.length > 3) {
      sections.splice(2, 0, "PLAYER PROFILE:");
      sections.splice(5, 0, "TACTICAL ANALYSIS:");
      sections.splice(8, 0, "WHAT HAPPENS NEXT:");
      richContent = sections.join("\n\n");
    }
  }

  return richContent;
}
