1fdc5664ee401a7cd805d102019a7f46
"use strict";

// Mock OpenAI
_getJestObj().mock("openai");
// Mock terry-style module
_getJestObj().mock("@/lib/terry-style", function () {
  return {
    applyTerryStyle: {
      enhanceError: jest.fn(function (msg) {
        return "Terry-enhanced: ".concat(msg);
      })
    }
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _openai = _interopRequireDefault(require("openai"));
var _qualityValidator = require("../quality-validator");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * Content Quality Validator Tests
 * Comprehensive test suite for multi-layered content validation
 */
var MockedOpenAI = _openai["default"];
describe("ContentQualityValidator", function () {
  var validator;
  var mockOpenAI;
  var mockArticle = {
    title: "Rice Finally Joins United After £100m Circus",
    slug: "rice-finally-joins-united-after-100m-circus",
    content: {
      sections: [{
        id: "section_intro_1",
        type: "intro",
        title: "The Latest Chaos",
        content: "Right, this might be the most cursed transfer saga I've witnessed today, and I've been watching football for longer than I care to admit. Manchester United (currently in their \"cautiously optimistic\" phase) have finally managed to drag Declan Rice across the finish line for £100m (or roughly the GDP of a small Caribbean island). The whole medical circus (basically checking he has two legs and a pulse) was completed yesterday, which means we're now in that delightful phase where everyone pretends this was always going to happen.",
        order: 1,
        sourceTweets: ["tweet_1"],
        terryisms: ['(currently in their "cautiously optimistic" phase)', "(or roughly the GDP of a small Caribbean island)", "(basically checking he has two legs and a pulse)"]
      }, {
        id: "section_main_2",
        type: "main",
        title: "The Main Event",
        content: "What this actually means, beyond the obvious financial lunacy, is that United have finally addressed their midfield issues with the sort of decisive action that would make a sloth proud. Rice brings exactly the sort of defensive stability that United have been missing since, oh, approximately 2013. His ability to break up play and distribute the ball effectively should, in theory, allow Bruno Fernandes to focus on what he does best (creating chaos in the final third) rather than dropping deep to collect the ball.",
        order: 2,
        sourceTweets: ["tweet_1", "tweet_2"],
        terryisms: ["beyond the obvious financial lunacy", "oh, approximately 2013"]
      }, {
        id: "section_analysis_3",
        type: "analysis",
        title: "The Terry Take",
        content: "Let's unpack this absolute car crash of a situation, shall we? The implications of this are either brilliant or catastrophic, depending on your tolerance for chaos. United paying £100m for a defensive midfielder is either the smartest thing they've done in years or evidence that they've completely lost their minds. Given their recent track record, I'm inclined towards the latter, but Rice is genuinely excellent at what he does.",
        order: 3,
        sourceTweets: ["tweet_3"],
        terryisms: ["Let's unpack this absolute car crash of a situation, shall we?", "depending on your tolerance for chaos"]
      }],
      wordCount: 342,
      estimatedReadTime: 2,
      terryScore: 85,
      qualityMetrics: {
        coherence: 88,
        factualAccuracy: 92,
        brandVoice: 85,
        readability: 79
      }
    },
    summary: "Manchester United complete the signing of Declan Rice for £100m after medical tests.",
    metaDescription: "Declan Rice joins Manchester United for £100m in latest transfer madness.",
    tags: ["Manchester United", "Declan Rice", "Transfer", "Premier League"],
    briefingType: "MORNING",
    status: "REVIEW",
    qualityScore: 86,
    aiModel: "gpt-4.1",
    generationTime: 4500
  };
  var mockFactualAccuracyResponse = {
    score: 88,
    issues: [{
      severity: "low",
      type: "verification",
      description: "Transfer fee should be verified against official sources",
      suggestion: "Cross-reference with club announcements"
    }]
  };
  var mockBrandVoiceResponse = {
    score: 85,
    issues: [{
      severity: "low",
      type: "voice_consistency",
      description: "Could use more parenthetical asides",
      suggestion: "Add more Terry-style commentary"
    }]
  };
  var mockSafetyResponse = {
    score: 95,
    issues: []
  };
  var mockLegalResponse = {
    score: 92,
    issues: [{
      severity: "low",
      type: "opinion",
      description: "Strong opinions about club decisions should be clearly marked as commentary",
      suggestion: "Add disclaimer for editorial opinion"
    }]
  };
  var mockEditorialResponse = {
    score: 88,
    issues: [{
      severity: "low",
      type: "structure",
      description: "Article could benefit from more subheadings",
      suggestion: "Add section breaks for better readability"
    }]
  };
  var mockAccessibilityResponse = {
    score: 90,
    issues: [{
      severity: "low",
      type: "readability",
      description: "Some sentences could be shorter for better accessibility",
      suggestion: "Break down complex sentences"
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();

    // Create mock OpenAI instance
    mockOpenAI = {
      chat: {
        completions: {
          create: jest.fn()
        }
      }
    };
    MockedOpenAI.mockImplementation(function () {
      return mockOpenAI;
    });
    validator = new _qualityValidator.ContentQualityValidator({
      openaiApiKey: "test-key",
      model: "gpt-4.1",
      strictMode: false,
      autoReviewThreshold: 85,
      terryMinimumScore: 75
    });
  });
  describe("constructor", function () {
    it("should initialize with default configuration", function () {
      var defaultValidator = new _qualityValidator.ContentQualityValidator({
        openaiApiKey: "test-key"
      });
      expect(defaultValidator).toBeInstanceOf(_qualityValidator.ContentQualityValidator);
    });
    it("should initialize with custom configuration", function () {
      var customValidator = new _qualityValidator.ContentQualityValidator({
        openaiApiKey: "test-key",
        model: "gpt-4o",
        strictMode: true,
        autoReviewThreshold: 90,
        terryMinimumScore: 80
      });
      expect(customValidator).toBeInstanceOf(_qualityValidator.ContentQualityValidator);
    });
  });
  describe("validateContent", function () {
    beforeEach(function () {
      // Mock all validation check responses
      mockOpenAI.chat.completions.create.mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockFactualAccuracyResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockBrandVoiceResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockSafetyResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockLegalResponse)
          }
        }]
      });
    });
    it("should perform comprehensive content validation", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context.v;
            expect(result).toMatchObject({
              overallScore: expect.any(Number),
              passed: expect.any(Boolean),
              requiresHumanReview: expect.any(Boolean),
              blockers: expect.any(Array),
              warnings: expect.any(Array),
              checks: expect.arrayContaining([expect.objectContaining({
                category: "factual_accuracy"
              }), expect.objectContaining({
                category: "brand_voice"
              }), expect.objectContaining({
                category: "content_safety"
              }), expect.objectContaining({
                category: "legal_compliance"
              }), expect.objectContaining({
                category: "editorial_quality"
              }), expect.objectContaining({
                category: "accessibility"
              })]),
              recommendations: expect.any(Array),
              validatedAt: expect.any(Date),
              validationTime: expect.any(Number)
            });

            // Should call OpenAI for factual, brand voice, safety, and legal checks
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(4);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it("should pass validation for high-quality content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context2.v;
            expect(result.passed).toBe(true);
            expect(result.overallScore).toBeGreaterThan(75);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it("should require human review for content below threshold", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var lowQualityArticle, lowQualityResponses, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            // Clear existing mocks
            jest.clearAllMocks();
            mockOpenAI.chat.completions.create = jest.fn();

            // Modify the mock article to have lower terryScore for this test
            lowQualityArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                terryScore: 50 // Lower than mock response
              })
            });
            lowQualityResponses = [{
              score: 70,
              issues: []
            },
            // factual_accuracy
            {
              score: 65,
              issues: []
            },
            // brand_voice
            {
              score: 80,
              issues: []
            },
            // content_safety
            {
              score: 75,
              issues: []
            },
            // legal_compliance
            {
              score: 60,
              issues: []
            },
            // editorial_quality
            {
              score: 70,
              issues: []
            } // accessibility
            ];
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[0])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[1])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[2])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[3])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[4])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[5])
                }
              }]
            });
            _context3.n = 1;
            return validator.validateContent(lowQualityArticle);
          case 1:
            result = _context3.v;
            expect(result.requiresHumanReview).toBe(true);
            expect(result.overallScore).toBeLessThan(85);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    it("should handle critical issues as blockers", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var criticalResponse, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            // Clear existing mocks
            jest.clearAllMocks();
            mockOpenAI.chat.completions.create = jest.fn();
            criticalResponse = {
              score: 95,
              issues: [{
                severity: "critical",
                type: "legal",
                description: "Potential defamation risk",
                suggestion: "Remove or modify problematic content"
              }]
            };
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(criticalResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockEditorialResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockAccessibilityResponse)
                }
              }]
            });
            _context4.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context4.v;
            expect(result.passed).toBe(false);
            expect(result.requiresHumanReview).toBe(true);
            expect(result.blockers).toContain("content_safety: Potential defamation risk");
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it("should handle validation errors gracefully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error("API Error"));
            _context5.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow("Content validation failed");
          case 1:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe("factual accuracy checking", function () {
    it("should check factual accuracy using AI", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            });
            _context6.n = 1;
            return validator.checkFactualAccuracy(mockArticle);
          case 1:
            result = _context6.v;
            expect(result).toMatchObject({
              category: "factual_accuracy",
              score: 88,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              model: "gpt-4.1",
              response_format: {
                type: "json_object"
              },
              messages: expect.arrayContaining([expect.objectContaining({
                role: "system",
                content: expect.stringContaining("fact-checking expert")
              })])
            }));
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it("should fail factual accuracy for low scores", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var lowAccuracyResponse, result;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            lowAccuracyResponse = _objectSpread(_objectSpread({}, mockFactualAccuracyResponse), {}, {
              score: 70
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowAccuracyResponse)
                }
              }]
            });
            _context7.n = 1;
            return validator.checkFactualAccuracy(mockArticle);
          case 1:
            result = _context7.v;
            expect(result.passed).toBe(false);
            expect(result.score).toBe(70);
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe("brand voice checking", function () {
    it("should check brand voice consistency", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var result;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            });
            _context8.n = 1;
            return validator.checkBrandVoice(mockArticle);
          case 1:
            result = _context8.v;
            expect(result).toMatchObject({
              category: "brand_voice",
              score: 85,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              messages: expect.arrayContaining([expect.objectContaining({
                content: expect.stringContaining("Terry/Joel Golby brand voice")
              })])
            }));
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    it("should use higher of AI score and article Terry score", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var lowBrandResponse, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            lowBrandResponse = _objectSpread(_objectSpread({}, mockBrandVoiceResponse), {}, {
              score: 60
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowBrandResponse)
                }
              }]
            });
            _context9.n = 1;
            return validator.checkBrandVoice(mockArticle);
          case 1:
            result = _context9.v;
            // Should use article's terryScore (85) since it's higher than AI response (60)
            expect(result.score).toBe(85);
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe("content safety checking", function () {
    it("should perform pattern-based and AI safety checks", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context0.n = 1;
            return validator.checkContentSafety(mockArticle);
          case 1:
            result = _context0.v;
            expect(result).toMatchObject({
              category: "content_safety",
              score: expect.any(Number),
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it("should detect safety patterns in content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var unsafeArticle, result;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            unsafeArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This is some content with profanity shit and inappropriate language."
                })]
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context1.n = 1;
            return validator.checkContentSafety(unsafeArticle);
          case 1:
            result = _context1.v;
            expect(result.issues.some(function (issue) {
              return issue.description === "Profanity detected";
            })).toBe(true);
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
    it("should handle discriminatory language detection", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var discriminatoryArticle, result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            discriminatoryArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This content contains racist language that should be flagged."
                })]
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context10.n = 1;
            return validator.checkContentSafety(discriminatoryArticle);
          case 1:
            result = _context10.v;
            expect(result.issues.some(function (issue) {
              return issue.description === "Discriminatory language";
            })).toBe(true);
            expect(result.issues.some(function (issue) {
              return issue.severity === "critical";
            })).toBe(true);
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
  });
  describe("legal compliance checking", function () {
    it("should check for legal compliance issues", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            });
            _context11.n = 1;
            return validator.checkLegalCompliance(mockArticle);
          case 1:
            result = _context11.v;
            expect(result).toMatchObject({
              category: "legal_compliance",
              score: 92,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              messages: expect.arrayContaining([expect.objectContaining({
                content: expect.stringContaining("legal compliance")
              })])
            }));
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
    it("should fail for low legal compliance scores", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var lowLegalResponse, result;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            lowLegalResponse = _objectSpread(_objectSpread({}, mockLegalResponse), {}, {
              score: 75
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowLegalResponse)
                }
              }]
            });
            _context12.n = 1;
            return validator.checkLegalCompliance(mockArticle);
          case 1:
            result = _context12.v;
            expect(result.passed).toBe(false);
            expect(result.score).toBe(75);
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
  });
  describe("editorial quality checking", function () {
    it("should check editorial quality automatically", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var result;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            _context13.n = 1;
            return validator.checkEditorialQuality(mockArticle);
          case 1:
            result = _context13.v;
            expect(result).toMatchObject({
              category: "editorial_quality",
              score: expect.any(Number),
              passed: expect.any(Boolean),
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "automated"
            });
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
    it("should flag articles that are too short", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var shortArticle, result;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            shortArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                wordCount: 200,
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "Very short content."
                })]
              })
            });
            _context14.n = 1;
            return validator.checkEditorialQuality(shortArticle);
          case 1:
            result = _context14.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too short");
            })).toBe(true);
          case 2:
            return _context14.a(2);
        }
      }, _callee14);
    })));
    it("should flag articles that are too long", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15() {
      var longArticle, result;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            longArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                wordCount: 1600
              })
            });
            _context15.n = 1;
            return validator.checkEditorialQuality(longArticle);
          case 1:
            result = _context15.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too long");
            })).toBe(true);
          case 2:
            return _context15.a(2);
        }
      }, _callee15);
    })));
    it("should check section balance", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16() {
      var imbalancedArticle, result;
      return _regenerator().w(function (_context16) {
        while (1) switch (_context16.n) {
          case 0:
            imbalancedArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "Short."
                }), _objectSpread(_objectSpread({}, mockArticle.content.sections[1]), {}, {
                  content: "This is a much longer section with significantly more content than the previous one, creating an imbalance in the article structure."
                })]
              })
            });
            _context16.n = 1;
            return validator.checkEditorialQuality(imbalancedArticle);
          case 1:
            result = _context16.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("unbalanced");
            })).toBe(true);
          case 2:
            return _context16.a(2);
        }
      }, _callee16);
    })));
  });
  describe("accessibility checking", function () {
    it("should check accessibility automatically", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17() {
      var result;
      return _regenerator().w(function (_context17) {
        while (1) switch (_context17.n) {
          case 0:
            _context17.n = 1;
            return validator.checkAccessibility(mockArticle);
          case 1:
            result = _context17.v;
            expect(result).toMatchObject({
              category: "accessibility",
              score: expect.any(Number),
              passed: expect.any(Boolean),
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "automated"
            });
          case 2:
            return _context17.a(2);
        }
      }, _callee17);
    })));
    it("should flag long sentences for readability", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18() {
      var longSentenceArticle, result;
      return _regenerator().w(function (_context18) {
        while (1) switch (_context18.n) {
          case 0:
            longSentenceArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This is an extremely long sentence that goes on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and continues to go on without any breaks or pauses which makes it very difficult to read and understand for users who may have accessibility needs."
                })]
              })
            });
            _context18.n = 1;
            return validator.checkAccessibility(longSentenceArticle);
          case 1:
            result = _context18.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too long for accessibility");
            })).toBe(true);
          case 2:
            return _context18.a(2);
        }
      }, _callee18);
    })));
    it("should suggest better section structure", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19() {
      var poorStructureArticle, result;
      return _regenerator().w(function (_context19) {
        while (1) switch (_context19.n) {
          case 0:
            poorStructureArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [mockArticle.content.sections[0], mockArticle.content.sections[1]]
              })
            });
            _context19.n = 1;
            return validator.checkAccessibility(poorStructureArticle);
          case 1:
            result = _context19.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("section structure");
            })).toBe(true);
          case 2:
            return _context19.a(2);
        }
      }, _callee19);
    })));
  });
  describe("quality scoring", function () {
    it("should calculate weighted overall score", function () {
      var checks = [{
        category: "factual_accuracy",
        score: 90
      }, {
        category: "brand_voice",
        score: 85
      }, {
        category: "content_safety",
        score: 95
      }, {
        category: "legal_compliance",
        score: 88
      }, {
        category: "editorial_quality",
        score: 80
      }, {
        category: "accessibility",
        score: 85
      }];
      var overallScore = validator.calculateOverallScore(checks);
      expect(overallScore).toBeGreaterThan(80);
      expect(overallScore).toBeLessThanOrEqual(100);
    });
    it("should weight factual accuracy and safety most heavily", function () {
      var highFactualSafety = [{
        category: "factual_accuracy",
        score: 100
      }, {
        category: "content_safety",
        score: 100
      }, {
        category: "brand_voice",
        score: 50
      }, {
        category: "legal_compliance",
        score: 50
      }, {
        category: "editorial_quality",
        score: 50
      }, {
        category: "accessibility",
        score: 50
      }];
      var lowFactualSafety = [{
        category: "factual_accuracy",
        score: 50
      }, {
        category: "content_safety",
        score: 50
      }, {
        category: "brand_voice",
        score: 100
      }, {
        category: "legal_compliance",
        score: 100
      }, {
        category: "editorial_quality",
        score: 100
      }, {
        category: "accessibility",
        score: 100
      }];
      var highScore = validator.calculateOverallScore(highFactualSafety);
      var lowScore = validator.calculateOverallScore(lowFactualSafety);
      expect(highScore).toBeGreaterThan(lowScore);
    });
  });
  describe("pass/fail determination", function () {
    it("should fail content with critical issues", function () {
      var checks = [{
        category: "content_safety",
        passed: true,
        issues: [{
          severity: "critical",
          type: "safety",
          description: "Critical issue"
        }]
      }];
      var passed = validator.determinePassStatus(checks, 90);
      expect(passed).toBe(false);
    });
    it("should fail content below score threshold", function () {
      var checks = [{
        category: "factual_accuracy",
        passed: true,
        issues: []
      }];
      var passed = validator.determinePassStatus(checks, 60);
      expect(passed).toBe(false);
    });
    it("should pass high-quality content without critical issues", function () {
      var checks = [{
        category: "factual_accuracy",
        passed: true,
        issues: [{
          severity: "low",
          type: "minor",
          description: "Minor issue"
        }]
      }];
      var passed = validator.determinePassStatus(checks, 85);
      expect(passed).toBe(true);
    });
  });
  describe("human review requirements", function () {
    it("should require review for critical issues", function () {
      var checks = [{
        category: "legal_compliance",
        issues: [{
          severity: "critical",
          type: "legal",
          description: "Legal risk"
        }]
      }];
      var requiresReview = validator.requiresHumanReview(checks, 90);
      expect(requiresReview).toBe(true);
    });
    it("should require review for scores below threshold", function () {
      var checks = [{
        category: "factual_accuracy",
        issues: []
      }];
      var requiresReview = validator.requiresHumanReview(checks, 75);
      expect(requiresReview).toBe(true);
    });
    it("should not require review for high-quality content", function () {
      var checks = [{
        category: "factual_accuracy",
        issues: []
      }];
      var requiresReview = validator.requiresHumanReview(checks, 90);
      expect(requiresReview).toBe(false);
    });
  });
  describe("issue categorization", function () {
    it("should categorize critical and high issues as blockers", function () {
      var checks = [{
        category: "content_safety",
        issues: [{
          severity: "critical",
          type: "safety",
          description: "Critical safety issue"
        }, {
          severity: "high",
          type: "quality",
          description: "High priority issue"
        }, {
          severity: "medium",
          type: "style",
          description: "Medium issue"
        }, {
          severity: "low",
          type: "minor",
          description: "Low priority issue"
        }]
      }];
      var _categorizeIssues = validator.categorizeIssues(checks),
        blockers = _categorizeIssues.blockers,
        warnings = _categorizeIssues.warnings;
      expect(blockers).toHaveLength(2);
      expect(warnings).toHaveLength(2);
      expect(blockers[0]).toContain("Critical safety issue");
      expect(blockers[1]).toContain("High priority issue");
    });
  });
  describe("recommendations generation", function () {
    it("should generate recommendations for failed checks", function () {
      var checks = [{
        category: "brand_voice",
        passed: false,
        score: 60
      }];
      var recommendations = validator.generateRecommendations(checks, mockArticle);
      expect(recommendations.some(function (r) {
        return r.type === "fix_required";
      })).toBe(true);
      expect(recommendations.some(function (r) {
        return r.description.includes("brand voice");
      })).toBe(true);
    });
    it("should recommend Terry voice improvements", function () {
      var lowTerryArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
          terryScore: 60
        })
      });
      var recommendations = validator.generateRecommendations([], lowTerryArticle);
      expect(recommendations.some(function (r) {
        return r.description.includes("Terry voice");
      })).toBe(true);
    });
    it("should suggest quality improvements for low-scoring articles", function () {
      var lowQualityArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        qualityScore: 70
      });
      var recommendations = validator.generateRecommendations([], lowQualityArticle);
      expect(recommendations.some(function (r) {
        return r.description.includes("quality");
      })).toBe(true);
    });
  });
  describe("sentence analysis", function () {
    it("should calculate average words per sentence", function () {
      var avgWords = validator.calculateAverageWordsPerSentence(mockArticle);
      expect(avgWords).toBeGreaterThan(0);
      expect(avgWords).toBeLessThan(50); // Reasonable upper bound
    });
    it("should handle content with no sentences", function () {
      var noSentenceArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
          sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
            content: ""
          })]
        })
      });
      var avgWords = validator.calculateAverageWordsPerSentence(noSentenceArticle);
      expect(avgWords).toBe(0);
    });
  });
  describe("configuration validation", function () {
    it("should validate API configuration successfully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20() {
      var result;
      return _regenerator().w(function (_context20) {
        while (1) switch (_context20.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: "Test response"
                }
              }]
            });
            _context20.n = 1;
            return validator.validateConfiguration();
          case 1:
            result = _context20.v;
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
          case 2:
            return _context20.a(2);
        }
      }, _callee20);
    })));
    it("should handle API configuration errors", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21() {
      var result;
      return _regenerator().w(function (_context21) {
        while (1) switch (_context21.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error("Invalid API key"));
            _context21.n = 1;
            return validator.validateConfiguration();
          case 1:
            result = _context21.v;
            expect(result.valid).toBe(false);
            expect(result.error).toContain("Terry-enhanced");
          case 2:
            return _context21.a(2);
        }
      }, _callee21);
    })));
  });
  describe("edge cases and error handling", function () {
    it("should handle empty article content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22() {
      var emptyArticle, result;
      return _regenerator().w(function (_context22) {
        while (1) switch (_context22.n) {
          case 0:
            emptyArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [],
                wordCount: 0
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify({
                    score: 0,
                    issues: []
                  })
                }
              }]
            });
            _context22.n = 1;
            return validator.validateContent(emptyArticle);
          case 1:
            result = _context22.v;
            expect(result.overallScore).toBeLessThan(50);
            expect(result.passed).toBe(false);
          case 2:
            return _context22.a(2);
        }
      }, _callee22);
    })));
    it("should handle malformed AI responses", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23() {
      return _regenerator().w(function (_context23) {
        while (1) switch (_context23.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: "invalid json"
                }
              }]
            });
            _context23.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow();
          case 1:
            return _context23.a(2);
        }
      }, _callee23);
    })));
    it("should handle null AI responses", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee24() {
      return _regenerator().w(function (_context24) {
        while (1) switch (_context24.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: null
                }
              }]
            });
            _context24.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow();
          case 1:
            return _context24.a(2);
        }
      }, _callee24);
    })));
    it("should handle strict mode configuration", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee25() {
      var strictValidator, result;
      return _regenerator().w(function (_context25) {
        while (1) switch (_context25.n) {
          case 0:
            strictValidator = new _qualityValidator.ContentQualityValidator({
              openaiApiKey: "test-key",
              strictMode: true
            }); // Mock responses
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            });
            _context25.n = 1;
            return strictValidator.validateContent(mockArticle);
          case 1:
            result = _context25.v;
            // Strict mode should require higher scores
            expect(result).toBeDefined();
          case 2:
            return _context25.a(2);
        }
      }, _callee25);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,