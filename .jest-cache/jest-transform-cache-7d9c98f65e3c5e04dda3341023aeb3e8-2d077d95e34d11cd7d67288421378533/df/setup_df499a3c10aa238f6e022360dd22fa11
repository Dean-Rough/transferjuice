c5ac4945ad57c107d102bce95c71e144
"use strict";

require("@testing-library/jest-dom");
require("jest-extended");
var _util = require("util");
var _server = require("./mocks/server");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Polyfills for testing environment
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;

// Polyfills for fetch API (required by MSW)
if (typeof globalThis.fetch === "undefined") {
  var _require = require("undici"),
    fetch = _require.fetch,
    Headers = _require.Headers,
    Request = _require.Request,
    Response = _require.Response;
  globalThis.fetch = fetch;
  globalThis.Headers = Headers;
  globalThis.Request = Request;
  globalThis.Response = Response;
}
// Mock IntersectionObserver for components that use it
global.IntersectionObserver = /*#__PURE__*/function () {
  function IntersectionObserver() {
    _classCallCheck(this, IntersectionObserver);
  }
  return _createClass(IntersectionObserver, [{
    key: "disconnect",
    value: function disconnect() {}
  }, {
    key: "observe",
    value: function observe() {}
  }, {
    key: "unobserve",
    value: function unobserve() {}
  }]);
}();

// Mock ResizeObserver for components that use it
global.ResizeObserver = /*#__PURE__*/function () {
  function ResizeObserver() {
    _classCallCheck(this, ResizeObserver);
  }
  return _createClass(ResizeObserver, [{
    key: "disconnect",
    value: function disconnect() {}
  }, {
    key: "observe",
    value: function observe() {}
  }, {
    key: "unobserve",
    value: function unobserve() {}
  }]);
}();

// Mock window.matchMedia for responsive components
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation(function (query) {
    return {
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      // deprecated
      removeListener: jest.fn(),
      // deprecated
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn()
    };
  })
});

// Mock performance API for components that use it
Object.defineProperty(window, "performance", {
  writable: true,
  value: {
    now: jest.fn(function () {
      return Date.now();
    }),
    mark: jest.fn(),
    measure: jest.fn(),
    clearMarks: jest.fn(),
    clearMeasures: jest.fn()
  }
});

// Mock fetch for API calls
global.fetch = jest.fn();

// Suppress console.log/warn/error in tests unless explicitly needed
var originalConsole = _objectSpread({}, console);
beforeEach(function () {
  console.log = jest.fn();
  console.warn = jest.fn();
  console.error = jest.fn();
});
afterEach(function () {
  Object.assign(console, originalConsole);
  jest.clearAllMocks();
  _server.server.resetHandlers();
});

// Start MSW server before all tests
beforeAll(function () {
  _server.server.listen({
    onUnhandledRequest: "error"
  });
});

// Stop MSW server after all tests
afterAll(function () {
  _server.server.close();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,