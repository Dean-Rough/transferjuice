805457609d72827dac214a90f9b88155
/* istanbul ignore next */
function cov_ep6f66xoc() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/validations/api.ts";
  var hash = "ddb4d0f536c7f5a3b4cb3956d85feb6fcf4be76f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/validations/api.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "1": {
        start: {
          line: 17,
          column: 26
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "2": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "3": {
        start: {
          line: 28,
          column: 33
        },
        end: {
          line: 48,
          column: 4
        }
      },
      "4": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 48,
          column: 4
        }
      },
      "5": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 64,
          column: 2
        }
      },
      "6": {
        start: {
          line: 67,
          column: 33
        },
        end: {
          line: 95,
          column: 2
        }
      },
      "7": {
        start: {
          line: 98,
          column: 44
        },
        end: {
          line: 102,
          column: 2
        }
      },
      "8": {
        start: {
          line: 99,
          column: 43
        },
        end: {
          line: 99,
          column: 78
        }
      },
      "9": {
        start: {
          line: 99,
          column: 69
        },
        end: {
          line: 99,
          column: 77
        }
      },
      "10": {
        start: {
          line: 104,
          column: 40
        },
        end: {
          line: 110,
          column: 2
        }
      },
      "11": {
        start: {
          line: 105,
          column: 37
        },
        end: {
          line: 105,
          column: 74
        }
      },
      "12": {
        start: {
          line: 105,
          column: 64
        },
        end: {
          line: 105,
          column: 73
        }
      },
      "13": {
        start: {
          line: 112,
          column: 46
        },
        end: {
          line: 124,
          column: 2
        }
      },
      "14": {
        start: {
          line: 127,
          column: 42
        },
        end: {
          line: 135,
          column: 2
        }
      },
      "15": {
        start: {
          line: 137,
          column: 42
        },
        end: {
          line: 145,
          column: 2
        }
      },
      "16": {
        start: {
          line: 147,
          column: 35
        },
        end: {
          line: 168,
          column: 2
        }
      },
      "17": {
        start: {
          line: 164,
          column: 24
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "18": {
        start: {
          line: 164,
          column: 50
        },
        end: {
          line: 164,
          column: 58
        }
      },
      "19": {
        start: {
          line: 171,
          column: 38
        },
        end: {
          line: 230,
          column: 2
        }
      },
      "20": {
        start: {
          line: 208,
          column: 43
        },
        end: {
          line: 208,
          column: 55
        }
      },
      "21": {
        start: {
          line: 232,
          column: 45
        },
        end: {
          line: 270,
          column: 2
        }
      },
      "22": {
        start: {
          line: 272,
          column: 40
        },
        end: {
          line: 285,
          column: 2
        }
      },
      "23": {
        start: {
          line: 287,
          column: 38
        },
        end: {
          line: 338,
          column: 2
        }
      },
      "24": {
        start: {
          line: 341,
          column: 36
        },
        end: {
          line: 358,
          column: 2
        }
      },
      "25": {
        start: {
          line: 360,
          column: 39
        },
        end: {
          line: 383,
          column: 2
        }
      },
      "26": {
        start: {
          line: 386,
          column: 43
        },
        end: {
          line: 441,
          column: 2
        }
      },
      "27": {
        start: {
          line: 443,
          column: 36
        },
        end: {
          line: 460,
          column: 2
        }
      },
      "28": {
        start: {
          line: 463,
          column: 44
        },
        end: {
          line: 473,
          column: 2
        }
      },
      "29": {
        start: {
          line: 475,
          column: 44
        },
        end: {
          line: 489,
          column: 2
        }
      },
      "30": {
        start: {
          line: 492,
          column: 37
        },
        end: {
          line: 505,
          column: 2
        }
      },
      "31": {
        start: {
          line: 507,
          column: 40
        },
        end: {
          line: 530,
          column: 2
        }
      },
      "32": {
        start: {
          line: 533,
          column: 34
        },
        end: {
          line: 546,
          column: 2
        }
      },
      "33": {
        start: {
          line: 548,
          column: 37
        },
        end: {
          line: 563,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 28,
            column: 33
          },
          end: {
            line: 28,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 48,
            column: 4
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 99,
            column: 34
          },
          end: {
            line: 99,
            column: 35
          }
        },
        loc: {
          start: {
            line: 99,
            column: 43
          },
          end: {
            line: 99,
            column: 78
          }
        },
        line: 99
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 99,
            column: 62
          },
          end: {
            line: 99,
            column: 63
          }
        },
        loc: {
          start: {
            line: 99,
            column: 69
          },
          end: {
            line: 99,
            column: 77
          }
        },
        line: 99
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 105,
            column: 28
          },
          end: {
            line: 105,
            column: 29
          }
        },
        loc: {
          start: {
            line: 105,
            column: 37
          },
          end: {
            line: 105,
            column: 74
          }
        },
        line: 105
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 56
          },
          end: {
            line: 105,
            column: 57
          }
        },
        loc: {
          start: {
            line: 105,
            column: 64
          },
          end: {
            line: 105,
            column: 73
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 164,
            column: 15
          },
          end: {
            line: 164,
            column: 16
          }
        },
        loc: {
          start: {
            line: 164,
            column: 24
          },
          end: {
            line: 164,
            column: 59
          }
        },
        line: 164
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 164,
            column: 43
          },
          end: {
            line: 164,
            column: 44
          }
        },
        loc: {
          start: {
            line: 164,
            column: 50
          },
          end: {
            line: 164,
            column: 58
          }
        },
        line: 164
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 208,
            column: 34
          },
          end: {
            line: 208,
            column: 35
          }
        },
        loc: {
          start: {
            line: 208,
            column: 43
          },
          end: {
            line: 208,
            column: 55
          }
        },
        line: 208
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ddb4d0f536c7f5a3b4cb3956d85feb6fcf4be76f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ep6f66xoc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ep6f66xoc();
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { z } from "zod";

/**
 * API Contract Schemas
 * Validates request/response patterns for all API endpoints
 */

// Common API patterns
export var PaginationSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[0]++, z.object({
  page: z.number().min(1)[
  /* istanbul ignore next */
  "default"](1),
  limit: z.number().min(1).max(100)[
  /* istanbul ignore next */
  "default"](10),
  offset: z.number().min(0).optional(),
  total: z.number().min(0).optional(),
  hasMore: z[
  /* istanbul ignore next */
  "boolean"]().optional()
}));
export var SortSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[1]++, z.object({
  field: z.string(),
  order: z[
  /* istanbul ignore next */
  "enum"](["asc", "desc"])[
  /* istanbul ignore next */
  "default"]("desc")
}));
export var DateRangeSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[2]++, z.object({
  from: z.string().datetime().optional(),
  to: z.string().datetime().optional()
}));

// Standard API response wrapper
/* istanbul ignore next */
cov_ep6f66xoc().s[3]++;
export var ApiResponseSchema = function ApiResponseSchema(dataSchema) {
  /* istanbul ignore next */
  cov_ep6f66xoc().f[0]++;
  cov_ep6f66xoc().s[4]++;
  return z.object({
    success: z[
    /* istanbul ignore next */
    "boolean"](),
    data: dataSchema.optional(),
    message: z.string().optional(),
    errors: z.array(z.object({
      field: z.string().optional(),
      message: z.string(),
      code: z.string().optional()
    })).optional(),
    meta: z.object({
      timestamp: z.string().datetime(),
      requestId: z.string(),
      version: z.string(),
      pagination: PaginationSchema.optional()
    })
  });
};

// Error response schema
export var ApiErrorSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[5]++, z.object({
  success: z.literal(false),
  error: z.object({
    code: z.string(),
    message: z.string(),
    details: z.any().optional(),
    field: z.string().optional()
  }),
  meta: z.object({
    timestamp: z.string().datetime(),
    requestId: z.string(),
    version: z.string()
  })
}));

// Health check schema
export var HealthCheckSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[6]++, z.object({
  status: z[
  /* istanbul ignore next */
  "enum"](["healthy", "degraded", "unhealthy"]),
  timestamp: z.string().datetime(),
  version: z.string(),
  uptime: z.number().min(0),
  // seconds
  services: z.object({
    database: z.object({
      status: z[
      /* istanbul ignore next */
      "enum"](["up", "down", "degraded"]),
      responseTime: z.number().min(0).optional(),
      lastCheck: z.string().datetime()
    }),
    twitter: z.object({
      status: z[
      /* istanbul ignore next */
      "enum"](["up", "down", "degraded"]),
      responseTime: z.number().min(0).optional(),
      rateLimitRemaining: z.number().min(0).optional(),
      lastCheck: z.string().datetime()
    }),
    ai: z.object({
      status: z[
      /* istanbul ignore next */
      "enum"](["up", "down", "degraded"]),
      responseTime: z.number().min(0).optional(),
      lastCheck: z.string().datetime()
    }),
    email: z.object({
      status: z[
      /* istanbul ignore next */
      "enum"](["up", "down", "degraded"]),
      responseTime: z.number().min(0).optional(),
      lastCheck: z.string().datetime()
    })
  })
}));

// Twitter API endpoints
export var TwitterUserLookupQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[7]++, z.object({
  usernames: z.string().transform(function (val) {
    /* istanbul ignore next */
    cov_ep6f66xoc().f[1]++;
    cov_ep6f66xoc().s[8]++;
    return val.split(",").map(function (u) {
      /* istanbul ignore next */
      cov_ep6f66xoc().f[2]++;
      cov_ep6f66xoc().s[9]++;
      return u.trim();
    });
  }),
  user_fields: z.string().optional(),
  expansions: z.string().optional()
}));
export var TwitterTweetsQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[10]++, z.object({
  ids: z.string().transform(function (val) {
    /* istanbul ignore next */
    cov_ep6f66xoc().f[3]++;
    cov_ep6f66xoc().s[11]++;
    return val.split(",").map(function (id) {
      /* istanbul ignore next */
      cov_ep6f66xoc().f[4]++;
      cov_ep6f66xoc().s[12]++;
      return id.trim();
    });
  }),
  tweet_fields: z.string().optional(),
  user_fields: z.string().optional(),
  media_fields: z.string().optional(),
  expansions: z.string().optional()
}));
export var TwitterUserTimelineQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[13]++, z.object({
  user_id: z.string(),
  max_results: z.number().min(5).max(100)[
  /* istanbul ignore next */
  "default"](10),
  since_id: z.string().optional(),
  until_id: z.string().optional(),
  start_time: z.string().datetime().optional(),
  end_time: z.string().datetime().optional(),
  tweet_fields: z.string().optional(),
  user_fields: z.string().optional(),
  media_fields: z.string().optional(),
  expansions: z.string().optional(),
  pagination_token: z.string().optional()
}));

// Article API endpoints
export var CreateArticleRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[14]++, z.object({
  title: z.string().min(10).max(255),
  subtitle: z.string().min(10).max(500).optional(),
  briefingType: z[
  /* istanbul ignore next */
  "enum"](["morning", "afternoon", "evening"]),
  sourceTweetIds: z.array(z.string()).min(1).max(50),
  autoPublish: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](false),
  scheduledFor: z.string().datetime().optional(),
  customInstructions: z.string().max(1000).optional()
}));
export var UpdateArticleRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[15]++, z.object({
  title: z.string().min(10).max(255).optional(),
  subtitle: z.string().min(10).max(500).optional(),
  status: z[
  /* istanbul ignore next */
  "enum"](["draft", "under_review", "approved", "published", "archived"]).optional(),
  scheduledFor: z.string().datetime().optional(),
  reviewNotes: z.string().max(1000).optional()
}));
export var ArticlesQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[16]++, z.object(
/* istanbul ignore next */
_objectSpread(_objectSpread({
  briefingType: z[
  /* istanbul ignore next */
  "enum"](["morning", "afternoon", "evening"]).optional(),
  status: z[
  /* istanbul ignore next */
  "enum"](["draft", "ai_generated", "under_review", "approved", "published", "archived"]).optional(),
  publishedAfter: z.string().datetime().optional(),
  publishedBefore: z.string().datetime().optional(),
  search: z.string().min(3).max(100).optional(),
  tags: z.string().transform(function (val) {
    /* istanbul ignore next */
    cov_ep6f66xoc().f[5]++;
    cov_ep6f66xoc().s[17]++;
    return val.split(",").map(function (t) {
      /* istanbul ignore next */
      cov_ep6f66xoc().f[6]++;
      cov_ep6f66xoc().s[18]++;
      return t.trim();
    });
  }).optional()
}, PaginationSchema.shape), {}, {
  sort: SortSchema.optional()
})));

// Subscriber API endpoints
export var SubscribeRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[19]++, z.object({
  email: z.string().email(),
  preferences: z.object({
    emailFrequency: z[
    /* istanbul ignore next */
    "enum"](["all", "daily", "weekly", "major_only"])[
    /* istanbul ignore next */
    "default"]("all"),
    preferredTeams: z.array(z[
    /* istanbul ignore next */
    "enum"](["arsenal", "aston_villa", "bournemouth", "brentford", "brighton", "burnley", "chelsea", "crystal_palace", "everton", "fulham", "liverpool", "luton", "manchester_city", "manchester_united", "newcastle", "nottingham_forest", "sheffield_united", "tottenham", "west_ham", "wolves"])).max(5)[
    /* istanbul ignore next */
    "default"]([]),
    receiveBreakingNews: z[
    /* istanbul ignore next */
    "boolean"]()[
    /* istanbul ignore next */
    "default"](true)
  }).optional(),
  gdprConsent: z[
  /* istanbul ignore next */
  "boolean"]().refine(function (val) {
    /* istanbul ignore next */
    cov_ep6f66xoc().f[7]++;
    cov_ep6f66xoc().s[20]++;
    return val === true;
  }, {
    message: "GDPR consent is required"
  }),
  subscriptionSource: z[
  /* istanbul ignore next */
  "enum"](["website", "social_media", "referral", "organic", "paid_ad", "other"])[
  /* istanbul ignore next */
  "default"]("website"),
  utmParameters: z.object({
    source: z.string().optional(),
    medium: z.string().optional(),
    campaign: z.string().optional(),
    term: z.string().optional(),
    content: z.string().optional()
  }).optional()
}));
export var UpdateSubscriberRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[21]++, z.object({
  preferences: z.object({
    emailFrequency: z[
    /* istanbul ignore next */
    "enum"](["all", "daily", "weekly", "major_only"]).optional(),
    preferredTeams: z.array(z[
    /* istanbul ignore next */
    "enum"](["arsenal", "aston_villa", "bournemouth", "brentford", "brighton", "burnley", "chelsea", "crystal_palace", "everton", "fulham", "liverpool", "luton", "manchester_city", "manchester_united", "newcastle", "nottingham_forest", "sheffield_united", "tottenham", "west_ham", "wolves"])).max(5).optional(),
    receiveBreakingNews: z[
    /* istanbul ignore next */
    "boolean"]().optional(),
    emailFormat: z[
    /* istanbul ignore next */
    "enum"](["html", "text"]).optional(),
    timezone: z.string().optional()
  }).optional()
}));
export var UnsubscribeRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[22]++, z.object({
  token: z.string().min(32),
  // Unsubscribe token
  reason: z[
  /* istanbul ignore next */
  "enum"](["too_frequent", "not_relevant", "poor_quality", "changed_email", "privacy_concerns", "other"]).optional(),
  feedback: z.string().max(500).optional()
}));
export var SubscribersQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[23]++, z.object(
/* istanbul ignore next */
_objectSpread(_objectSpread({
  status: z[
  /* istanbul ignore next */
  "enum"](["pending", "active", "paused", "unsubscribed", "bounced", "complained"]).optional(),
  subscribedAfter: z.string().datetime().optional(),
  subscribedBefore: z.string().datetime().optional(),
  lastEngagementAfter: z.string().datetime().optional(),
  lastEngagementBefore: z.string().datetime().optional(),
  source: z[
  /* istanbul ignore next */
  "enum"](["website", "social_media", "referral", "organic", "paid_ad", "other"]).optional(),
  preferredTeam: z[
  /* istanbul ignore next */
  "enum"](["arsenal", "aston_villa", "bournemouth", "brentford", "brighton", "burnley", "chelsea", "crystal_palace", "everton", "fulham", "liverpool", "luton", "manchester_city", "manchester_united", "newcastle", "nottingham_forest", "sheffield_united", "tottenham", "west_ham", "wolves"]).optional()
}, PaginationSchema.shape), {}, {
  sort: SortSchema.optional()
})));

// Analytics API endpoints
export var AnalyticsQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[24]++, z.object({
  metrics: z.array(z[
  /* istanbul ignore next */
  "enum"](["content", "audience", "engagement", "technical", "business"])),
  dateRange: DateRangeSchema,
  granularity: z[
  /* istanbul ignore next */
  "enum"](["hour", "day", "week", "month"])[
  /* istanbul ignore next */
  "default"]("day"),
  filters: z.object({
    articleIds: z.array(z.string()).optional(),
    briefingTypes: z.array(z[
    /* istanbul ignore next */
    "enum"](["morning", "afternoon", "evening"])).optional(),
    countries: z.array(z.string().length(2)).optional(),
    devices: z.array(z[
    /* istanbul ignore next */
    "enum"](["mobile", "tablet", "desktop"])).optional()
  }).optional(),
  compare: z[
  /* istanbul ignore next */
  "enum"](["previous_period", "same_period_last_year"]).optional()
}));
export var TrackEventRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[25]++, z.object({
  event: z[
  /* istanbul ignore next */
  "enum"](["page_view", "article_view", "newsletter_signup", "email_click", "search", "share", "download"]),
  properties: z.object({
    url: z.string().url().optional(),
    articleId: z.string().optional(),
    briefingType: z[
    /* istanbul ignore next */
    "enum"](["morning", "afternoon", "evening"]).optional(),
    source: z.string().optional(),
    campaign: z.string().optional(),
    customProperties: z.record(z.string(), z.any()).optional()
  }).optional(),
  sessionId: z.string(),
  userId: z.string().optional(),
  timestamp: z.string().datetime().optional()
}));

// Email campaign API endpoints
export var CreateCampaignRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[26]++, z.object({
  name: z.string().min(1).max(255),
  type: z[
  /* istanbul ignore next */
  "enum"](["briefing", "breaking_news", "weekly_digest", "welcome", "reengagement"]),
  subject: z.string().min(5).max(100),
  preheader: z.string().min(10).max(200).optional(),
  articleId: z.string().optional(),
  // For briefing campaigns
  customContent: z.object({
    html: z.string().min(100),
    text: z.string().min(100)
  }).optional(),
  targeting: z.object({
    includeStatuses: z.array(z[
    /* istanbul ignore next */
    "enum"](["active", "pending"]))[
    /* istanbul ignore next */
    "default"](["active"]),
    preferredTeams: z.array(z[
    /* istanbul ignore next */
    "enum"](["arsenal", "aston_villa", "bournemouth", "brentford", "brighton", "burnley", "chelsea", "crystal_palace", "everton", "fulham", "liverpool", "luton", "manchester_city", "manchester_united", "newcastle", "nottingham_forest", "sheffield_united", "tottenham", "west_ham", "wolves"])).optional(),
    emailFrequency: z.array(z[
    /* istanbul ignore next */
    "enum"](["all", "daily", "weekly", "major_only"])).optional()
  }).optional(),
  scheduledFor: z.string().datetime().optional()
}));
export var CampaignsQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[27]++, z.object(
/* istanbul ignore next */
_objectSpread(_objectSpread({
  type: z[
  /* istanbul ignore next */
  "enum"](["briefing", "breaking_news", "weekly_digest", "welcome", "reengagement"]).optional(),
  status: z[
  /* istanbul ignore next */
  "enum"](["draft", "scheduled", "sending", "sent", "cancelled"]).optional(),
  createdAfter: z.string().datetime().optional(),
  createdBefore: z.string().datetime().optional()
}, PaginationSchema.shape), {}, {
  sort: SortSchema.optional()
})));

// Content generation API endpoints
export var GenerateContentRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[28]++, z.object({
  briefingType: z[
  /* istanbul ignore next */
  "enum"](["morning", "afternoon", "evening"]),
  sourceTweetIds: z.array(z.string()).min(1).max(50),
  targetWordCount: z.number().min(200).max(2000)[
  /* istanbul ignore next */
  "default"](800),
  tone: z[
  /* istanbul ignore next */
  "enum"](["witty", "sarcastic", "informative", "humorous"])[
  /* istanbul ignore next */
  "default"]("witty"),
  includeImages: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](true),
  customInstructions: z.string().max(1000).optional(),
  draftMode: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](false) // If true, saves as draft instead of processing
}));
export var ValidateContentRequestSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[29]++, z.object({
  content: z.string().min(100),
  type: z[
  /* istanbul ignore next */
  "enum"](["article", "email_subject", "social_post"]),
  checks: z.array(z[
  /* istanbul ignore next */
  "enum"](["grammar", "brand_voice", "fact_check", "readability", "sentiment"])).optional()
}));

// Admin API endpoints (protected)
export var AdminStatsQuerySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[30]++, z.object({
  dateRange: DateRangeSchema,
  metrics: z.array(z[
  /* istanbul ignore next */
  "enum"](["system_health", "content_pipeline", "user_growth", "engagement", "revenue"]))[
  /* istanbul ignore next */
  "default"](["system_health"])
}));
export var SystemConfigUpdateSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[31]++, z.object({
  twitterApi: z.object({
    rateLimitBuffer: z.number().min(0).max(0.5).optional(),
    fetchInterval: z.number().min(300).max(3600).optional(),
    // 5min to 1hour
    targetAccounts: z.array(z.string()).max(20).optional()
  }).optional(),
  aiGeneration: z.object({
    model: z.string().optional(),
    temperature: z.number().min(0).max(2).optional(),
    maxTokens: z.number().min(100).max(4000).optional(),
    qualityThreshold: z.number().min(0).max(100).optional()
  }).optional(),
  emailService: z.object({
    provider: z[
    /* istanbul ignore next */
    "enum"](["convertkit", "mailerlite", "postmark"]).optional(),
    sendTimeOptimization: z[
    /* istanbul ignore next */
    "boolean"]().optional(),
    frequencyCapping: z[
    /* istanbul ignore next */
    "boolean"]().optional()
  }).optional()
}));

// Webhook schemas
export var WebhookEventSchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[32]++, z.object({
  id: z.string(),
  type: z[
  /* istanbul ignore next */
  "enum"](["article.published", "subscriber.confirmed", "subscriber.unsubscribed", "campaign.sent", "system.error"]),
  data: z.any(),
  timestamp: z.string().datetime(),
  source: z.string(),
  version: z.string()
}));
export var WebhookDeliverySchema =
/* istanbul ignore next */
(cov_ep6f66xoc().s[33]++, z.object({
  url: z.string().url(),
  event: WebhookEventSchema,
  attempt: z.number().min(1),
  response: z.object({
    status: z.number(),
    headers: z.record(z.string(), z.string()),
    body: z.string().optional(),
    duration: z.number().min(0) // milliseconds
  }).optional(),
  success: z[
  /* istanbul ignore next */
  "boolean"](),
  error: z.string().optional(),
  nextRetry: z.string().datetime().optional()
}));

// Export types

// Twitter API types

// Article API types

// Subscriber API types

// Analytics API types

// Campaign API types

// Content generation types

// Admin types

// Webhook types
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZXA2ZjY2eG9jIiwiYWN0dWFsQ292ZXJhZ2UiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwieiIsIlBhZ2luYXRpb25TY2hlbWEiLCJzIiwib2JqZWN0IiwicGFnZSIsIm51bWJlciIsIm1pbiIsImxpbWl0IiwibWF4Iiwib2Zmc2V0Iiwib3B0aW9uYWwiLCJ0b3RhbCIsImhhc01vcmUiLCJTb3J0U2NoZW1hIiwiZmllbGQiLCJzdHJpbmciLCJvcmRlciIsIkRhdGVSYW5nZVNjaGVtYSIsImZyb20iLCJkYXRldGltZSIsInRvIiwiQXBpUmVzcG9uc2VTY2hlbWEiLCJkYXRhU2NoZW1hIiwiZiIsInN1Y2Nlc3MiLCJkYXRhIiwibWVzc2FnZSIsImVycm9ycyIsImFycmF5IiwiY29kZSIsIm1ldGEiLCJ0aW1lc3RhbXAiLCJyZXF1ZXN0SWQiLCJ2ZXJzaW9uIiwicGFnaW5hdGlvbiIsIkFwaUVycm9yU2NoZW1hIiwibGl0ZXJhbCIsImVycm9yIiwiZGV0YWlscyIsImFueSIsIkhlYWx0aENoZWNrU2NoZW1hIiwic3RhdHVzIiwidXB0aW1lIiwic2VydmljZXMiLCJkYXRhYmFzZSIsInJlc3BvbnNlVGltZSIsImxhc3RDaGVjayIsInR3aXR0ZXIiLCJyYXRlTGltaXRSZW1haW5pbmciLCJhaSIsImVtYWlsIiwiVHdpdHRlclVzZXJMb29rdXBRdWVyeVNjaGVtYSIsInVzZXJuYW1lcyIsInRyYW5zZm9ybSIsInZhbCIsInNwbGl0IiwibWFwIiwidSIsInRyaW0iLCJ1c2VyX2ZpZWxkcyIsImV4cGFuc2lvbnMiLCJUd2l0dGVyVHdlZXRzUXVlcnlTY2hlbWEiLCJpZHMiLCJpZCIsInR3ZWV0X2ZpZWxkcyIsIm1lZGlhX2ZpZWxkcyIsIlR3aXR0ZXJVc2VyVGltZWxpbmVRdWVyeVNjaGVtYSIsInVzZXJfaWQiLCJtYXhfcmVzdWx0cyIsInNpbmNlX2lkIiwidW50aWxfaWQiLCJzdGFydF90aW1lIiwiZW5kX3RpbWUiLCJwYWdpbmF0aW9uX3Rva2VuIiwiQ3JlYXRlQXJ0aWNsZVJlcXVlc3RTY2hlbWEiLCJ0aXRsZSIsInN1YnRpdGxlIiwiYnJpZWZpbmdUeXBlIiwic291cmNlVHdlZXRJZHMiLCJhdXRvUHVibGlzaCIsInNjaGVkdWxlZEZvciIsImN1c3RvbUluc3RydWN0aW9ucyIsIlVwZGF0ZUFydGljbGVSZXF1ZXN0U2NoZW1hIiwicmV2aWV3Tm90ZXMiLCJBcnRpY2xlc1F1ZXJ5U2NoZW1hIiwicHVibGlzaGVkQWZ0ZXIiLCJwdWJsaXNoZWRCZWZvcmUiLCJzZWFyY2giLCJ0YWdzIiwic2hhcGUiLCJzb3J0IiwiU3Vic2NyaWJlUmVxdWVzdFNjaGVtYSIsInByZWZlcmVuY2VzIiwiZW1haWxGcmVxdWVuY3kiLCJwcmVmZXJyZWRUZWFtcyIsInJlY2VpdmVCcmVha2luZ05ld3MiLCJnZHByQ29uc2VudCIsInJlZmluZSIsInN1YnNjcmlwdGlvblNvdXJjZSIsInV0bVBhcmFtZXRlcnMiLCJzb3VyY2UiLCJtZWRpdW0iLCJjYW1wYWlnbiIsInRlcm0iLCJjb250ZW50IiwiVXBkYXRlU3Vic2NyaWJlclJlcXVlc3RTY2hlbWEiLCJlbWFpbEZvcm1hdCIsInRpbWV6b25lIiwiVW5zdWJzY3JpYmVSZXF1ZXN0U2NoZW1hIiwidG9rZW4iLCJyZWFzb24iLCJmZWVkYmFjayIsIlN1YnNjcmliZXJzUXVlcnlTY2hlbWEiLCJzdWJzY3JpYmVkQWZ0ZXIiLCJzdWJzY3JpYmVkQmVmb3JlIiwibGFzdEVuZ2FnZW1lbnRBZnRlciIsImxhc3RFbmdhZ2VtZW50QmVmb3JlIiwicHJlZmVycmVkVGVhbSIsIkFuYWx5dGljc1F1ZXJ5U2NoZW1hIiwibWV0cmljcyIsImRhdGVSYW5nZSIsImdyYW51bGFyaXR5IiwiZmlsdGVycyIsImFydGljbGVJZHMiLCJicmllZmluZ1R5cGVzIiwiY291bnRyaWVzIiwiZGV2aWNlcyIsImNvbXBhcmUiLCJUcmFja0V2ZW50UmVxdWVzdFNjaGVtYSIsImV2ZW50IiwicHJvcGVydGllcyIsInVybCIsImFydGljbGVJZCIsImN1c3RvbVByb3BlcnRpZXMiLCJyZWNvcmQiLCJzZXNzaW9uSWQiLCJ1c2VySWQiLCJDcmVhdGVDYW1wYWlnblJlcXVlc3RTY2hlbWEiLCJuYW1lIiwidHlwZSIsInN1YmplY3QiLCJwcmVoZWFkZXIiLCJjdXN0b21Db250ZW50IiwiaHRtbCIsInRleHQiLCJ0YXJnZXRpbmciLCJpbmNsdWRlU3RhdHVzZXMiLCJDYW1wYWlnbnNRdWVyeVNjaGVtYSIsImNyZWF0ZWRBZnRlciIsImNyZWF0ZWRCZWZvcmUiLCJHZW5lcmF0ZUNvbnRlbnRSZXF1ZXN0U2NoZW1hIiwidGFyZ2V0V29yZENvdW50IiwidG9uZSIsImluY2x1ZGVJbWFnZXMiLCJkcmFmdE1vZGUiLCJWYWxpZGF0ZUNvbnRlbnRSZXF1ZXN0U2NoZW1hIiwiY2hlY2tzIiwiQWRtaW5TdGF0c1F1ZXJ5U2NoZW1hIiwiU3lzdGVtQ29uZmlnVXBkYXRlU2NoZW1hIiwidHdpdHRlckFwaSIsInJhdGVMaW1pdEJ1ZmZlciIsImZldGNoSW50ZXJ2YWwiLCJ0YXJnZXRBY2NvdW50cyIsImFpR2VuZXJhdGlvbiIsIm1vZGVsIiwidGVtcGVyYXR1cmUiLCJtYXhUb2tlbnMiLCJxdWFsaXR5VGhyZXNob2xkIiwiZW1haWxTZXJ2aWNlIiwicHJvdmlkZXIiLCJzZW5kVGltZU9wdGltaXphdGlvbiIsImZyZXF1ZW5jeUNhcHBpbmciLCJXZWJob29rRXZlbnRTY2hlbWEiLCJXZWJob29rRGVsaXZlcnlTY2hlbWEiLCJhdHRlbXB0IiwicmVzcG9uc2UiLCJoZWFkZXJzIiwiYm9keSIsImR1cmF0aW9uIiwibmV4dFJldHJ5Il0sInNvdXJjZXMiOlsiYXBpLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5cbi8qKlxuICogQVBJIENvbnRyYWN0IFNjaGVtYXNcbiAqIFZhbGlkYXRlcyByZXF1ZXN0L3Jlc3BvbnNlIHBhdHRlcm5zIGZvciBhbGwgQVBJIGVuZHBvaW50c1xuICovXG5cbi8vIENvbW1vbiBBUEkgcGF0dGVybnNcbmV4cG9ydCBjb25zdCBQYWdpbmF0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICBwYWdlOiB6Lm51bWJlcigpLm1pbigxKS5kZWZhdWx0KDEpLFxuICBsaW1pdDogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCgxMCksXG4gIG9mZnNldDogei5udW1iZXIoKS5taW4oMCkub3B0aW9uYWwoKSxcbiAgdG90YWw6IHoubnVtYmVyKCkubWluKDApLm9wdGlvbmFsKCksXG4gIGhhc01vcmU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFNvcnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGZpZWxkOiB6LnN0cmluZygpLFxuICBvcmRlcjogei5lbnVtKFtcImFzY1wiLCBcImRlc2NcIl0pLmRlZmF1bHQoXCJkZXNjXCIpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBEYXRlUmFuZ2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGZyb206IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICB0bzogei5zdHJpbmcoKS5kYXRldGltZSgpLm9wdGlvbmFsKCksXG59KTtcblxuLy8gU3RhbmRhcmQgQVBJIHJlc3BvbnNlIHdyYXBwZXJcbmV4cG9ydCBjb25zdCBBcGlSZXNwb25zZVNjaGVtYSA9IDxUIGV4dGVuZHMgei5ab2RUeXBlQW55PihkYXRhU2NoZW1hOiBUKSA9PlxuICB6Lm9iamVjdCh7XG4gICAgc3VjY2Vzczogei5ib29sZWFuKCksXG4gICAgZGF0YTogZGF0YVNjaGVtYS5vcHRpb25hbCgpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBlcnJvcnM6IHpcbiAgICAgIC5hcnJheShcbiAgICAgICAgei5vYmplY3Qoe1xuICAgICAgICAgIGZpZWxkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICAgICAgICBjb2RlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAub3B0aW9uYWwoKSxcbiAgICBtZXRhOiB6Lm9iamVjdCh7XG4gICAgICB0aW1lc3RhbXA6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgICAgIHZlcnNpb246IHouc3RyaW5nKCksXG4gICAgICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgfSksXG4gIH0pO1xuXG4vLyBFcnJvciByZXNwb25zZSBzY2hlbWFcbmV4cG9ydCBjb25zdCBBcGlFcnJvclNjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3VjY2Vzczogei5saXRlcmFsKGZhbHNlKSxcbiAgZXJyb3I6IHoub2JqZWN0KHtcbiAgICBjb2RlOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgZGV0YWlsczogei5hbnkoKS5vcHRpb25hbCgpLFxuICAgIGZpZWxkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIH0pLFxuICBtZXRhOiB6Lm9iamVjdCh7XG4gICAgdGltZXN0YW1wOiB6LnN0cmluZygpLmRhdGV0aW1lKCksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIHZlcnNpb246IHouc3RyaW5nKCksXG4gIH0pLFxufSk7XG5cbi8vIEhlYWx0aCBjaGVjayBzY2hlbWFcbmV4cG9ydCBjb25zdCBIZWFsdGhDaGVja1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3RhdHVzOiB6LmVudW0oW1wiaGVhbHRoeVwiLCBcImRlZ3JhZGVkXCIsIFwidW5oZWFsdGh5XCJdKSxcbiAgdGltZXN0YW1wOiB6LnN0cmluZygpLmRhdGV0aW1lKCksXG4gIHZlcnNpb246IHouc3RyaW5nKCksXG4gIHVwdGltZTogei5udW1iZXIoKS5taW4oMCksIC8vIHNlY29uZHNcbiAgc2VydmljZXM6IHoub2JqZWN0KHtcbiAgICBkYXRhYmFzZTogei5vYmplY3Qoe1xuICAgICAgc3RhdHVzOiB6LmVudW0oW1widXBcIiwgXCJkb3duXCIsIFwiZGVncmFkZWRcIl0pLFxuICAgICAgcmVzcG9uc2VUaW1lOiB6Lm51bWJlcigpLm1pbigwKS5vcHRpb25hbCgpLFxuICAgICAgbGFzdENoZWNrOiB6LnN0cmluZygpLmRhdGV0aW1lKCksXG4gICAgfSksXG4gICAgdHdpdHRlcjogei5vYmplY3Qoe1xuICAgICAgc3RhdHVzOiB6LmVudW0oW1widXBcIiwgXCJkb3duXCIsIFwiZGVncmFkZWRcIl0pLFxuICAgICAgcmVzcG9uc2VUaW1lOiB6Lm51bWJlcigpLm1pbigwKS5vcHRpb25hbCgpLFxuICAgICAgcmF0ZUxpbWl0UmVtYWluaW5nOiB6Lm51bWJlcigpLm1pbigwKS5vcHRpb25hbCgpLFxuICAgICAgbGFzdENoZWNrOiB6LnN0cmluZygpLmRhdGV0aW1lKCksXG4gICAgfSksXG4gICAgYWk6IHoub2JqZWN0KHtcbiAgICAgIHN0YXR1czogei5lbnVtKFtcInVwXCIsIFwiZG93blwiLCBcImRlZ3JhZGVkXCJdKSxcbiAgICAgIHJlc3BvbnNlVGltZTogei5udW1iZXIoKS5taW4oMCkub3B0aW9uYWwoKSxcbiAgICAgIGxhc3RDaGVjazogei5zdHJpbmcoKS5kYXRldGltZSgpLFxuICAgIH0pLFxuICAgIGVtYWlsOiB6Lm9iamVjdCh7XG4gICAgICBzdGF0dXM6IHouZW51bShbXCJ1cFwiLCBcImRvd25cIiwgXCJkZWdyYWRlZFwiXSksXG4gICAgICByZXNwb25zZVRpbWU6IHoubnVtYmVyKCkubWluKDApLm9wdGlvbmFsKCksXG4gICAgICBsYXN0Q2hlY2s6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgICB9KSxcbiAgfSksXG59KTtcblxuLy8gVHdpdHRlciBBUEkgZW5kcG9pbnRzXG5leHBvcnQgY29uc3QgVHdpdHRlclVzZXJMb29rdXBRdWVyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdXNlcm5hbWVzOiB6LnN0cmluZygpLnRyYW5zZm9ybSgodmFsKSA9PiB2YWwuc3BsaXQoXCIsXCIpLm1hcCgodSkgPT4gdS50cmltKCkpKSxcbiAgdXNlcl9maWVsZHM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZXhwYW5zaW9uczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUd2l0dGVyVHdlZXRzUXVlcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkczogei5zdHJpbmcoKS50cmFuc2Zvcm0oKHZhbCkgPT4gdmFsLnNwbGl0KFwiLFwiKS5tYXAoKGlkKSA9PiBpZC50cmltKCkpKSxcbiAgdHdlZXRfZmllbGRzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIHVzZXJfZmllbGRzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIG1lZGlhX2ZpZWxkczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBleHBhbnNpb25zOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFR3aXR0ZXJVc2VyVGltZWxpbmVRdWVyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdXNlcl9pZDogei5zdHJpbmcoKSxcbiAgbWF4X3Jlc3VsdHM6IHoubnVtYmVyKCkubWluKDUpLm1heCgxMDApLmRlZmF1bHQoMTApLFxuICBzaW5jZV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB1bnRpbF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzdGFydF90aW1lOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgZW5kX3RpbWU6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICB0d2VldF9maWVsZHM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgdXNlcl9maWVsZHM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbWVkaWFfZmllbGRzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGV4cGFuc2lvbnM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcGFnaW5hdGlvbl90b2tlbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEFydGljbGUgQVBJIGVuZHBvaW50c1xuZXhwb3J0IGNvbnN0IENyZWF0ZUFydGljbGVSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMTApLm1heCgyNTUpLFxuICBzdWJ0aXRsZTogei5zdHJpbmcoKS5taW4oMTApLm1heCg1MDApLm9wdGlvbmFsKCksXG4gIGJyaWVmaW5nVHlwZTogei5lbnVtKFtcIm1vcm5pbmdcIiwgXCJhZnRlcm5vb25cIiwgXCJldmVuaW5nXCJdKSxcbiAgc291cmNlVHdlZXRJZHM6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLm1heCg1MCksXG4gIGF1dG9QdWJsaXNoOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgc2NoZWR1bGVkRm9yOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgY3VzdG9tSW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBVcGRhdGVBcnRpY2xlUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdGl0bGU6IHouc3RyaW5nKCkubWluKDEwKS5tYXgoMjU1KS5vcHRpb25hbCgpLFxuICBzdWJ0aXRsZTogei5zdHJpbmcoKS5taW4oMTApLm1heCg1MDApLm9wdGlvbmFsKCksXG4gIHN0YXR1czogelxuICAgIC5lbnVtKFtcImRyYWZ0XCIsIFwidW5kZXJfcmV2aWV3XCIsIFwiYXBwcm92ZWRcIiwgXCJwdWJsaXNoZWRcIiwgXCJhcmNoaXZlZFwiXSlcbiAgICAub3B0aW9uYWwoKSxcbiAgc2NoZWR1bGVkRm9yOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgcmV2aWV3Tm90ZXM6IHouc3RyaW5nKCkubWF4KDEwMDApLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IEFydGljbGVzUXVlcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGJyaWVmaW5nVHlwZTogei5lbnVtKFtcIm1vcm5pbmdcIiwgXCJhZnRlcm5vb25cIiwgXCJldmVuaW5nXCJdKS5vcHRpb25hbCgpLFxuICBzdGF0dXM6IHpcbiAgICAuZW51bShbXG4gICAgICBcImRyYWZ0XCIsXG4gICAgICBcImFpX2dlbmVyYXRlZFwiLFxuICAgICAgXCJ1bmRlcl9yZXZpZXdcIixcbiAgICAgIFwiYXBwcm92ZWRcIixcbiAgICAgIFwicHVibGlzaGVkXCIsXG4gICAgICBcImFyY2hpdmVkXCIsXG4gICAgXSlcbiAgICAub3B0aW9uYWwoKSxcbiAgcHVibGlzaGVkQWZ0ZXI6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICBwdWJsaXNoZWRCZWZvcmU6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICBzZWFyY2g6IHouc3RyaW5nKCkubWluKDMpLm1heCgxMDApLm9wdGlvbmFsKCksXG4gIHRhZ3M6IHpcbiAgICAuc3RyaW5nKClcbiAgICAudHJhbnNmb3JtKCh2YWwpID0+IHZhbC5zcGxpdChcIixcIikubWFwKCh0KSA9PiB0LnRyaW0oKSkpXG4gICAgLm9wdGlvbmFsKCksXG4gIC4uLlBhZ2luYXRpb25TY2hlbWEuc2hhcGUsXG4gIHNvcnQ6IFNvcnRTY2hlbWEub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyBTdWJzY3JpYmVyIEFQSSBlbmRwb2ludHNcbmV4cG9ydCBjb25zdCBTdWJzY3JpYmVSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xuICBlbWFpbDogei5zdHJpbmcoKS5lbWFpbCgpLFxuICBwcmVmZXJlbmNlczogelxuICAgIC5vYmplY3Qoe1xuICAgICAgZW1haWxGcmVxdWVuY3k6IHpcbiAgICAgICAgLmVudW0oW1wiYWxsXCIsIFwiZGFpbHlcIiwgXCJ3ZWVrbHlcIiwgXCJtYWpvcl9vbmx5XCJdKVxuICAgICAgICAuZGVmYXVsdChcImFsbFwiKSxcbiAgICAgIHByZWZlcnJlZFRlYW1zOiB6XG4gICAgICAgIC5hcnJheShcbiAgICAgICAgICB6LmVudW0oW1xuICAgICAgICAgICAgXCJhcnNlbmFsXCIsXG4gICAgICAgICAgICBcImFzdG9uX3ZpbGxhXCIsXG4gICAgICAgICAgICBcImJvdXJuZW1vdXRoXCIsXG4gICAgICAgICAgICBcImJyZW50Zm9yZFwiLFxuICAgICAgICAgICAgXCJicmlnaHRvblwiLFxuICAgICAgICAgICAgXCJidXJubGV5XCIsXG4gICAgICAgICAgICBcImNoZWxzZWFcIixcbiAgICAgICAgICAgIFwiY3J5c3RhbF9wYWxhY2VcIixcbiAgICAgICAgICAgIFwiZXZlcnRvblwiLFxuICAgICAgICAgICAgXCJmdWxoYW1cIixcbiAgICAgICAgICAgIFwibGl2ZXJwb29sXCIsXG4gICAgICAgICAgICBcImx1dG9uXCIsXG4gICAgICAgICAgICBcIm1hbmNoZXN0ZXJfY2l0eVwiLFxuICAgICAgICAgICAgXCJtYW5jaGVzdGVyX3VuaXRlZFwiLFxuICAgICAgICAgICAgXCJuZXdjYXN0bGVcIixcbiAgICAgICAgICAgIFwibm90dGluZ2hhbV9mb3Jlc3RcIixcbiAgICAgICAgICAgIFwic2hlZmZpZWxkX3VuaXRlZFwiLFxuICAgICAgICAgICAgXCJ0b3R0ZW5oYW1cIixcbiAgICAgICAgICAgIFwid2VzdF9oYW1cIixcbiAgICAgICAgICAgIFwid29sdmVzXCIsXG4gICAgICAgICAgXSlcbiAgICAgICAgKVxuICAgICAgICAubWF4KDUpXG4gICAgICAgIC5kZWZhdWx0KFtdKSxcbiAgICAgIHJlY2VpdmVCcmVha2luZ05ld3M6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgZ2RwckNvbnNlbnQ6IHouYm9vbGVhbigpLnJlZmluZSgodmFsKSA9PiB2YWwgPT09IHRydWUsIHtcbiAgICBtZXNzYWdlOiBcIkdEUFIgY29uc2VudCBpcyByZXF1aXJlZFwiLFxuICB9KSxcbiAgc3Vic2NyaXB0aW9uU291cmNlOiB6XG4gICAgLmVudW0oW1xuICAgICAgXCJ3ZWJzaXRlXCIsXG4gICAgICBcInNvY2lhbF9tZWRpYVwiLFxuICAgICAgXCJyZWZlcnJhbFwiLFxuICAgICAgXCJvcmdhbmljXCIsXG4gICAgICBcInBhaWRfYWRcIixcbiAgICAgIFwib3RoZXJcIixcbiAgICBdKVxuICAgIC5kZWZhdWx0KFwid2Vic2l0ZVwiKSxcbiAgdXRtUGFyYW1ldGVyczogelxuICAgIC5vYmplY3Qoe1xuICAgICAgc291cmNlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICBtZWRpdW06IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIGNhbXBhaWduOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICB0ZXJtOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICBjb250ZW50OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVXBkYXRlU3Vic2NyaWJlclJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHByZWZlcmVuY2VzOiB6XG4gICAgLm9iamVjdCh7XG4gICAgICBlbWFpbEZyZXF1ZW5jeTogelxuICAgICAgICAuZW51bShbXCJhbGxcIiwgXCJkYWlseVwiLCBcIndlZWtseVwiLCBcIm1ham9yX29ubHlcIl0pXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgICAgcHJlZmVycmVkVGVhbXM6IHpcbiAgICAgICAgLmFycmF5KFxuICAgICAgICAgIHouZW51bShbXG4gICAgICAgICAgICBcImFyc2VuYWxcIixcbiAgICAgICAgICAgIFwiYXN0b25fdmlsbGFcIixcbiAgICAgICAgICAgIFwiYm91cm5lbW91dGhcIixcbiAgICAgICAgICAgIFwiYnJlbnRmb3JkXCIsXG4gICAgICAgICAgICBcImJyaWdodG9uXCIsXG4gICAgICAgICAgICBcImJ1cm5sZXlcIixcbiAgICAgICAgICAgIFwiY2hlbHNlYVwiLFxuICAgICAgICAgICAgXCJjcnlzdGFsX3BhbGFjZVwiLFxuICAgICAgICAgICAgXCJldmVydG9uXCIsXG4gICAgICAgICAgICBcImZ1bGhhbVwiLFxuICAgICAgICAgICAgXCJsaXZlcnBvb2xcIixcbiAgICAgICAgICAgIFwibHV0b25cIixcbiAgICAgICAgICAgIFwibWFuY2hlc3Rlcl9jaXR5XCIsXG4gICAgICAgICAgICBcIm1hbmNoZXN0ZXJfdW5pdGVkXCIsXG4gICAgICAgICAgICBcIm5ld2Nhc3RsZVwiLFxuICAgICAgICAgICAgXCJub3R0aW5naGFtX2ZvcmVzdFwiLFxuICAgICAgICAgICAgXCJzaGVmZmllbGRfdW5pdGVkXCIsXG4gICAgICAgICAgICBcInRvdHRlbmhhbVwiLFxuICAgICAgICAgICAgXCJ3ZXN0X2hhbVwiLFxuICAgICAgICAgICAgXCJ3b2x2ZXNcIixcbiAgICAgICAgICBdKVxuICAgICAgICApXG4gICAgICAgIC5tYXgoNSlcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgICByZWNlaXZlQnJlYWtpbmdOZXdzOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgICAgZW1haWxGb3JtYXQ6IHouZW51bShbXCJodG1sXCIsIFwidGV4dFwiXSkub3B0aW9uYWwoKSxcbiAgICAgIHRpbWV6b25lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgVW5zdWJzY3JpYmVSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xuICB0b2tlbjogei5zdHJpbmcoKS5taW4oMzIpLCAvLyBVbnN1YnNjcmliZSB0b2tlblxuICByZWFzb246IHpcbiAgICAuZW51bShbXG4gICAgICBcInRvb19mcmVxdWVudFwiLFxuICAgICAgXCJub3RfcmVsZXZhbnRcIixcbiAgICAgIFwicG9vcl9xdWFsaXR5XCIsXG4gICAgICBcImNoYW5nZWRfZW1haWxcIixcbiAgICAgIFwicHJpdmFjeV9jb25jZXJuc1wiLFxuICAgICAgXCJvdGhlclwiLFxuICAgIF0pXG4gICAgLm9wdGlvbmFsKCksXG4gIGZlZWRiYWNrOiB6LnN0cmluZygpLm1heCg1MDApLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFN1YnNjcmliZXJzUXVlcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHN0YXR1czogelxuICAgIC5lbnVtKFtcbiAgICAgIFwicGVuZGluZ1wiLFxuICAgICAgXCJhY3RpdmVcIixcbiAgICAgIFwicGF1c2VkXCIsXG4gICAgICBcInVuc3Vic2NyaWJlZFwiLFxuICAgICAgXCJib3VuY2VkXCIsXG4gICAgICBcImNvbXBsYWluZWRcIixcbiAgICBdKVxuICAgIC5vcHRpb25hbCgpLFxuICBzdWJzY3JpYmVkQWZ0ZXI6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICBzdWJzY3JpYmVkQmVmb3JlOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgbGFzdEVuZ2FnZW1lbnRBZnRlcjogei5zdHJpbmcoKS5kYXRldGltZSgpLm9wdGlvbmFsKCksXG4gIGxhc3RFbmdhZ2VtZW50QmVmb3JlOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgc291cmNlOiB6XG4gICAgLmVudW0oW1xuICAgICAgXCJ3ZWJzaXRlXCIsXG4gICAgICBcInNvY2lhbF9tZWRpYVwiLFxuICAgICAgXCJyZWZlcnJhbFwiLFxuICAgICAgXCJvcmdhbmljXCIsXG4gICAgICBcInBhaWRfYWRcIixcbiAgICAgIFwib3RoZXJcIixcbiAgICBdKVxuICAgIC5vcHRpb25hbCgpLFxuICBwcmVmZXJyZWRUZWFtOiB6XG4gICAgLmVudW0oW1xuICAgICAgXCJhcnNlbmFsXCIsXG4gICAgICBcImFzdG9uX3ZpbGxhXCIsXG4gICAgICBcImJvdXJuZW1vdXRoXCIsXG4gICAgICBcImJyZW50Zm9yZFwiLFxuICAgICAgXCJicmlnaHRvblwiLFxuICAgICAgXCJidXJubGV5XCIsXG4gICAgICBcImNoZWxzZWFcIixcbiAgICAgIFwiY3J5c3RhbF9wYWxhY2VcIixcbiAgICAgIFwiZXZlcnRvblwiLFxuICAgICAgXCJmdWxoYW1cIixcbiAgICAgIFwibGl2ZXJwb29sXCIsXG4gICAgICBcImx1dG9uXCIsXG4gICAgICBcIm1hbmNoZXN0ZXJfY2l0eVwiLFxuICAgICAgXCJtYW5jaGVzdGVyX3VuaXRlZFwiLFxuICAgICAgXCJuZXdjYXN0bGVcIixcbiAgICAgIFwibm90dGluZ2hhbV9mb3Jlc3RcIixcbiAgICAgIFwic2hlZmZpZWxkX3VuaXRlZFwiLFxuICAgICAgXCJ0b3R0ZW5oYW1cIixcbiAgICAgIFwid2VzdF9oYW1cIixcbiAgICAgIFwid29sdmVzXCIsXG4gICAgXSlcbiAgICAub3B0aW9uYWwoKSxcbiAgLi4uUGFnaW5hdGlvblNjaGVtYS5zaGFwZSxcbiAgc29ydDogU29ydFNjaGVtYS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEFuYWx5dGljcyBBUEkgZW5kcG9pbnRzXG5leHBvcnQgY29uc3QgQW5hbHl0aWNzUXVlcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG1ldHJpY3M6IHouYXJyYXkoXG4gICAgei5lbnVtKFtcImNvbnRlbnRcIiwgXCJhdWRpZW5jZVwiLCBcImVuZ2FnZW1lbnRcIiwgXCJ0ZWNobmljYWxcIiwgXCJidXNpbmVzc1wiXSlcbiAgKSxcbiAgZGF0ZVJhbmdlOiBEYXRlUmFuZ2VTY2hlbWEsXG4gIGdyYW51bGFyaXR5OiB6LmVudW0oW1wiaG91clwiLCBcImRheVwiLCBcIndlZWtcIiwgXCJtb250aFwiXSkuZGVmYXVsdChcImRheVwiKSxcbiAgZmlsdGVyczogelxuICAgIC5vYmplY3Qoe1xuICAgICAgYXJ0aWNsZUlkczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLFxuICAgICAgYnJpZWZpbmdUeXBlczogelxuICAgICAgICAuYXJyYXkoei5lbnVtKFtcIm1vcm5pbmdcIiwgXCJhZnRlcm5vb25cIiwgXCJldmVuaW5nXCJdKSlcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgICBjb3VudHJpZXM6IHouYXJyYXkoei5zdHJpbmcoKS5sZW5ndGgoMikpLm9wdGlvbmFsKCksXG4gICAgICBkZXZpY2VzOiB6LmFycmF5KHouZW51bShbXCJtb2JpbGVcIiwgXCJ0YWJsZXRcIiwgXCJkZXNrdG9wXCJdKSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgIC5vcHRpb25hbCgpLFxuICBjb21wYXJlOiB6LmVudW0oW1wicHJldmlvdXNfcGVyaW9kXCIsIFwic2FtZV9wZXJpb2RfbGFzdF95ZWFyXCJdKS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBUcmFja0V2ZW50UmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZXZlbnQ6IHouZW51bShbXG4gICAgXCJwYWdlX3ZpZXdcIixcbiAgICBcImFydGljbGVfdmlld1wiLFxuICAgIFwibmV3c2xldHRlcl9zaWdudXBcIixcbiAgICBcImVtYWlsX2NsaWNrXCIsXG4gICAgXCJzZWFyY2hcIixcbiAgICBcInNoYXJlXCIsXG4gICAgXCJkb3dubG9hZFwiLFxuICBdKSxcbiAgcHJvcGVydGllczogelxuICAgIC5vYmplY3Qoe1xuICAgICAgdXJsOiB6LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCksXG4gICAgICBhcnRpY2xlSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIGJyaWVmaW5nVHlwZTogei5lbnVtKFtcIm1vcm5pbmdcIiwgXCJhZnRlcm5vb25cIiwgXCJldmVuaW5nXCJdKS5vcHRpb25hbCgpLFxuICAgICAgc291cmNlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICBjYW1wYWlnbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgY3VzdG9tUHJvcGVydGllczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgIC5vcHRpb25hbCgpLFxuICBzZXNzaW9uSWQ6IHouc3RyaW5nKCksXG4gIHVzZXJJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB0aW1lc3RhbXA6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIEVtYWlsIGNhbXBhaWduIEFQSSBlbmRwb2ludHNcbmV4cG9ydCBjb25zdCBDcmVhdGVDYW1wYWlnblJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLFxuICB0eXBlOiB6LmVudW0oW1xuICAgIFwiYnJpZWZpbmdcIixcbiAgICBcImJyZWFraW5nX25ld3NcIixcbiAgICBcIndlZWtseV9kaWdlc3RcIixcbiAgICBcIndlbGNvbWVcIixcbiAgICBcInJlZW5nYWdlbWVudFwiLFxuICBdKSxcbiAgc3ViamVjdDogei5zdHJpbmcoKS5taW4oNSkubWF4KDEwMCksXG4gIHByZWhlYWRlcjogei5zdHJpbmcoKS5taW4oMTApLm1heCgyMDApLm9wdGlvbmFsKCksXG4gIGFydGljbGVJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLCAvLyBGb3IgYnJpZWZpbmcgY2FtcGFpZ25zXG4gIGN1c3RvbUNvbnRlbnQ6IHpcbiAgICAub2JqZWN0KHtcbiAgICAgIGh0bWw6IHouc3RyaW5nKCkubWluKDEwMCksXG4gICAgICB0ZXh0OiB6LnN0cmluZygpLm1pbigxMDApLFxuICAgIH0pXG4gICAgLm9wdGlvbmFsKCksXG4gIHRhcmdldGluZzogelxuICAgIC5vYmplY3Qoe1xuICAgICAgaW5jbHVkZVN0YXR1c2VzOiB6XG4gICAgICAgIC5hcnJheSh6LmVudW0oW1wiYWN0aXZlXCIsIFwicGVuZGluZ1wiXSkpXG4gICAgICAgIC5kZWZhdWx0KFtcImFjdGl2ZVwiXSksXG4gICAgICBwcmVmZXJyZWRUZWFtczogelxuICAgICAgICAuYXJyYXkoXG4gICAgICAgICAgei5lbnVtKFtcbiAgICAgICAgICAgIFwiYXJzZW5hbFwiLFxuICAgICAgICAgICAgXCJhc3Rvbl92aWxsYVwiLFxuICAgICAgICAgICAgXCJib3VybmVtb3V0aFwiLFxuICAgICAgICAgICAgXCJicmVudGZvcmRcIixcbiAgICAgICAgICAgIFwiYnJpZ2h0b25cIixcbiAgICAgICAgICAgIFwiYnVybmxleVwiLFxuICAgICAgICAgICAgXCJjaGVsc2VhXCIsXG4gICAgICAgICAgICBcImNyeXN0YWxfcGFsYWNlXCIsXG4gICAgICAgICAgICBcImV2ZXJ0b25cIixcbiAgICAgICAgICAgIFwiZnVsaGFtXCIsXG4gICAgICAgICAgICBcImxpdmVycG9vbFwiLFxuICAgICAgICAgICAgXCJsdXRvblwiLFxuICAgICAgICAgICAgXCJtYW5jaGVzdGVyX2NpdHlcIixcbiAgICAgICAgICAgIFwibWFuY2hlc3Rlcl91bml0ZWRcIixcbiAgICAgICAgICAgIFwibmV3Y2FzdGxlXCIsXG4gICAgICAgICAgICBcIm5vdHRpbmdoYW1fZm9yZXN0XCIsXG4gICAgICAgICAgICBcInNoZWZmaWVsZF91bml0ZWRcIixcbiAgICAgICAgICAgIFwidG90dGVuaGFtXCIsXG4gICAgICAgICAgICBcIndlc3RfaGFtXCIsXG4gICAgICAgICAgICBcIndvbHZlc1wiLFxuICAgICAgICAgIF0pXG4gICAgICAgIClcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgICBlbWFpbEZyZXF1ZW5jeTogelxuICAgICAgICAuYXJyYXkoei5lbnVtKFtcImFsbFwiLCBcImRhaWx5XCIsIFwid2Vla2x5XCIsIFwibWFqb3Jfb25seVwiXSkpXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgIH0pXG4gICAgLm9wdGlvbmFsKCksXG4gIHNjaGVkdWxlZEZvcjogei5zdHJpbmcoKS5kYXRldGltZSgpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IENhbXBhaWduc1F1ZXJ5U2NoZW1hID0gei5vYmplY3Qoe1xuICB0eXBlOiB6XG4gICAgLmVudW0oW1xuICAgICAgXCJicmllZmluZ1wiLFxuICAgICAgXCJicmVha2luZ19uZXdzXCIsXG4gICAgICBcIndlZWtseV9kaWdlc3RcIixcbiAgICAgIFwid2VsY29tZVwiLFxuICAgICAgXCJyZWVuZ2FnZW1lbnRcIixcbiAgICBdKVxuICAgIC5vcHRpb25hbCgpLFxuICBzdGF0dXM6IHpcbiAgICAuZW51bShbXCJkcmFmdFwiLCBcInNjaGVkdWxlZFwiLCBcInNlbmRpbmdcIiwgXCJzZW50XCIsIFwiY2FuY2VsbGVkXCJdKVxuICAgIC5vcHRpb25hbCgpLFxuICBjcmVhdGVkQWZ0ZXI6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKS5vcHRpb25hbCgpLFxuICBjcmVhdGVkQmVmb3JlOiB6LnN0cmluZygpLmRhdGV0aW1lKCkub3B0aW9uYWwoKSxcbiAgLi4uUGFnaW5hdGlvblNjaGVtYS5zaGFwZSxcbiAgc29ydDogU29ydFNjaGVtYS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIENvbnRlbnQgZ2VuZXJhdGlvbiBBUEkgZW5kcG9pbnRzXG5leHBvcnQgY29uc3QgR2VuZXJhdGVDb250ZW50UmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgYnJpZWZpbmdUeXBlOiB6LmVudW0oW1wibW9ybmluZ1wiLCBcImFmdGVybm9vblwiLCBcImV2ZW5pbmdcIl0pLFxuICBzb3VyY2VUd2VldElkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSkubWF4KDUwKSxcbiAgdGFyZ2V0V29yZENvdW50OiB6Lm51bWJlcigpLm1pbigyMDApLm1heCgyMDAwKS5kZWZhdWx0KDgwMCksXG4gIHRvbmU6IHpcbiAgICAuZW51bShbXCJ3aXR0eVwiLCBcInNhcmNhc3RpY1wiLCBcImluZm9ybWF0aXZlXCIsIFwiaHVtb3JvdXNcIl0pXG4gICAgLmRlZmF1bHQoXCJ3aXR0eVwiKSxcbiAgaW5jbHVkZUltYWdlczogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgY3VzdG9tSW5zdHJ1Y3Rpb25zOiB6LnN0cmluZygpLm1heCgxMDAwKS5vcHRpb25hbCgpLFxuICBkcmFmdE1vZGU6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLCAvLyBJZiB0cnVlLCBzYXZlcyBhcyBkcmFmdCBpbnN0ZWFkIG9mIHByb2Nlc3Npbmdcbn0pO1xuXG5leHBvcnQgY29uc3QgVmFsaWRhdGVDb250ZW50UmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgY29udGVudDogei5zdHJpbmcoKS5taW4oMTAwKSxcbiAgdHlwZTogei5lbnVtKFtcImFydGljbGVcIiwgXCJlbWFpbF9zdWJqZWN0XCIsIFwic29jaWFsX3Bvc3RcIl0pLFxuICBjaGVja3M6IHpcbiAgICAuYXJyYXkoXG4gICAgICB6LmVudW0oW1xuICAgICAgICBcImdyYW1tYXJcIixcbiAgICAgICAgXCJicmFuZF92b2ljZVwiLFxuICAgICAgICBcImZhY3RfY2hlY2tcIixcbiAgICAgICAgXCJyZWFkYWJpbGl0eVwiLFxuICAgICAgICBcInNlbnRpbWVudFwiLFxuICAgICAgXSlcbiAgICApXG4gICAgLm9wdGlvbmFsKCksXG59KTtcblxuLy8gQWRtaW4gQVBJIGVuZHBvaW50cyAocHJvdGVjdGVkKVxuZXhwb3J0IGNvbnN0IEFkbWluU3RhdHNRdWVyeVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGF0ZVJhbmdlOiBEYXRlUmFuZ2VTY2hlbWEsXG4gIG1ldHJpY3M6IHpcbiAgICAuYXJyYXkoXG4gICAgICB6LmVudW0oW1xuICAgICAgICBcInN5c3RlbV9oZWFsdGhcIixcbiAgICAgICAgXCJjb250ZW50X3BpcGVsaW5lXCIsXG4gICAgICAgIFwidXNlcl9ncm93dGhcIixcbiAgICAgICAgXCJlbmdhZ2VtZW50XCIsXG4gICAgICAgIFwicmV2ZW51ZVwiLFxuICAgICAgXSlcbiAgICApXG4gICAgLmRlZmF1bHQoW1wic3lzdGVtX2hlYWx0aFwiXSksXG59KTtcblxuZXhwb3J0IGNvbnN0IFN5c3RlbUNvbmZpZ1VwZGF0ZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdHdpdHRlckFwaTogelxuICAgIC5vYmplY3Qoe1xuICAgICAgcmF0ZUxpbWl0QnVmZmVyOiB6Lm51bWJlcigpLm1pbigwKS5tYXgoMC41KS5vcHRpb25hbCgpLFxuICAgICAgZmV0Y2hJbnRlcnZhbDogei5udW1iZXIoKS5taW4oMzAwKS5tYXgoMzYwMCkub3B0aW9uYWwoKSwgLy8gNW1pbiB0byAxaG91clxuICAgICAgdGFyZ2V0QWNjb3VudHM6IHouYXJyYXkoei5zdHJpbmcoKSkubWF4KDIwKS5vcHRpb25hbCgpLFxuICAgIH0pXG4gICAgLm9wdGlvbmFsKCksXG4gIGFpR2VuZXJhdGlvbjogelxuICAgIC5vYmplY3Qoe1xuICAgICAgbW9kZWw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIHRlbXBlcmF0dXJlOiB6Lm51bWJlcigpLm1pbigwKS5tYXgoMikub3B0aW9uYWwoKSxcbiAgICAgIG1heFRva2Vuczogei5udW1iZXIoKS5taW4oMTAwKS5tYXgoNDAwMCkub3B0aW9uYWwoKSxcbiAgICAgIHF1YWxpdHlUaHJlc2hvbGQ6IHoubnVtYmVyKCkubWluKDApLm1heCgxMDApLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgZW1haWxTZXJ2aWNlOiB6XG4gICAgLm9iamVjdCh7XG4gICAgICBwcm92aWRlcjogei5lbnVtKFtcImNvbnZlcnRraXRcIiwgXCJtYWlsZXJsaXRlXCIsIFwicG9zdG1hcmtcIl0pLm9wdGlvbmFsKCksXG4gICAgICBzZW5kVGltZU9wdGltaXphdGlvbjogei5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICAgIGZyZXF1ZW5jeUNhcHBpbmc6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyBXZWJob29rIHNjaGVtYXNcbmV4cG9ydCBjb25zdCBXZWJob29rRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLFxuICB0eXBlOiB6LmVudW0oW1xuICAgIFwiYXJ0aWNsZS5wdWJsaXNoZWRcIixcbiAgICBcInN1YnNjcmliZXIuY29uZmlybWVkXCIsXG4gICAgXCJzdWJzY3JpYmVyLnVuc3Vic2NyaWJlZFwiLFxuICAgIFwiY2FtcGFpZ24uc2VudFwiLFxuICAgIFwic3lzdGVtLmVycm9yXCIsXG4gIF0pLFxuICBkYXRhOiB6LmFueSgpLFxuICB0aW1lc3RhbXA6IHouc3RyaW5nKCkuZGF0ZXRpbWUoKSxcbiAgc291cmNlOiB6LnN0cmluZygpLFxuICB2ZXJzaW9uOiB6LnN0cmluZygpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBXZWJob29rRGVsaXZlcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHVybDogei5zdHJpbmcoKS51cmwoKSxcbiAgZXZlbnQ6IFdlYmhvb2tFdmVudFNjaGVtYSxcbiAgYXR0ZW1wdDogei5udW1iZXIoKS5taW4oMSksXG4gIHJlc3BvbnNlOiB6XG4gICAgLm9iamVjdCh7XG4gICAgICBzdGF0dXM6IHoubnVtYmVyKCksXG4gICAgICBoZWFkZXJzOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LnN0cmluZygpKSxcbiAgICAgIGJvZHk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIGR1cmF0aW9uOiB6Lm51bWJlcigpLm1pbigwKSwgLy8gbWlsbGlzZWNvbmRzXG4gICAgfSlcbiAgICAub3B0aW9uYWwoKSxcbiAgc3VjY2Vzczogei5ib29sZWFuKCksXG4gIGVycm9yOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIG5leHRSZXRyeTogei5zdHJpbmcoKS5kYXRldGltZSgpLm9wdGlvbmFsKCksXG59KTtcblxuLy8gRXhwb3J0IHR5cGVzXG5leHBvcnQgdHlwZSBBcGlSZXNwb25zZTxUPiA9IHouaW5mZXI8XG4gIFJldHVyblR5cGU8dHlwZW9mIEFwaVJlc3BvbnNlU2NoZW1hPHouWm9kVHlwZTxUPj4+XG4+O1xuZXhwb3J0IHR5cGUgQXBpRXJyb3IgPSB6LmluZmVyPHR5cGVvZiBBcGlFcnJvclNjaGVtYT47XG5leHBvcnQgdHlwZSBIZWFsdGhDaGVjayA9IHouaW5mZXI8dHlwZW9mIEhlYWx0aENoZWNrU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFBhZ2luYXRpb24gPSB6LmluZmVyPHR5cGVvZiBQYWdpbmF0aW9uU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFNvcnQgPSB6LmluZmVyPHR5cGVvZiBTb3J0U2NoZW1hPjtcbmV4cG9ydCB0eXBlIERhdGVSYW5nZSA9IHouaW5mZXI8dHlwZW9mIERhdGVSYW5nZVNjaGVtYT47XG5cbi8vIFR3aXR0ZXIgQVBJIHR5cGVzXG5leHBvcnQgdHlwZSBUd2l0dGVyVXNlckxvb2t1cFF1ZXJ5ID0gei5pbmZlcjxcbiAgdHlwZW9mIFR3aXR0ZXJVc2VyTG9va3VwUXVlcnlTY2hlbWFcbj47XG5leHBvcnQgdHlwZSBUd2l0dGVyVHdlZXRzUXVlcnkgPSB6LmluZmVyPHR5cGVvZiBUd2l0dGVyVHdlZXRzUXVlcnlTY2hlbWE+O1xuZXhwb3J0IHR5cGUgVHdpdHRlclVzZXJUaW1lbGluZVF1ZXJ5ID0gei5pbmZlcjxcbiAgdHlwZW9mIFR3aXR0ZXJVc2VyVGltZWxpbmVRdWVyeVNjaGVtYVxuPjtcblxuLy8gQXJ0aWNsZSBBUEkgdHlwZXNcbmV4cG9ydCB0eXBlIENyZWF0ZUFydGljbGVSZXF1ZXN0ID0gei5pbmZlcjx0eXBlb2YgQ3JlYXRlQXJ0aWNsZVJlcXVlc3RTY2hlbWE+O1xuZXhwb3J0IHR5cGUgVXBkYXRlQXJ0aWNsZVJlcXVlc3QgPSB6LmluZmVyPHR5cGVvZiBVcGRhdGVBcnRpY2xlUmVxdWVzdFNjaGVtYT47XG5leHBvcnQgdHlwZSBBcnRpY2xlc1F1ZXJ5ID0gei5pbmZlcjx0eXBlb2YgQXJ0aWNsZXNRdWVyeVNjaGVtYT47XG5cbi8vIFN1YnNjcmliZXIgQVBJIHR5cGVzXG5leHBvcnQgdHlwZSBTdWJzY3JpYmVSZXF1ZXN0ID0gei5pbmZlcjx0eXBlb2YgU3Vic2NyaWJlUmVxdWVzdFNjaGVtYT47XG5leHBvcnQgdHlwZSBVcGRhdGVTdWJzY3JpYmVyUmVxdWVzdCA9IHouaW5mZXI8XG4gIHR5cGVvZiBVcGRhdGVTdWJzY3JpYmVyUmVxdWVzdFNjaGVtYVxuPjtcbmV4cG9ydCB0eXBlIFVuc3Vic2NyaWJlUmVxdWVzdCA9IHouaW5mZXI8dHlwZW9mIFVuc3Vic2NyaWJlUmVxdWVzdFNjaGVtYT47XG5leHBvcnQgdHlwZSBTdWJzY3JpYmVyc1F1ZXJ5ID0gei5pbmZlcjx0eXBlb2YgU3Vic2NyaWJlcnNRdWVyeVNjaGVtYT47XG5cbi8vIEFuYWx5dGljcyBBUEkgdHlwZXNcbmV4cG9ydCB0eXBlIEFuYWx5dGljc1F1ZXJ5ID0gei5pbmZlcjx0eXBlb2YgQW5hbHl0aWNzUXVlcnlTY2hlbWE+O1xuZXhwb3J0IHR5cGUgVHJhY2tFdmVudFJlcXVlc3QgPSB6LmluZmVyPHR5cGVvZiBUcmFja0V2ZW50UmVxdWVzdFNjaGVtYT47XG5cbi8vIENhbXBhaWduIEFQSSB0eXBlc1xuZXhwb3J0IHR5cGUgQ3JlYXRlQ2FtcGFpZ25SZXF1ZXN0ID0gei5pbmZlcjx0eXBlb2YgQ3JlYXRlQ2FtcGFpZ25SZXF1ZXN0U2NoZW1hPjtcbmV4cG9ydCB0eXBlIENhbXBhaWduc1F1ZXJ5ID0gei5pbmZlcjx0eXBlb2YgQ2FtcGFpZ25zUXVlcnlTY2hlbWE+O1xuXG4vLyBDb250ZW50IGdlbmVyYXRpb24gdHlwZXNcbmV4cG9ydCB0eXBlIEdlbmVyYXRlQ29udGVudFJlcXVlc3QgPSB6LmluZmVyPFxuICB0eXBlb2YgR2VuZXJhdGVDb250ZW50UmVxdWVzdFNjaGVtYVxuPjtcbmV4cG9ydCB0eXBlIFZhbGlkYXRlQ29udGVudFJlcXVlc3QgPSB6LmluZmVyPFxuICB0eXBlb2YgVmFsaWRhdGVDb250ZW50UmVxdWVzdFNjaGVtYVxuPjtcblxuLy8gQWRtaW4gdHlwZXNcbmV4cG9ydCB0eXBlIEFkbWluU3RhdHNRdWVyeSA9IHouaW5mZXI8dHlwZW9mIEFkbWluU3RhdHNRdWVyeVNjaGVtYT47XG5leHBvcnQgdHlwZSBTeXN0ZW1Db25maWdVcGRhdGUgPSB6LmluZmVyPHR5cGVvZiBTeXN0ZW1Db25maWdVcGRhdGVTY2hlbWE+O1xuXG4vLyBXZWJob29rIHR5cGVzXG5leHBvcnQgdHlwZSBXZWJob29rRXZlbnQgPSB6LmluZmVyPHR5cGVvZiBXZWJob29rRXZlbnRTY2hlbWE+O1xuZXhwb3J0IHR5cGUgV2ViaG9va0RlbGl2ZXJ5ID0gei5pbmZlcjx0eXBlb2YgV2ViaG9va0RlbGl2ZXJ5U2NoZW1hPjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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