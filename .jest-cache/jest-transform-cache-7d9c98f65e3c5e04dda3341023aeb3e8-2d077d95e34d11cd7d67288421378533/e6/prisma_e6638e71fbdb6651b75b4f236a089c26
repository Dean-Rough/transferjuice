3d1c2a60532de447cd3f278111b93897
/* istanbul ignore next */
var _ref, _templateObject, _templateObject2;
function cov_c1pyafbvw() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/prisma.ts";
  var hash = "70b529590d8000d1a98085703baf9e2990f44efe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/prisma.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "1": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 20,
          column: 5
        }
      },
      "2": {
        start: {
          line: 24,
          column: 22
        },
        end: {
          line: 24,
          column: 65
        }
      },
      "3": {
        start: {
          line: 26,
          column: 0
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "4": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 27,
          column: 31
        }
      },
      "5": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "6": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "7": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 16
        }
      },
      "8": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 56
        }
      },
      "9": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 17
        }
      },
      "10": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "11": {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 44,
          column: 28
        }
      },
      "12": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 37
        }
      },
      "13": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 26
        }
      },
      "14": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 52,
          column: 6
        }
      },
      "15": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "16": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 68,
          column: 3
        }
      },
      "17": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 31
        }
      },
      "18": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 63
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 27
          },
          end: {
            line: 14,
            column: 28
          }
        },
        loc: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "testDatabaseConnection",
        decl: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 31,
            column: 44
          }
        },
        loc: {
          start: {
            line: 31,
            column: 65
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "getDatabaseHealth",
        decl: {
          start: {
            line: 42,
            column: 22
          },
          end: {
            line: 42,
            column: 39
          }
        },
        loc: {
          start: {
            line: 42,
            column: 42
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 42
      },
      "3": {
        name: "disconnectDatabase",
        decl: {
          start: {
            line: 63,
            column: 22
          },
          end: {
            line: 63,
            column: 40
          }
        },
        loc: {
          start: {
            line: 63,
            column: 43
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 63
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 6
          },
          end: {
            line: 19,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 36
          }
        }, {
          start: {
            line: 19,
            column: 10
          },
          end: {
            line: 19,
            column: 19
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 41
          }
        }, {
          start: {
            line: 24,
            column: 45
          },
          end: {
            line: 24,
            column: 65
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 0
          },
          end: {
            line: 28,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 0
          },
          end: {
            line: 28,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 56,
            column: 13
          },
          end: {
            line: 56,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 38
          },
          end: {
            line: 56,
            column: 51
          }
        }, {
          start: {
            line: 56,
            column: 54
          },
          end: {
            line: 56,
            column: 69
          }
        }],
        line: 56
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "70b529590d8000d1a98085703baf9e2990f44efe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_c1pyafbvw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_c1pyafbvw();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Prisma Client Singleton
 * Optimized for Next.js development and production environments
 */

import { PrismaClient } from '@prisma/client';
/* istanbul ignore next */
// Prisma client configuration
cov_c1pyafbvw().s[0]++;
var createPrismaClient = function createPrismaClient() {
  /* istanbul ignore next */
  cov_c1pyafbvw().f[0]++;
  cov_c1pyafbvw().s[1]++;
  return new PrismaClient({
    log: process.env.NODE_ENV === 'development' ?
    /* istanbul ignore next */
    (cov_c1pyafbvw().b[0][0]++, ['query', 'error', 'warn']) :
    /* istanbul ignore next */
    (cov_c1pyafbvw().b[0][1]++, ['error'])
  });
};

// Singleton pattern for Prisma client
export var prisma =
/* istanbul ignore next */
(cov_c1pyafbvw().s[2]++, (_ref = (cov_c1pyafbvw().b[1][0]++, globalThis.__prisma)) !== null && _ref !== void 0 ? _ref : (cov_c1pyafbvw().b[1][1]++, createPrismaClient()));
/* istanbul ignore next */
cov_c1pyafbvw().s[3]++;
if (process.env.NODE_ENV !== 'production') {
  /* istanbul ignore next */
  cov_c1pyafbvw().b[2][0]++;
  cov_c1pyafbvw().s[4]++;
  globalThis.__prisma = prisma;
} else
/* istanbul ignore next */
{
  cov_c1pyafbvw().b[2][1]++;
}

// Connection testing utility
export
/* istanbul ignore next */
function testDatabaseConnection() {
  return _testDatabaseConnection.apply(this, arguments);
}

// Health check utility
/* istanbul ignore next */
function _testDatabaseConnection() {
  _testDatabaseConnection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee()
  /* istanbul ignore next */
  {
    var _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_c1pyafbvw().f[1]++;
          cov_c1pyafbvw().s[5]++;
          _context.p = 1;
          cov_c1pyafbvw().s[6]++;
          _context.n = 2;
          return prisma.$queryRaw(_templateObject || (_templateObject = _taggedTemplateLiteral(["SELECT 1"])));
        case 2:
          cov_c1pyafbvw().s[7]++;
          return _context.a(2, true);
        case 3:
          _context.p = 3;
          _t = _context.v;
          cov_c1pyafbvw().s[8]++;
          console.error('Database connection failed:',
          /* istanbul ignore next */
          _t);
          cov_c1pyafbvw().s[9]++;
          return _context.a(2, false);
      }
    }, _callee, null, [[1, 3]]);
  }));
  return _testDatabaseConnection.apply(this, arguments);
}
export
/* istanbul ignore next */
function getDatabaseHealth() {
  return _getDatabaseHealth.apply(this, arguments);
}

// Graceful shutdown
/* istanbul ignore next */
function _getDatabaseHealth() {
  _getDatabaseHealth = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2()
  /* istanbul ignore next */
  {
    var start, end, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_c1pyafbvw().f[2]++;
          cov_c1pyafbvw().s[10]++;
          _context2.p = 1;
          start = (cov_c1pyafbvw().s[11]++, Date.now());
          cov_c1pyafbvw().s[12]++;
          _context2.n = 2;
          return prisma.$queryRaw(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["SELECT 1"])));
        case 2:
          end = (cov_c1pyafbvw().s[13]++, Date.now());
          cov_c1pyafbvw().s[14]++;
          return _context2.a(2, {
            status: 'healthy',
            responseTime: end - start,
            timestamp: new Date().toISOString()
          });
        case 3:
          _context2.p = 3;
          _t2 = _context2.v;
          cov_c1pyafbvw().s[15]++;
          return _context2.a(2, {
            status: 'unhealthy',
            error:
            /* istanbul ignore next */
            _t2 instanceof Error ?
            /* istanbul ignore next */
            (cov_c1pyafbvw().b[3][0]++,
            /* istanbul ignore next */
            _t2.message) :
            /* istanbul ignore next */
            (cov_c1pyafbvw().b[3][1]++, 'Unknown error'),
            timestamp: new Date().toISOString()
          });
      }
    }, _callee2, null, [[1, 3]]);
  }));
  return _getDatabaseHealth.apply(this, arguments);
}
export
/* istanbul ignore next */
function disconnectDatabase() {
  return _disconnectDatabase.apply(this, arguments);
}
/* istanbul ignore next */
function _disconnectDatabase() {
  _disconnectDatabase = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3()
  /* istanbul ignore next */
  {
    var _t3;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_c1pyafbvw().f[3]++;
          cov_c1pyafbvw().s[16]++;
          _context3.p = 1;
          cov_c1pyafbvw().s[17]++;
          _context3.n = 2;
          return prisma.$disconnect();
        case 2:
          _context3.n = 4;
          break;
        case 3:
          _context3.p = 3;
          _t3 = _context3.v;
          cov_c1pyafbvw().s[18]++;
          console.error('Error disconnecting from database:',
          /* istanbul ignore next */
          _t3);
        case 4:
          return _context3.a(2);
      }
    }, _callee3, null, [[1, 3]]);
  }));
  return _disconnectDatabase.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,