bdd3766be2770f0639ed23f936957037
/* istanbul ignore next */
function cov_692naicbe() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/archive/route.ts";
  var hash = "998ff4614b309057999477f390e95182803d2e8a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/archive/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "1": {
        start: {
          line: 16,
          column: 30
        },
        end: {
          line: 131,
          column: 1
        }
      },
      "2": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 19
        }
      },
      "3": {
        start: {
          line: 27,
          column: 17
        },
        end: {
          line: 27,
          column: 35
        }
      },
      "4": {
        start: {
          line: 30,
          column: 32
        },
        end: {
          line: 30,
          column: 34
        }
      },
      "5": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 31,
          column: 24
        }
      },
      "6": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 114,
          column: 3
        }
      },
      "7": {
        start: {
          line: 33,
          column: 15
        },
        end: {
          line: 33,
          column: 16
        }
      },
      "8": {
        start: {
          line: 34,
          column: 21
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "9": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 35,
          column: 76
        }
      },
      "10": {
        start: {
          line: 37,
          column: 22
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "11": {
        start: {
          line: 45,
          column: 19
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "12": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 48
        }
      },
      "13": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 113,
          column: 7
        }
      },
      "14": {
        start: {
          line: 116,
          column: 2
        },
        end: {
          line: 130,
          column: 4
        }
      },
      "15": {
        start: {
          line: 134,
          column: 2
        },
        end: {
          line: 215,
          column: 3
        }
      },
      "16": {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 49
        }
      },
      "17": {
        start: {
          line: 138,
          column: 18
        },
        end: {
          line: 145,
          column: 6
        }
      },
      "18": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 188,
          column: 6
        }
      },
      "19": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 198,
          column: 6
        }
      },
      "20": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "21": {
        start: {
          line: 201,
          column: 6
        },
        end: {
          line: 207,
          column: 8
        }
      },
      "22": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 210,
          column: 61
        }
      },
      "23": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 214,
          column: 6
        }
      },
      "24": {
        start: {
          line: 220,
          column: 14
        },
        end: {
          line: 220,
          column: 24
        }
      },
      "25": {
        start: {
          line: 221,
          column: 2
        },
        end: {
          line: 232,
          column: 3
        }
      },
      "26": {
        start: {
          line: 223,
          column: 6
        },
        end: {
          line: 223,
          column: 63
        }
      },
      "27": {
        start: {
          line: 225,
          column: 6
        },
        end: {
          line: 225,
          column: 64
        }
      },
      "28": {
        start: {
          line: 227,
          column: 6
        },
        end: {
          line: 227,
          column: 64
        }
      },
      "29": {
        start: {
          line: 229,
          column: 6
        },
        end: {
          line: 229,
          column: 65
        }
      },
      "30": {
        start: {
          line: 231,
          column: 6
        },
        end: {
          line: 231,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 30
          },
          end: {
            line: 16,
            column: 31
          }
        },
        loc: {
          start: {
            line: 25,
            column: 22
          },
          end: {
            line: 131,
            column: 1
          }
        },
        line: 25
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 133,
            column: 22
          },
          end: {
            line: 133,
            column: 25
          }
        },
        loc: {
          start: {
            line: 133,
            column: 48
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 133
      },
      "2": {
        name: "getDateRangeStart",
        decl: {
          start: {
            line: 219,
            column: 9
          },
          end: {
            line: 219,
            column: 26
          }
        },
        loc: {
          start: {
            line: 219,
            column: 48
          },
          end: {
            line: 233,
            column: 1
          }
        },
        line: 219
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 18
          },
          end: {
            line: 33,
            column: 27
          }
        }, {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 33,
            column: 49
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "2": {
        loc: {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 232,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 223,
            column: 63
          }
        }, {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 225,
            column: 64
          }
        }, {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 227,
            column: 64
          }
        }, {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 229,
            column: 65
          }
        }, {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 231,
            column: 25
          }
        }],
        line: 221
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "998ff4614b309057999477f390e95182803d2e8a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_692naicbe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_692naicbe();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
import { NextResponse } from "next/server";
import { z } from "zod";
// Query parameters schema
var archiveQuerySchema =
/* istanbul ignore next */
(cov_692naicbe().s[0]++, z.object({
  page: z.coerce.number()[
  /* istanbul ignore next */
  "int"]().positive()[
  /* istanbul ignore next */
  "default"](1),
  limit: z.coerce.number()[
  /* istanbul ignore next */
  "int"]().min(1).max(50)[
  /* istanbul ignore next */
  "default"](20),
  tags: z.string().optional(),
  leagues: z.string().optional(),
  dateRange: z[
  /* istanbul ignore next */
  "enum"](["week", "month", "quarter", "year", "all"]).optional(),
  search: z.string().optional()
}));

// Generate mock briefings for archive
/* istanbul ignore next */
cov_692naicbe().s[1]++;
var generateMockBriefings = function generateMockBriefings(page, limit, filters) {
  /* istanbul ignore next */
  cov_692naicbe().f[0]++;
  var total =
  /* istanbul ignore next */
  (cov_692naicbe().s[2]++, 247); // Mock total count
  var offset =
  /* istanbul ignore next */
  (cov_692naicbe().s[3]++, (page - 1) * limit);

  // Generate briefings for the requested page
  var briefings =
  /* istanbul ignore next */
  (cov_692naicbe().s[4]++, []);
  var now =
  /* istanbul ignore next */
  (cov_692naicbe().s[5]++, new Date());
  /* istanbul ignore next */
  cov_692naicbe().s[6]++;
  for (var i =
  /* istanbul ignore next */
  (cov_692naicbe().s[7]++, 0);
  /* istanbul ignore next */
  (cov_692naicbe().b[0][0]++, i < limit) &&
  /* istanbul ignore next */
  (cov_692naicbe().b[0][1]++, offset + i < total); i++) {
    var hoursAgo =
    /* istanbul ignore next */
    (cov_692naicbe().s[8]++, offset + i);
    var briefingDate =
    /* istanbul ignore next */
    (cov_692naicbe().s[9]++, new Date(now.getTime() - hoursAgo * 60 * 60 * 1000));
    var timestamp =
    /* istanbul ignore next */
    (cov_692naicbe().s[10]++, [briefingDate.getFullYear(), String(briefingDate.getMonth() + 1).padStart(2, "0"), String(briefingDate.getDate()).padStart(2, "0"), String(briefingDate.getHours()).padStart(2, "0")].join("-"));

    // Mock different titles for variety
    var titles =
    /* istanbul ignore next */
    (cov_692naicbe().s[11]++, ["Arsenal's £100m Gamble on a Man Who Can't Tie His Boots", "Chelsea's Latest Striker Reportedly Allergic to Goals", "Manchester United's Transfer Strategy: A Masterclass in Chaos", "Liverpool's Scouting Team Discovers Football Exists Outside England", "Real Madrid's Galactico Policy Now Includes Literal Galactic Beings"]);
    var funnyTitle =
    /* istanbul ignore next */
    (cov_692naicbe().s[12]++, titles[i % titles.length]);
    /* istanbul ignore next */
    cov_692naicbe().s[13]++;
    briefings.push({
      id:
      /* istanbul ignore next */
      "briefing-".concat(timestamp),
      slug: timestamp,
      timestamp: briefingDate,
      title: {
        day: briefingDate.toLocaleDateString("en-US", {
          weekday: "long"
        }),
        hour:
        /* istanbul ignore next */
        "".concat(briefingDate.getHours(), ":00"),
        month: briefingDate.toLocaleDateString("en-US", {
          month: "short"
        }),
        year: String(briefingDate.getFullYear()),
        funny: funnyTitle,
        full:
        /* istanbul ignore next */
        "".concat(briefingDate.toLocaleDateString("en-US", {
          weekday: "long"
        }), " ").concat(briefingDate.getHours(), ":00 Briefing ").concat(briefingDate.toLocaleDateString("en-US", {
          month: "short"
        }), " ").concat(briefingDate.getFullYear(), " - ").concat(funnyTitle)
      },
      summary: "The Terry brings you the latest transfer chaos, questionable scouting decisions, and football's most ridiculous rumors.",
      metaDescription: "Transfer news, rumors, and Terry's ascerbic commentary on football's silly season.",
      sections: [],
      // Not needed for archive view
      polaroids: [],
      tags: {
        clubs: ["Arsenal", "Chelsea", "Manchester United", "Liverpool"],
        players: ["Mystery Player", "Unknown Striker"],
        leagues: ["Premier League", "La Liga"],
        sources: ["FabrizioRomano", "David_Ornstein"]
      },
      metadata: {
        estimatedReadTime: 5 + i % 3,
        wordCount: 1200 + i * 47,
        terryScore: 85 + i % 15,
        shareCount: {
          twitter: Math.floor(Math.random() * 100),
          facebook: Math.floor(Math.random() * 50),
          whatsapp: Math.floor(Math.random() * 30),
          email: Math.floor(Math.random() * 20)
        },
        viewCount: Math.floor(Math.random() * 1000)
      },
      sharing: {
        url:
        /* istanbul ignore next */
        "https://transferjuice.com/briefings/".concat(timestamp),
        shortUrl:
        /* istanbul ignore next */
        "https://tjuice.co/b/".concat(timestamp),
        title: funnyTitle,
        description: "The Terry's latest transfer briefing",
        shareCount: {
          twitter: 0,
          facebook: 0,
          whatsapp: 0,
          email: 0
        }
      },
      openGraph: {
        title:
        /* istanbul ignore next */
        "".concat(funnyTitle, " - Transfer Juice"),
        description: "The Terry's latest transfer briefing",
        image: "https://transferjuice.com/og/briefing-default.jpg",
        url:
        /* istanbul ignore next */
        "https://transferjuice.com/briefings/".concat(timestamp)
      },
      status: "published",
      publishedAt: briefingDate,
      createdAt: briefingDate,
      updatedAt: briefingDate
    });
  }
  /* istanbul ignore next */
  cov_692naicbe().s[14]++;
  return {
    briefings: briefings,
    pagination: {
      page: page,
      limit: limit,
      total: total,
      hasMore: offset + limit < total
    },
    filters: {
      tags:
      /* istanbul ignore next */
      filters === null || filters === void 0 ? void 0 : filters.tags,
      leagues:
      /* istanbul ignore next */
      filters === null || filters === void 0 ? void 0 : filters.leagues,
      dateRange:
      /* istanbul ignore next */
      filters === null || filters === void 0 ? void 0 : filters.dateRange,
      search:
      /* istanbul ignore next */
      filters === null || filters === void 0 ? void 0 : filters.search
    }
  };
};
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}

// Helper function to calculate date range start
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var _ref, searchParams, query, archive, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_692naicbe().f[1]++;
          cov_692naicbe().s[15]++;
          _context.p = 1;
          _ref = (cov_692naicbe().s[16]++, new URL(request.url)), searchParams = _ref.searchParams; // Parse and validate query parameters
          query = (cov_692naicbe().s[17]++, archiveQuerySchema.parse({
            page: searchParams.get("page"),
            limit: searchParams.get("limit"),
            tags: searchParams.get("tags"),
            leagues: searchParams.get("leagues"),
            dateRange: searchParams.get("dateRange"),
            search: searchParams.get("search")
          })); // TODO: Replace with actual database query
          // const where = {
          //   status: 'published',
          //   ...(query.tags && {
          //     tags: {
          //       hasSome: query.tags.split(','),
          //     },
          //   }),
          //   ...(query.leagues && {
          //     leagues: {
          //       hasSome: query.leagues.split(','),
          //     },
          //   }),
          //   ...(query.search && {
          //     OR: [
          //       { title: { contains: query.search, mode: 'insensitive' } },
          //       { summary: { contains: query.search, mode: 'insensitive' } },
          //     ],
          //   }),
          //   ...(query.dateRange && {
          //     publishedAt: {
          //       gte: getDateRangeStart(query.dateRange),
          //     },
          //   }),
          // };
          // const [briefings, total] = await Promise.all([
          //   prisma.briefing.findMany({
          //     where,
          //     orderBy: { publishedAt: 'desc' },
          //     skip: (query.page - 1) * query.limit,
          //     take: query.limit,
          //   }),
          //   prisma.briefing.count({ where }),
          // ]);
          archive = (cov_692naicbe().s[18]++, generateMockBriefings(query.page, query.limit, {
            tags: query.tags,
            leagues: query.leagues,
            dateRange: query.dateRange,
            search: query.search
          }));
          cov_692naicbe().s[19]++;
          return _context.a(2, NextResponse.json({
            archive: archive
          }, {
            status: 200,
            headers: {
              "Cache-Control": "public, s-maxage=300, stale-while-revalidate=600"
            }
          }));
        case 2:
          _context.p = 2;
          _t = _context.v;
          cov_692naicbe().s[20]++;
          if (!(
          /* istanbul ignore next */
          _t instanceof z.ZodError)) {
            _context.n = 3;
            break;
          }
          cov_692naicbe().b[1][0]++;
          cov_692naicbe().s[21]++;
          return _context.a(2, NextResponse.json({
            error: "Invalid query parameters",
            details:
            /* istanbul ignore next */
            _t.errors
          }, {
            status: 400
          }));
        case 3:
          cov_692naicbe().b[1][1]++;
        case 4:
          cov_692naicbe().s[22]++;
          console.error("Error fetching briefing archive:",
          /* istanbul ignore next */
          _t);
          cov_692naicbe().s[23]++;
          return _context.a(2, NextResponse.json({
            error: "Internal server error"
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 2]]);
  }));
  return _GET.apply(this, arguments);
}
function getDateRangeStart(range) {
  /* istanbul ignore next */
  cov_692naicbe().f[2]++;
  var now =
  /* istanbul ignore next */
  (cov_692naicbe().s[24]++, new Date());
  /* istanbul ignore next */
  cov_692naicbe().s[25]++;
  switch (range) {
    case "week":
      /* istanbul ignore next */
      cov_692naicbe().b[2][0]++;
      cov_692naicbe().s[26]++;
      return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    case "month":
      /* istanbul ignore next */
      cov_692naicbe().b[2][1]++;
      cov_692naicbe().s[27]++;
      return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    case "quarter":
      /* istanbul ignore next */
      cov_692naicbe().b[2][2]++;
      cov_692naicbe().s[28]++;
      return new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
    case "year":
      /* istanbul ignore next */
      cov_692naicbe().b[2][3]++;
      cov_692naicbe().s[29]++;
      return new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
    default:
      /* istanbul ignore next */
      cov_692naicbe().b[2][4]++;
      cov_692naicbe().s[30]++;
      return new Date(0);
    // All time
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,