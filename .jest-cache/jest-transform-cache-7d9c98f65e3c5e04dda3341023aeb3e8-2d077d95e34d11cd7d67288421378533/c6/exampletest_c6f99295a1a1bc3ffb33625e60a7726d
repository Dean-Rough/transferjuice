6f956a2e9f589027d3ca1886ee130ad9
"use strict";

var _utils = require("@/lib/validations/utils");
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
describe("Example test using jest-extended matchers", function () {
  it("should validate email using jest-extended matchers", function () {
    var validEmail = "test@example.com";
    var invalidEmail = "invalid-email";
    var emptyEmail = "";

    // Using standard Jest matchers first
    expect((0, _utils.validateEmail)(validEmail)).toBe(true);
    expect((0, _utils.validateEmail)(invalidEmail)).toBe(false);
    expect((0, _utils.validateEmail)(emptyEmail)).toBe(false);

    // Testing with arrays
    var emails = [validEmail, "another@test.com", "user@domain.org"];
    expect(emails).toIncludeAllMembers([validEmail, "another@test.com", "user@domain.org"]);
    expect(emails).toHaveLength(3);

    // Testing objects
    var userProfile = {
      email: validEmail,
      name: "Test User",
      preferences: {
        newsletter: true,
        notifications: false
      }
    };
    expect(userProfile).toContainKey("email");
    expect(userProfile).toContainValue(validEmail);
    expect(userProfile.preferences).toSatisfy(function (prefs) {
      return _typeof(prefs) === "object" && "newsletter" in prefs && "notifications" in prefs;
    });

    // Testing strings
    expect(validEmail).toStartWith("test@");
    expect(validEmail).toEndWith(".com");
    expect(validEmail).toInclude("@example");

    // Testing numbers with jest-extended
    var score = 85.5;
    expect(score).toBePositive();
    expect(score).toBeGreaterThan(80);
    expect(score).toBeWithin(80, 90);

    // Testing dates
    var now = new Date();
    var future = new Date(Date.now() + 86400000); // +1 day
    expect(future).toBeAfter(now);
    expect(now).toBeBefore(future);
  });
  it("should demonstrate promise matchers", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
    var successPromise, errorPromise;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          successPromise = Promise.resolve("success"); // Standard Jest promise matchers work fine
          _context.n = 1;
          return expect(successPromise).resolves.toBe("success");
        case 1:
          // Test rejecting promise  
          errorPromise = Promise.reject(new Error("test error"));
          _context.n = 2;
          return expect(errorPromise).rejects.toThrow("test error");
        case 2:
          return _context.a(2);
      }
    }, _callee);
  })));
  it("should demonstrate function matchers", function () {
    var mockFn = jest.fn();
    var throwingFn = function throwingFn() {
      throw new Error("Test error");
    };
    mockFn("arg1", "arg2");
    mockFn("arg3");
    expect(mockFn).toHaveBeenCalledTimes(2);
    expect(mockFn).toHaveBeenCalledWith("arg1", "arg2");
    expect(mockFn).toHaveBeenLastCalledWith("arg3");
    expect(throwingFn).toThrow("Test error");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,