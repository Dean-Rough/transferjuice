{"version":3,"names":["_getJestObj","mock","getMemoryMetrics","jest","fn","usedMB","totalMB","percentUsed","checkMemoryThresholds","level","shouldCleanup","message","MemoryOptimizer","estimateObjectSize","obj","JSON","stringify","length","_react","require","_feedStore","_memoryMonitor","_typeof","o","Symbol","iterator","constructor","prototype","_regenerator","e","t","r","n","toStringTag","i","c","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_require","describe","beforeEach","_renderHook","renderHook","useFeedStore","result","act","current","clearFilters","afterEach","clearAllMocks","it","_callee4","_renderHook2","generateTestItem","memoryStats","_context4","index","id","concat","type","timestamp","Date","now","content","terryCommentary","undefined","source","name","handle","tier","reliability","region","tags","clubs","players","sources","media","url","altText","thumbnailUrl","engagement","shares","Math","floor","random","reactions","clicks","metadata","transferType","priority","relevanceScore","league","isRead","isNew","_callee3","_context3","global","fetch","mockResolvedValueOnce","ok","json","_json","_callee","_context","success","data","Array","from","_","pagination","hasMore","total","_json2","_callee2","_context2","loadItems","loadMoreItems","expect","items","toBe","getMemoryStats","usageMB","toBeLessThan","itemCount","console","log","memoryUsageMB","avgItemSizeBytes","avgItemSize","isUnder100MB","optimizeMemory","_callee7","_renderHook3","mockGetMemoryMetrics","generateLargeItem","_context7","mockReturnValue","repeat","_callee6","_context6","mockResolvedValue","_json3","_callee5","_context5","toBeLessThanOrEqual","toBeGreaterThan","_callee0","_renderHook4","generateFilterTestItem","_context0","_callee9","_context9","_json4","_callee8","_context8","addTagFilter","filteredItems","_callee11","_renderHook5","_context11","_callee10","_context10","_json5","_callee1","_context1","addItem","unreadCount","_renderHook6","stats","toHaveProperty","_renderHook7"],"sources":["feedStore.memory.test.ts"],"sourcesContent":["/**\n * Memory Performance Tests for Feed Store\n * Tests memory usage with 1000+ items to verify <100MB target\n */\n\nimport { renderHook, act } from \"@testing-library/react\";\nimport { useFeedStore } from \"../feedStore\";\nimport { getMemoryMetrics } from \"@/lib/performance/memoryMonitor\";\n\n// Mock the memory monitor since we're testing in Node.js environment\njest.mock(\"@/lib/performance/memoryMonitor\", () => ({\n  getMemoryMetrics: jest.fn(() => ({\n    usedMB: 85, // Mock realistic memory usage\n    totalMB: 4096,\n    percentUsed: 2.08,\n  })),\n  checkMemoryThresholds: jest.fn(() => ({\n    level: \"safe\",\n    shouldCleanup: false,\n    message: \"Memory usage is safe\",\n  })),\n  MemoryOptimizer: {\n    estimateObjectSize: jest.fn((obj: any) => {\n      // Realistic size estimation based on JSON serialization\n      return JSON.stringify(obj).length * 2; // Approximation\n    }),\n  },\n}));\n\ndescribe(\"FeedStore Memory Performance Tests\", () => {\n  beforeEach(() => {\n    // Reset store state\n    const { result } = renderHook(() => useFeedStore());\n    act(() => {\n      result.current.clearFilters();\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Memory Usage with Large Datasets\", () => {\n    it(\"should stay under 100MB with 1000 items\", async () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      // Generate 1000 realistic feed items\n      const generateTestItem = (index: number) => ({\n        id: `feed-item-${index}`,\n        type: \"itk\" as const,\n        timestamp: new Date(Date.now() - index * 60000), // Staggered timestamps\n        content: `Transfer update ${index}: Manchester United are in advanced talks for a new signing. The deal is progressing well with medical tests scheduled for next week. Fee expected to be around Â£${20 + index}m including add-ons. More updates to follow as situation develops further.`,\n        terryCommentary:\n          index % 3 === 0\n            ? `Right, transfer ${index} is either happening or it's not. The Terry's money is on \"maybe\".`\n            : undefined,\n        source: {\n          name: [\"Fabrizio Romano\", \"David Ornstein\", \"Sky Sports\"][index % 3],\n          handle: [\"@FabrizioRomano\", \"@David_Ornstein\", \"@SkySports\"][\n            index % 3\n          ],\n          tier: (1 + (index % 3)) as 1 | 2 | 3,\n          reliability: 0.9 - (index % 3) * 0.1,\n          region: [\"GLOBAL\", \"UK\", \"ES\"][index % 3] as any,\n        },\n        tags: {\n          clubs: [`Club${index % 20}`], // 20 different clubs\n          players: [`Player${index % 50}`], // 50 different players\n          sources: [\"Fabrizio Romano\", \"David Ornstein\", \"Sky Sports\"][\n            index % 3\n          ],\n        },\n        media:\n          index % 5 === 0\n            ? {\n                type: \"image\" as const,\n                url: `https://example.com/image${index}.jpg`,\n                altText: `Transfer image ${index}`,\n                thumbnailUrl: `https://example.com/thumb${index}.jpg`,\n              }\n            : undefined,\n        engagement: {\n          shares: Math.floor(Math.random() * 100),\n          reactions: Math.floor(Math.random() * 500),\n          clicks: Math.floor(Math.random() * 200),\n        },\n        metadata: {\n          transferType: [\"signing\", \"rumour\", \"medical\", \"confirmed\"][\n            index % 4\n          ] as any,\n          priority: [\"low\", \"medium\", \"high\"][index % 3] as any,\n          relevanceScore: 0.7 + Math.random() * 0.3,\n          league: [\"PL\", \"LaLiga\", \"SerieA\", \"Bundesliga\", \"Ligue1\"][\n            index % 5\n          ] as any,\n        },\n        isRead: Math.random() > 0.3,\n        isNew: Math.random() > 0.8,\n      });\n\n      // Load 1000 items in batches to simulate real usage\n      await act(async () => {\n        // Mock API response with 1000 items\n        global.fetch = jest\n          .fn()\n          .mockResolvedValueOnce({\n            ok: true,\n            json: async () => ({\n              success: true,\n              data: Array.from({ length: 500 }, (_, i) => generateTestItem(i)),\n              pagination: { hasMore: true, total: 1000 },\n            }),\n          })\n          .mockResolvedValueOnce({\n            ok: true,\n            json: async () => ({\n              success: true,\n              data: Array.from({ length: 500 }, (_, i) =>\n                generateTestItem(i + 500),\n              ),\n              pagination: { hasMore: false, total: 1000 },\n            }),\n          });\n\n        // Load initial batch\n        await result.current.loadItems(500);\n\n        // Load more items\n        await result.current.loadMoreItems(500);\n      });\n\n      // Verify we have 1000 items\n      expect(result.current.items.length).toBe(1000);\n\n      // Check memory stats\n      const memoryStats = result.current.getMemoryStats();\n\n      // Verify memory usage is under 100MB\n      expect(memoryStats.usageMB).toBeLessThan(100);\n\n      // Verify item count\n      expect(memoryStats.itemCount).toBe(1000);\n\n      // Log stats for visibility\n      console.log(\"Memory Performance Test Results:\", {\n        itemCount: memoryStats.itemCount,\n        memoryUsageMB: memoryStats.usageMB,\n        avgItemSizeBytes: memoryStats.avgItemSize,\n        isUnder100MB: memoryStats.usageMB < 100,\n      });\n\n      // Verify memory optimization is available\n      expect(typeof result.current.optimizeMemory).toBe(\"function\");\n    });\n\n    it(\"should automatically optimize memory when threshold is exceeded\", async () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      // Mock high memory usage to trigger optimization\n      const mockGetMemoryMetrics = getMemoryMetrics as jest.MockedFunction<\n        typeof getMemoryMetrics\n      >;\n      mockGetMemoryMetrics.mockReturnValue({\n        usedMB: 95, // Near 100MB threshold\n        totalMB: 4096,\n        percentUsed: 2.3,\n      });\n\n      // Generate items that would push memory over threshold\n      const generateLargeItem = (index: number) => ({\n        id: `large-item-${index}`,\n        type: \"itk\" as const,\n        timestamp: new Date(),\n        content: \"Large content \".repeat(100), // Make content larger\n        source: {\n          name: \"Test Source\",\n          tier: 1 as const,\n          reliability: 0.9,\n        },\n        tags: {\n          clubs: [\"Test Club\"],\n          players: [\"Test Player\"],\n          sources: [\"Test Source\"],\n        },\n        metadata: {\n          priority: \"medium\" as const,\n          relevanceScore: 0.8,\n        },\n      });\n\n      await act(async () => {\n        // Mock API with large items\n        global.fetch = jest.fn().mockResolvedValue({\n          ok: true,\n          json: async () => ({\n            success: true,\n            data: Array.from({ length: 800 }, (_, i) => generateLargeItem(i)),\n            pagination: { hasMore: false, total: 800 },\n          }),\n        });\n\n        await result.current.loadItems(800);\n      });\n\n      // Memory optimization should keep us under limits\n      const memoryStats = result.current.getMemoryStats();\n      expect(result.current.items.length).toBeLessThanOrEqual(800);\n\n      // Test manual optimization\n      act(() => {\n        result.current.optimizeMemory();\n      });\n\n      // After optimization, should have fewer items but stay functional\n      expect(result.current.items.length).toBeLessThanOrEqual(800);\n      expect(result.current.items.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle memory-efficient filtering with large datasets\", async () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      // Create 1000 items with varied tags for filtering\n      const generateFilterTestItem = (index: number) => ({\n        id: `filter-item-${index}`,\n        type: \"itk\" as const,\n        timestamp: new Date(),\n        content: `Transfer ${index}`,\n        source: {\n          name: \"Test Source\",\n          tier: 1 as const,\n          reliability: 0.9,\n        },\n        tags: {\n          clubs: [[`Arsenal`], [`Chelsea`], [`United`]][index % 3] || [],\n          players: [[`Haaland`], [`Mbappe`], [`Kane`]][index % 3] || [],\n          sources: [\"Test Source\"],\n        },\n        metadata: {\n          priority: \"medium\" as const,\n          relevanceScore: 0.8,\n        },\n      });\n\n      await act(async () => {\n        global.fetch = jest.fn().mockResolvedValue({\n          ok: true,\n          json: async () => ({\n            success: true,\n            data: Array.from({ length: 1000 }, (_, i) =>\n              generateFilterTestItem(i),\n            ),\n            pagination: { hasMore: false, total: 1000 },\n          }),\n        });\n\n        await result.current.loadItems(1000);\n      });\n\n      // Test filtering performance with large dataset\n      act(() => {\n        result.current.addTagFilter(\"Arsenal\", \"club\");\n      });\n\n      // Should filter efficiently without memory issues\n      expect(result.current.filteredItems.length).toBeLessThan(\n        result.current.items.length,\n      );\n      expect(result.current.filteredItems.length).toBeGreaterThan(0);\n\n      // Memory should still be reasonable\n      const memoryStats = result.current.getMemoryStats();\n      expect(memoryStats.usageMB).toBeLessThan(100);\n\n      // Test clearing filters\n      act(() => {\n        result.current.clearFilters();\n      });\n\n      expect(result.current.filteredItems.length).toBe(\n        result.current.items.length,\n      );\n    });\n\n    it(\"should maintain performance with real-time updates on large datasets\", async () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      // Start with 800 items\n      await act(async () => {\n        global.fetch = jest.fn().mockResolvedValue({\n          ok: true,\n          json: async () => ({\n            success: true,\n            data: Array.from({ length: 800 }, (_, i) => ({\n              id: `base-item-${i}`,\n              type: \"itk\" as const,\n              timestamp: new Date(),\n              content: `Base transfer ${i}`,\n              source: { name: \"Test\", tier: 1 as const, reliability: 0.9 },\n              tags: { clubs: [], players: [], sources: [] },\n              metadata: { priority: \"medium\" as const, relevanceScore: 0.8 },\n            })),\n            pagination: { hasMore: false, total: 800 },\n          }),\n        });\n\n        await result.current.loadItems(800);\n      });\n\n      // Add real-time updates to push over 1000\n      act(() => {\n        for (let i = 0; i < 250; i++) {\n          result.current.addItem({\n            id: `realtime-item-${i}`,\n            type: \"breaking\" as const,\n            timestamp: new Date(),\n            content: `Breaking: Transfer ${i}`,\n            source: {\n              name: \"Breaking Source\",\n              tier: 1 as const,\n              reliability: 0.95,\n            },\n            tags: {\n              clubs: [\"Real Madrid\"],\n              players: [\"Mbappe\"],\n              sources: [\"Breaking Source\"],\n            },\n            metadata: { priority: \"high\" as const, relevanceScore: 0.95 },\n            isNew: true,\n          });\n        }\n      });\n\n      // Should have triggered automatic optimization to stay under maxItems\n      expect(result.current.items.length).toBeLessThanOrEqual(1000);\n\n      // Memory should remain efficient\n      const memoryStats = result.current.getMemoryStats();\n      expect(memoryStats.usageMB).toBeLessThan(100);\n\n      // Real-time features should still work\n      expect(result.current.unreadCount).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Memory Optimization Features\", () => {\n    it(\"should provide detailed memory statistics\", () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      const stats = result.current.getMemoryStats();\n\n      expect(stats).toHaveProperty(\"usageMB\");\n      expect(stats).toHaveProperty(\"itemCount\");\n      expect(stats).toHaveProperty(\"avgItemSize\");\n\n      expect(typeof stats.usageMB).toBe(\"number\");\n      expect(typeof stats.itemCount).toBe(\"number\");\n      expect(typeof stats.avgItemSize).toBe(\"number\");\n    });\n\n    it(\"should cleanup old items when maxItems is exceeded\", () => {\n      const { result } = renderHook(() => useFeedStore());\n\n      // Set a lower maxItems for testing\n      act(() => {\n        // Add items beyond maxItems\n        for (let i = 0; i < 1200; i++) {\n          result.current.addItem({\n            id: `overflow-item-${i}`,\n            type: \"itk\" as const,\n            timestamp: new Date(Date.now() - i * 1000),\n            content: `Overflow transfer ${i}`,\n            source: { name: \"Test\", tier: 1 as const, reliability: 0.9 },\n            tags: { clubs: [], players: [], sources: [] },\n            metadata: { priority: \"medium\" as const, relevanceScore: 0.8 },\n          });\n        }\n      });\n\n      // Should have been limited by maxItems\n      expect(result.current.items.length).toBeLessThanOrEqual(1000);\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}