c97f2f4018a5fe174f1a43c228a16fc4
/* istanbul ignore next */ function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _templateObject;
function cov_6fvmovwly() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/health/pipeline/route.ts";
  var hash = "5d6bdf2563d579512bd16e1d67ce38a9cf0e7227";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/health/pipeline/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "1": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 30
        }
      },
      "2": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 165,
          column: 3
        }
      },
      "3": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 49
        }
      },
      "4": {
        start: {
          line: 29,
          column: 19
        },
        end: {
          line: 32,
          column: 6
        }
      },
      "5": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 62
        }
      },
      "6": {
        start: {
          line: 37,
          column: 43
        },
        end: {
          line: 40,
          column: 6
        }
      },
      "7": {
        start: {
          line: 43,
          column: 24
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "8": {
        start: {
          line: 46,
          column: 29
        },
        end: {
          line: 46,
          column: 64
        }
      },
      "9": {
        start: {
          line: 47,
          column: 28
        },
        end: {
          line: 47,
          column: 68
        }
      },
      "10": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "11": {
        start: {
          line: 89,
          column: 10
        },
        end: {
          line: 93,
          column: 12
        }
      },
      "12": {
        start: {
          line: 94,
          column: 10
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "13": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      "14": {
        start: {
          line: 119,
          column: 27
        },
        end: {
          line: 119,
          column: 56
        }
      },
      "15": {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "16": {
        start: {
          line: 140,
          column: 53
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "17": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 45
        }
      },
      "18": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 153,
          column: 60
        }
      },
      "19": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 164,
          column: 6
        }
      },
      "20": {
        start: {
          line: 173,
          column: 2
        },
        end: {
          line: 196,
          column: 3
        }
      },
      "21": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "22": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 47
        }
      },
      "23": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 184,
          column: 7
        }
      },
      "24": {
        start: {
          line: 182,
          column: 44
        },
        end: {
          line: 182,
          column: 57
        }
      },
      "25": {
        start: {
          line: 183,
          column: 44
        },
        end: {
          line: 183,
          column: 52
        }
      },
      "26": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 186,
          column: 52
        }
      },
      "27": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 195,
          column: 6
        }
      },
      "28": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 209,
          column: 3
        }
      },
      "29": {
        start: {
          line: 211,
          column: 23
        },
        end: {
          line: 215,
          column: 3
        }
      },
      "30": {
        start: {
          line: 213,
          column: 6
        },
        end: {
          line: 213,
          column: 57
        }
      },
      "31": {
        start: {
          line: 217,
          column: 2
        },
        end: {
          line: 222,
          column: 35
        }
      },
      "32": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 37
        }
      },
      "33": {
        start: {
          line: 222,
          column: 21
        },
        end: {
          line: 222,
          column: 33
        }
      },
      "34": {
        start: {
          line: 229,
          column: 14
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "35": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 234,
          column: 3
        }
      },
      "36": {
        start: {
          line: 233,
          column: 15
        },
        end: {
          line: 233,
          column: 43
        }
      },
      "37": {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 237,
          column: 3
        }
      },
      "38": {
        start: {
          line: 236,
          column: 15
        },
        end: {
          line: 236,
          column: 42
        }
      },
      "39": {
        start: {
          line: 239,
          column: 2
        },
        end: {
          line: 239,
          column: 41
        }
      },
      "40": {
        start: {
          line: 240,
          column: 2
        },
        end: {
          line: 240,
          column: 40
        }
      },
      "41": {
        start: {
          line: 243,
          column: 2
        },
        end: {
          line: 248,
          column: 3
        }
      },
      "42": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 247,
          column: 16
        }
      },
      "43": {
        start: {
          line: 250,
          column: 2
        },
        end: {
          line: 252,
          column: 3
        }
      },
      "44": {
        start: {
          line: 251,
          column: 4
        },
        end: {
          line: 251,
          column: 16
        }
      },
      "45": {
        start: {
          line: 254,
          column: 2
        },
        end: {
          line: 259,
          column: 3
        }
      },
      "46": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 258,
          column: 16
        }
      },
      "47": {
        start: {
          line: 261,
          column: 2
        },
        end: {
          line: 261,
          column: 28
        }
      },
      "48": {
        start: {
          line: 268,
          column: 2
        },
        end: {
          line: 300,
          column: 3
        }
      },
      "49": {
        start: {
          line: 271,
          column: 27
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "50": {
        start: {
          line: 296,
          column: 4
        },
        end: {
          line: 296,
          column: 26
        }
      },
      "51": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 298,
          column: 61
        }
      },
      "52": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 299,
          column: 14
        }
      },
      "53": {
        start: {
          line: 311,
          column: 2
        },
        end: {
          line: 317,
          column: 3
        }
      },
      "54": {
        start: {
          line: 312,
          column: 4
        },
        end: {
          line: 316,
          column: 6
        }
      },
      "55": {
        start: {
          line: 319,
          column: 21
        },
        end: {
          line: 321,
          column: 10
        }
      },
      "56": {
        start: {
          line: 320,
          column: 14
        },
        end: {
          line: 320,
          column: 41
        }
      },
      "57": {
        start: {
          line: 322,
          column: 22
        },
        end: {
          line: 322,
          column: 72
        }
      },
      "58": {
        start: {
          line: 324,
          column: 24
        },
        end: {
          line: 324,
          column: 37
        }
      },
      "59": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 326,
          column: 58
        }
      },
      "60": {
        start: {
          line: 329,
          column: 2
        },
        end: {
          line: 336,
          column: 3
        }
      },
      "61": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 331,
          column: 23
        }
      },
      "62": {
        start: {
          line: 332,
          column: 9
        },
        end: {
          line: 336,
          column: 3
        }
      },
      "63": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 333,
          column: 24
        }
      },
      "64": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 335,
          column: 25
        }
      },
      "65": {
        start: {
          line: 338,
          column: 2
        },
        end: {
          line: 342,
          column: 4
        }
      },
      "66": {
        start: {
          line: 353,
          column: 2
        },
        end: {
          line: 378,
          column: 4
        }
      },
      "67": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 418,
          column: 3
        }
      },
      "68": {
        start: {
          line: 389,
          column: 8
        },
        end: {
          line: 389,
          column: 41
        }
      },
      "69": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 20
        }
      },
      "70": {
        start: {
          line: 396,
          column: 27
        },
        end: {
          line: 396,
          column: 59
        }
      },
      "71": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 397,
          column: 41
        }
      },
      "72": {
        start: {
          line: 403,
          column: 24
        },
        end: {
          line: 405,
          column: 10
        }
      },
      "73": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 27
        }
      },
      "74": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 415,
          column: 10
        }
      },
      "75": {
        start: {
          line: 420,
          column: 18
        },
        end: {
          line: 420,
          column: 20
        }
      },
      "76": {
        start: {
          line: 422,
          column: 2
        },
        end: {
          line: 437,
          column: 3
        }
      },
      "77": {
        start: {
          line: 423,
          column: 4
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "78": {
        start: {
          line: 424,
          column: 21
        },
        end: {
          line: 424,
          column: 38
        }
      },
      "79": {
        start: {
          line: 425,
          column: 6
        },
        end: {
          line: 429,
          column: 9
        }
      },
      "80": {
        start: {
          line: 431,
          column: 6
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "81": {
        start: {
          line: 439,
          column: 2
        },
        end: {
          line: 439,
          column: 17
        }
      },
      "82": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 43
        }
      },
      "83": {
        start: {
          line: 447,
          column: 2
        },
        end: {
          line: 447,
          column: 36
        }
      },
      "84": {
        start: {
          line: 447,
          column: 19
        },
        end: {
          line: 447,
          column: 36
        }
      },
      "85": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 448,
          column: 56
        }
      },
      "86": {
        start: {
          line: 449,
          column: 2
        },
        end: {
          line: 449,
          column: 78
        }
      },
      "87": {
        start: {
          line: 453,
          column: 14
        },
        end: {
          line: 453,
          column: 24
        }
      },
      "88": {
        start: {
          line: 454,
          column: 17
        },
        end: {
          line: 454,
          column: 47
        }
      },
      "89": {
        start: {
          line: 455,
          column: 19
        },
        end: {
          line: 455,
          column: 45
        }
      },
      "90": {
        start: {
          line: 456,
          column: 20
        },
        end: {
          line: 456,
          column: 45
        }
      },
      "91": {
        start: {
          line: 458,
          column: 2
        },
        end: {
          line: 465,
          column: 3
        }
      },
      "92": {
        start: {
          line: 459,
          column: 4
        },
        end: {
          line: 459,
          column: 37
        }
      },
      "93": {
        start: {
          line: 460,
          column: 9
        },
        end: {
          line: 465,
          column: 3
        }
      },
      "94": {
        start: {
          line: 461,
          column: 4
        },
        end: {
          line: 461,
          column: 36
        }
      },
      "95": {
        start: {
          line: 463,
          column: 21
        },
        end: {
          line: 463,
          column: 47
        }
      },
      "96": {
        start: {
          line: 464,
          column: 4
        },
        end: {
          line: 464,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 24,
            column: 22
          },
          end: {
            line: 24,
            column: 25
          }
        },
        loc: {
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        loc: {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 88
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 140,
            column: 42
          }
        },
        loc: {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 144,
            column: 11
          }
        },
        line: 140
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 172,
            column: 22
          },
          end: {
            line: 172,
            column: 26
          }
        },
        loc: {
          start: {
            line: 172,
            column: 49
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 172
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 182,
            column: 32
          },
          end: {
            line: 182,
            column: 33
          }
        },
        loc: {
          start: {
            line: 182,
            column: 44
          },
          end: {
            line: 182,
            column: 57
          }
        },
        line: 182
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 183,
            column: 37
          },
          end: {
            line: 183,
            column: 38
          }
        },
        loc: {
          start: {
            line: 183,
            column: 44
          },
          end: {
            line: 183,
            column: 52
          }
        },
        line: 183
      },
      "6": {
        name: "performHealthChecks",
        decl: {
          start: {
            line: 202,
            column: 15
          },
          end: {
            line: 202,
            column: 34
          }
        },
        loc: {
          start: {
            line: 202,
            column: 72
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 202
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 212,
            column: 24
          },
          end: {
            line: 212,
            column: 25
          }
        },
        loc: {
          start: {
            line: 213,
            column: 6
          },
          end: {
            line: 213,
            column: 57
          }
        },
        line: 213
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 219,
            column: 6
          },
          end: {
            line: 219,
            column: 7
          }
        },
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 220,
            column: 37
          }
        },
        line: 220
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 222,
            column: 9
          },
          end: {
            line: 222,
            column: 10
          }
        },
        loc: {
          start: {
            line: 222,
            column: 21
          },
          end: {
            line: 222,
            column: 33
          }
        },
        line: 222
      },
      "10": {
        name: "calculateOverallHealth",
        decl: {
          start: {
            line: 228,
            column: 9
          },
          end: {
            line: 228,
            column: 31
          }
        },
        loc: {
          start: {
            line: 228,
            column: 75
          },
          end: {
            line: 262,
            column: 1
          }
        },
        line: 228
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 15
          },
          end: {
            line: 233,
            column: 43
          }
        },
        line: 233
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 15
          },
          end: {
            line: 236,
            column: 42
          }
        },
        line: 236
      },
      "13": {
        name: "getRecentPipelineExecutions",
        decl: {
          start: {
            line: 267,
            column: 15
          },
          end: {
            line: 267,
            column: 42
          }
        },
        loc: {
          start: {
            line: 267,
            column: 61
          },
          end: {
            line: 301,
            column: 1
          }
        },
        line: 267
      },
      "14": {
        name: "analyzeExecutionHealth",
        decl: {
          start: {
            line: 306,
            column: 9
          },
          end: {
            line: 306,
            column: 31
          }
        },
        loc: {
          start: {
            line: 310,
            column: 2
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 310
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 320,
            column: 4
          },
          end: {
            line: 320,
            column: 5
          }
        },
        loc: {
          start: {
            line: 320,
            column: 14
          },
          end: {
            line: 320,
            column: 41
          }
        },
        line: 320
      },
      "16": {
        name: "getDetailedHealthInfo",
        decl: {
          start: {
            line: 348,
            column: 15
          },
          end: {
            line: 348,
            column: 36
          }
        },
        loc: {
          start: {
            line: 351,
            column: 3
          },
          end: {
            line: 379,
            column: 1
          }
        },
        line: 351
      },
      "17": {
        name: "runPipelineTest",
        decl: {
          start: {
            line: 384,
            column: 15
          },
          end: {
            line: 384,
            column: 30
          }
        },
        loc: {
          start: {
            line: 384,
            column: 49
          },
          end: {
            line: 440,
            column: 1
          }
        },
        line: 384
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        },
        loc: {
          start: {
            line: 388,
            column: 24
          },
          end: {
            line: 391,
            column: 7
          }
        },
        line: 388
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        loc: {
          start: {
            line: 395,
            column: 24
          },
          end: {
            line: 398,
            column: 7
          }
        },
        line: 395
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 402,
            column: 13
          }
        },
        loc: {
          start: {
            line: 402,
            column: 24
          },
          end: {
            line: 407,
            column: 7
          }
        },
        line: 402
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 411,
            column: 12
          },
          end: {
            line: 411,
            column: 13
          }
        },
        loc: {
          start: {
            line: 411,
            column: 24
          },
          end: {
            line: 416,
            column: 7
          }
        },
        line: 411
      },
      "22": {
        name: "formatBytes",
        decl: {
          start: {
            line: 445,
            column: 9
          },
          end: {
            line: 445,
            column: 20
          }
        },
        loc: {
          start: {
            line: 445,
            column: 44
          },
          end: {
            line: 450,
            column: 1
          }
        },
        line: 445
      },
      "23": {
        name: "formatTimeAgo",
        decl: {
          start: {
            line: 452,
            column: 9
          },
          end: {
            line: 452,
            column: 22
          }
        },
        loc: {
          start: {
            line: 452,
            column: 43
          },
          end: {
            line: 466,
            column: 1
          }
        },
        line: 452
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 57,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 54,
            column: 21
          }
        }, {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 25
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 14
          },
          end: {
            line: 56,
            column: 24
          }
        }, {
          start: {
            line: 57,
            column: 14
          },
          end: {
            line: 57,
            column: 25
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "3": {
        loc: {
          start: {
            line: 160,
            column: 17
          },
          end: {
            line: 160,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 42
          },
          end: {
            line: 160,
            column: 55
          }
        }, {
          start: {
            line: 160,
            column: 58
          },
          end: {
            line: 160,
            column: 73
          }
        }],
        line: 160
      },
      "4": {
        loc: {
          start: {
            line: 191,
            column: 17
          },
          end: {
            line: 191,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 191,
            column: 55
          }
        }, {
          start: {
            line: 191,
            column: 58
          },
          end: {
            line: 191,
            column: 73
          }
        }],
        line: 191
      },
      "5": {
        loc: {
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 209,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 26
          },
          end: {
            line: 203,
            column: 34
          }
        }, {
          start: {
            line: 203,
            column: 38
          },
          end: {
            line: 209,
            column: 3
          }
        }],
        line: 203
      },
      "6": {
        loc: {
          start: {
            line: 243,
            column: 2
          },
          end: {
            line: 248,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 2
          },
          end: {
            line: 248,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "7": {
        loc: {
          start: {
            line: 250,
            column: 2
          },
          end: {
            line: 252,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 2
          },
          end: {
            line: 252,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "8": {
        loc: {
          start: {
            line: 254,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "9": {
        loc: {
          start: {
            line: 311,
            column: 2
          },
          end: {
            line: 317,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 2
          },
          end: {
            line: 317,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "10": {
        loc: {
          start: {
            line: 329,
            column: 2
          },
          end: {
            line: 336,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 2
          },
          end: {
            line: 336,
            column: 3
          }
        }, {
          start: {
            line: 332,
            column: 9
          },
          end: {
            line: 336,
            column: 3
          }
        }],
        line: 329
      },
      "11": {
        loc: {
          start: {
            line: 329,
            column: 6
          },
          end: {
            line: 329,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 6
          },
          end: {
            line: 329,
            column: 23
          }
        }, {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 329,
            column: 59
          }
        }],
        line: 329
      },
      "12": {
        loc: {
          start: {
            line: 332,
            column: 9
          },
          end: {
            line: 336,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 9
          },
          end: {
            line: 336,
            column: 3
          }
        }, {
          start: {
            line: 334,
            column: 9
          },
          end: {
            line: 336,
            column: 3
          }
        }],
        line: 332
      },
      "13": {
        loc: {
          start: {
            line: 397,
            column: 15
          },
          end: {
            line: 397,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 15
          },
          end: {
            line: 397,
            column: 32
          }
        }, {
          start: {
            line: 397,
            column: 36
          },
          end: {
            line: 397,
            column: 40
          }
        }],
        line: 397
      },
      "14": {
        loc: {
          start: {
            line: 413,
            column: 10
          },
          end: {
            line: 414,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 10
          },
          end: {
            line: 413,
            column: 54
          }
        }, {
          start: {
            line: 414,
            column: 10
          },
          end: {
            line: 414,
            column: 52
          }
        }],
        line: 413
      },
      "15": {
        loc: {
          start: {
            line: 434,
            column: 15
          },
          end: {
            line: 434,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 40
          },
          end: {
            line: 434,
            column: 53
          }
        }, {
          start: {
            line: 434,
            column: 56
          },
          end: {
            line: 434,
            column: 71
          }
        }],
        line: 434
      },
      "16": {
        loc: {
          start: {
            line: 447,
            column: 2
          },
          end: {
            line: 447,
            column: 36
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 2
          },
          end: {
            line: 447,
            column: 36
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "17": {
        loc: {
          start: {
            line: 458,
            column: 2
          },
          end: {
            line: 465,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 2
          },
          end: {
            line: 465,
            column: 3
          }
        }, {
          start: {
            line: 460,
            column: 9
          },
          end: {
            line: 465,
            column: 3
          }
        }],
        line: 458
      },
      "18": {
        loc: {
          start: {
            line: 460,
            column: 9
          },
          end: {
            line: 465,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 9
          },
          end: {
            line: 465,
            column: 3
          }
        }, {
          start: {
            line: 462,
            column: 9
          },
          end: {
            line: 465,
            column: 3
          }
        }],
        line: 460
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d6bdf2563d579512bd16e1d67ce38a9cf0e7227"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6fvmovwly = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6fvmovwly();
function _taggedTemplateLiteral(e, t) { return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } })); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Pipeline Health Check API
 * Comprehensive health monitoring for the Transfer Juice data pipeline
 */

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { metricsCollector } from "@/lib/monitoring/pipelineMetrics";
import { CONFIG } from "@/config/pipeline";
import { z } from "zod";

// Health check request schema
var HealthCheckRequestSchema =
/* istanbul ignore next */
(cov_6fvmovwly().s[0]++, z.object({
  detailed: z[
  /* istanbul ignore next */
  "boolean"]().optional()[
  /* istanbul ignore next */
  "default"](false),
  services: z.array(z[
  /* istanbul ignore next */
  "enum"](["database", "ai", "twitter", "websocket", "cache"])).optional()
}));

/**
 * GET /api/health/pipeline
 * Returns comprehensive pipeline health status
 */
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}

/**
 * POST /api/health/pipeline/test
 * Run comprehensive pipeline test
 */
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var startTime, _searchParams$get, _ref, searchParams, params, _ref2, _ref3, currentMetrics, healthChecks, healthScore, recentExecutions, executionHealth, healthResponse, detailedInfo, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_6fvmovwly().f[0]++;
          startTime = (cov_6fvmovwly().s[1]++, Date.now());
          cov_6fvmovwly().s[2]++;
          _context.p = 1;
          _ref = (cov_6fvmovwly().s[3]++, new URL(request.url)), searchParams = _ref.searchParams;
          params = (cov_6fvmovwly().s[4]++, HealthCheckRequestSchema.parse({
            detailed: searchParams.get("detailed") === "true",
            services:
            /* istanbul ignore next */
            (_searchParams$get = searchParams.get("services")) === null || _searchParams$get === void 0 ? void 0 :
            /* istanbul ignore next */
            _searchParams$get.split(",")
          }));
          cov_6fvmovwly().s[5]++;
          console.log("🏥 Pipeline health check requested", params);

          // Get current metrics and health status
          cov_6fvmovwly().s[6]++;
          _context.n = 2;
          return Promise.all([metricsCollector.getCurrentMetrics(), performHealthChecks(params.services)]);
        case 2:
          _ref2 = _context.v;
          _ref3 = _slicedToArray(_ref2, 2);
          currentMetrics = _ref3[0];
          healthChecks = _ref3[1];
          // Calculate overall health score
          healthScore = (cov_6fvmovwly().s[7]++, calculateOverallHealth(healthChecks, currentMetrics)); // Check recent pipeline executions
          cov_6fvmovwly().s[8]++;
          _context.n = 3;
          return getRecentPipelineExecutions();
        case 3:
          recentExecutions = _context.v;
          executionHealth = (cov_6fvmovwly().s[9]++, analyzeExecutionHealth(recentExecutions)); // Basic health response
          healthResponse = (cov_6fvmovwly().s[10]++, {
            timestamp: new Date().toISOString(),
            status: healthScore >= 90 ?
            /* istanbul ignore next */
            (cov_6fvmovwly().b[0][0]++, "healthy") :
            /* istanbul ignore next */
            (cov_6fvmovwly().b[0][1]++, healthScore >= 70 ?
            /* istanbul ignore next */
            (cov_6fvmovwly().b[1][0]++, "degraded") :
            /* istanbul ignore next */
            (cov_6fvmovwly().b[1][1]++, "unhealthy")),
            overallScore: healthScore,
            responseTime: Date.now() - startTime + "ms",
            // Core pipeline metrics
            pipeline: {
              status: executionHealth.status,
              lastExecution: executionHealth.lastExecution,
              successRate: executionHealth.successRate + "%",
              averageProcessingTime: currentMetrics.averageProcessingTime + "ms",
              itemsProcessedLastHour: currentMetrics.throughput
            },
            // Quality metrics
            quality: {
              averageScore: currentMetrics.averageQualityScore.toFixed(1),
              passRate: (currentMetrics.qualityPassRate * 100).toFixed(1) + "%",
              humanReviewRate: (currentMetrics.humanReviewRate * 100).toFixed(1) + "%",
              terryVoiceConsistency: "Tracking"
            },
            // System resources
            resources: {
              memoryUsage: currentMetrics.memoryUsage.toFixed(1) + "%",
              cpuUsage: currentMetrics.cpuUsage.toFixed(1) + "%",
              cacheHitRate: (currentMetrics.cacheHitRate * 100).toFixed(1) + "%"
            },
            // External services
            services: healthChecks.reduce(function (acc, check) {
              /* istanbul ignore next */
              cov_6fvmovwly().f[1]++;
              cov_6fvmovwly().s[11]++;
              acc[check.service] = {
                status: check.status,
                responseTime: check.responseTime + "ms",
                lastChecked: check.timestamp.toISOString()
              };
              /* istanbul ignore next */
              cov_6fvmovwly().s[12]++;
              return acc;
            }, {}),
            // Content metrics
            content: {
              totalFeedItems: currentMetrics.totalFeedItems,
              partnerContentRatio: (currentMetrics.partnerContentRatio * 100).toFixed(1) + "%",
              uniqueTags: currentMetrics.uniqueTagsUsed,
              websocketConnections: currentMetrics.websocketConnections
            },
            // Configuration status
            configuration: {
              environment: CONFIG.env.NODE_ENV,
              qualityThreshold: CONFIG.quality.autoPublishThreshold,
              terryThreshold: CONFIG.quality.thresholds.terryVoice,
              processingTimeout: CONFIG.performance.maxProcessingTime + "ms"
            }
          }); // Add detailed information if requested
          cov_6fvmovwly().s[13]++;
          if (!params.detailed) {
            _context.n = 5;
            break;
          }
          cov_6fvmovwly().b[2][0]++;
          cov_6fvmovwly().s[14]++;
          _context.n = 4;
          return getDetailedHealthInfo();
        case 4:
          detailedInfo = _context.v;
          cov_6fvmovwly().s[15]++;
          return _context.a(2, NextResponse.json(
          /* istanbul ignore next */
          _objectSpread(_objectSpread({}, healthResponse), {}, {
            detailed: {
              recentExecutions: recentExecutions.slice(0, 10),
              performanceMetrics: {
                databaseResponseTime: currentMetrics.databaseResponseTime + "ms",
                aiServiceResponseTime: currentMetrics.aiServiceResponseTime + "ms",
                twitterApiResponseTime: currentMetrics.twitterApiResponseTime + "ms",
                feedUpdateLatency: currentMetrics.feedUpdateLatency.toFixed(2) + "s"
              },
              systemInfo: {
                nodeVersion: process.version,
                platform: process.platform,
                uptime: process.uptime() + "s",
                memoryHeap: formatBytes(process.memoryUsage().heapUsed),
                memoryTotal: formatBytes(process.memoryUsage().heapTotal)
              },
              healthChecks: healthChecks.map(function (check) {
                /* istanbul ignore next */
                cov_6fvmovwly().f[2]++;
                cov_6fvmovwly().s[16]++;
                return /* istanbul ignore next */_objectSpread(_objectSpread({}, check), {}, {
                  details: check.details,
                  error: check.error
                });
              }),
              alerts: detailedInfo.recentAlerts,
              trends: detailedInfo.trends
            }
          })));
        case 5:
          cov_6fvmovwly().b[2][1]++;
        case 6:
          cov_6fvmovwly().s[17]++;
          return _context.a(2, NextResponse.json(healthResponse));
        case 7:
          _context.p = 7;
          _t = _context.v;
          cov_6fvmovwly().s[18]++;
          console.error("❌ Pipeline health check failed:",
          /* istanbul ignore next */
          _t);
          cov_6fvmovwly().s[19]++;
          return _context.a(2, NextResponse.json({
            timestamp: new Date().toISOString(),
            status: "unhealthy",
            error: "Health check failed",
            details:
            /* istanbul ignore next */
            _t instanceof Error ?
            /* istanbul ignore next */
            (cov_6fvmovwly().b[3][0]++,
            /* istanbul ignore next */
            _t.message) :
            /* istanbul ignore next */
            (cov_6fvmovwly().b[3][1]++, "Unknown error"),
            responseTime: Date.now() - startTime + "ms"
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _GET.apply(this, arguments);
}
export
/* istanbul ignore next */
function POST(_x2) {
  return _POST.apply(this, arguments);
}

/**
 * Perform health checks on specified services
 */
/* istanbul ignore next */
function _POST() {
  _POST = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(request)
  /* istanbul ignore next */
  {
    var testResults, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_6fvmovwly().f[3]++;
          cov_6fvmovwly().s[20]++;
          _context2.p = 1;
          cov_6fvmovwly().s[21]++;
          console.log("🧪 Running comprehensive pipeline test");
          cov_6fvmovwly().s[22]++;
          _context2.n = 2;
          return runPipelineTest();
        case 2:
          testResults = _context2.v;
          cov_6fvmovwly().s[23]++;
          return _context2.a(2, NextResponse.json({
            timestamp: new Date().toISOString(),
            testType: "comprehensive",
            results: testResults,
            passed: testResults.every(function (result) {
              /* istanbul ignore next */
              cov_6fvmovwly().f[4]++;
              cov_6fvmovwly().s[24]++;
              return result.passed;
            }),
            summary:
            /* istanbul ignore next */
            "".concat(testResults.filter(function (r) {
              /* istanbul ignore next */
              cov_6fvmovwly().f[5]++;
              cov_6fvmovwly().s[25]++;
              return r.passed;
            }).length, "/").concat(testResults.length, " tests passed")
          }));
        case 3:
          _context2.p = 3;
          _t2 = _context2.v;
          cov_6fvmovwly().s[26]++;
          console.error("❌ Pipeline test failed:",
          /* istanbul ignore next */
          _t2);
          cov_6fvmovwly().s[27]++;
          return _context2.a(2, NextResponse.json({
            error: "Pipeline test failed",
            details:
            /* istanbul ignore next */
            _t2 instanceof Error ?
            /* istanbul ignore next */
            (cov_6fvmovwly().b[4][0]++,
            /* istanbul ignore next */
            _t2.message) :
            /* istanbul ignore next */
            (cov_6fvmovwly().b[4][1]++, "Unknown error"),
            timestamp: new Date().toISOString()
          }, {
            status: 500
          }));
      }
    }, _callee2, null, [[1, 3]]);
  }));
  return _POST.apply(this, arguments);
}
/* istanbul ignore next */
function performHealthChecks(_x3) {
  return _performHealthChecks.apply(this, arguments);
}
/**
 * Calculate overall health score
 */
/* istanbul ignore next */
function _performHealthChecks() {
  _performHealthChecks = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(services)
  /* istanbul ignore next */
  {
    var servicesToCheck, healthChecks;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_6fvmovwly().f[6]++;
          servicesToCheck = (cov_6fvmovwly().s[28]++,
          /* istanbul ignore next */
          (cov_6fvmovwly().b[5][0]++, services) ||
          /* istanbul ignore next */
          (cov_6fvmovwly().b[5][1]++, ["database", "ai", "twitter", "websocket", "cache"]));
          cov_6fvmovwly().s[29]++;
          _context3.n = 1;
          return Promise.allSettled(servicesToCheck.map(function (service) {
            /* istanbul ignore next */
            cov_6fvmovwly().f[7]++;
            cov_6fvmovwly().s[30]++;
            return metricsCollector.checkServiceHealth(service);
          }));
        case 1:
          healthChecks = _context3.v;
          cov_6fvmovwly().s[31]++;
          return _context3.a(2, healthChecks.filter(function (result) {
            /* istanbul ignore next */
            cov_6fvmovwly().f[8]++;
            cov_6fvmovwly().s[32]++;
            return result.status === "fulfilled";
          }).map(function (result) {
            /* istanbul ignore next */
            cov_6fvmovwly().f[9]++;
            cov_6fvmovwly().s[33]++;
            return result.value;
          }));
      }
    }, _callee3);
  }));
  return _performHealthChecks.apply(this, arguments);
}
function calculateOverallHealth(healthChecks, metrics) {
  /* istanbul ignore next */
  cov_6fvmovwly().f[10]++;
  var score =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[34]++, 100);

  // Deduct points for unhealthy services
  var unhealthyServices =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[35]++, healthChecks.filter(function (check) {
    /* istanbul ignore next */
    cov_6fvmovwly().f[11]++;
    cov_6fvmovwly().s[36]++;
    return check.status === "unhealthy";
  }));
  var degradedServices =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[37]++, healthChecks.filter(function (check) {
    /* istanbul ignore next */
    cov_6fvmovwly().f[12]++;
    cov_6fvmovwly().s[38]++;
    return check.status === "degraded";
  }));
  /* istanbul ignore next */
  cov_6fvmovwly().s[39]++;
  score -= unhealthyServices.length * 30; // -30 points per unhealthy service
  /* istanbul ignore next */
  cov_6fvmovwly().s[40]++;
  score -= degradedServices.length * 15; // -15 points per degraded service

  // Deduct points for poor performance
  /* istanbul ignore next */
  cov_6fvmovwly().s[41]++;
  if (metrics.averageProcessingTime > CONFIG.monitoring.alerts.performanceThreshold) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[6][0]++;
    cov_6fvmovwly().s[42]++;
    score -= 20; // Slow processing
  } else
  /* istanbul ignore next */
  {
    cov_6fvmovwly().b[6][1]++;
  }
  cov_6fvmovwly().s[43]++;
  if (metrics.errorRate > CONFIG.monitoring.alerts.pipelineFailureThreshold) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[7][0]++;
    cov_6fvmovwly().s[44]++;
    score -= 25; // High error rate
  } else
  /* istanbul ignore next */
  {
    cov_6fvmovwly().b[7][1]++;
  }
  cov_6fvmovwly().s[45]++;
  if (metrics.qualityPassRate < CONFIG.monitoring.alerts.qualityDegradationThreshold) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[8][0]++;
    cov_6fvmovwly().s[46]++;
    score -= 15; // Quality issues
  } else
  /* istanbul ignore next */
  {
    cov_6fvmovwly().b[8][1]++;
  }
  cov_6fvmovwly().s[47]++;
  return Math.max(score, 0);
}

/**
 * Get recent pipeline executions for analysis
 */
/* istanbul ignore next */
function getRecentPipelineExecutions() {
  return _getRecentPipelineExecutions.apply(this, arguments);
}
/**
 * Analyze execution health from recent runs
 */
/* istanbul ignore next */
function _getRecentPipelineExecutions() {
  _getRecentPipelineExecutions = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4()
  /* istanbul ignore next */
  {
    var mockExecutions, _t3;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          cov_6fvmovwly().f[13]++;
          cov_6fvmovwly().s[48]++;
          _context4.p = 1;
          // This would query your pipeline execution logs
          // For now, return mock data based on current metrics
          mockExecutions = (cov_6fvmovwly().s[49]++, [{
            id: "exec_" + Date.now(),
            startTime: new Date(Date.now() - 3600000),
            // 1 hour ago
            endTime: new Date(Date.now() - 3590000),
            // 59 minutes ago
            status: "completed",
            duration: 10000,
            itemsProcessed: 15,
            itemsSuccessful: 14,
            itemsFailed: 1,
            stage: "completed"
          }, {
            id: "exec_" + (Date.now() - 1000),
            startTime: new Date(Date.now() - 7200000),
            // 2 hours ago
            endTime: new Date(Date.now() - 7190000),
            // 1h 59m ago
            status: "completed",
            duration: 8500,
            itemsProcessed: 12,
            itemsSuccessful: 12,
            itemsFailed: 0,
            stage: "completed"
          }]);
          cov_6fvmovwly().s[50]++;
          return _context4.a(2, mockExecutions);
        case 2:
          _context4.p = 2;
          _t3 = _context4.v;
          cov_6fvmovwly().s[51]++;
          console.error("Failed to get recent executions:",
          /* istanbul ignore next */
          _t3);
          cov_6fvmovwly().s[52]++;
          return _context4.a(2, []);
      }
    }, _callee4, null, [[1, 2]]);
  }));
  return _getRecentPipelineExecutions.apply(this, arguments);
}
function analyzeExecutionHealth(executions) {
  /* istanbul ignore next */
  cov_6fvmovwly().f[14]++;
  cov_6fvmovwly().s[53]++;
  if (executions.length === 0) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[9][0]++;
    cov_6fvmovwly().s[54]++;
    return {
      status: "unhealthy",
      lastExecution: "No recent executions",
      successRate: 0
    };
  } else
  /* istanbul ignore next */
  {
    cov_6fvmovwly().b[9][1]++;
  }
  var successful =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[55]++, executions.filter(function (exec) {
    /* istanbul ignore next */
    cov_6fvmovwly().f[15]++;
    cov_6fvmovwly().s[56]++;
    return exec.status === "completed";
  }).length);
  var successRate =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[57]++, Math.round(successful / executions.length * 100));
  var lastExecution =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[58]++, executions[0]);
  var timeSinceLastExecution =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[59]++, Date.now() - new Date(lastExecution.endTime).getTime());
  var status;
  /* istanbul ignore next */
  cov_6fvmovwly().s[60]++;
  if (
  /* istanbul ignore next */
  (cov_6fvmovwly().b[11][0]++, successRate >= 90) &&
  /* istanbul ignore next */
  (cov_6fvmovwly().b[11][1]++, timeSinceLastExecution < 7200000)) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[10][0]++;
    cov_6fvmovwly().s[61]++;
    // 2 hours
    status = "healthy";
  } else {
    /* istanbul ignore next */
    cov_6fvmovwly().b[10][1]++;
    cov_6fvmovwly().s[62]++;
    if (successRate >= 70) {
      /* istanbul ignore next */
      cov_6fvmovwly().b[12][0]++;
      cov_6fvmovwly().s[63]++;
      status = "degraded";
    } else {
      /* istanbul ignore next */
      cov_6fvmovwly().b[12][1]++;
      cov_6fvmovwly().s[64]++;
      status = "unhealthy";
    }
  }
  /* istanbul ignore next */
  cov_6fvmovwly().s[65]++;
  return {
    status: status,
    lastExecution: formatTimeAgo(new Date(lastExecution.endTime)),
    successRate: successRate
  };
}

/**
 * Get detailed health information
 */
/* istanbul ignore next */
function getDetailedHealthInfo() {
  return _getDetailedHealthInfo.apply(this, arguments);
}
/**
 * Run comprehensive pipeline test
 */
/* istanbul ignore next */
function _getDetailedHealthInfo() {
  _getDetailedHealthInfo = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee5()
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          cov_6fvmovwly().f[16]++;
          cov_6fvmovwly().s[66]++;
          return _context5.a(2, {
            recentAlerts: [{
              id: "alert_1",
              type: "quality_degradation",
              message: "Quality score below threshold",
              timestamp: new Date(Date.now() - 1800000),
              // 30 minutes ago
              severity: "medium",
              resolved: true
            }],
            trends: [{
              metric: "processing_time",
              trend: "stable",
              change: "+2.3%",
              period: "24h"
            }, {
              metric: "quality_score",
              trend: "improving",
              change: "+5.1%",
              period: "24h"
            }]
          });
      }
    }, _callee5);
  }));
  return _getDetailedHealthInfo.apply(this, arguments);
}
/* istanbul ignore next */
function runPipelineTest() {
  return _runPipelineTest.apply(this, arguments);
}
/**
 * Utility functions
 */
/* istanbul ignore next */
function _runPipelineTest() {
  _runPipelineTest = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee0()
  /* istanbul ignore next */
  {
    var tests, results, _i, _tests, test, passed, _t4;
    return _regenerator().w(function (_context0) {
      while (1) switch (_context0.n) {
        case 0:
          cov_6fvmovwly().f[17]++;
          tests = (cov_6fvmovwly().s[67]++, [{
            name: "Database Connectivity",
            test:
            /* istanbul ignore next */
            function () {
              var _test = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
              /* istanbul ignore next */
              _callee6()
              /* istanbul ignore next */
              {
                return _regenerator().w(function (_context6) {
                  while (1) switch (_context6.n) {
                    case 0:
                      cov_6fvmovwly().f[18]++;
                      cov_6fvmovwly().s[68]++;
                      _context6.n = 1;
                      return prisma.$queryRaw(_templateObject || (_templateObject = _taggedTemplateLiteral(["SELECT 1"])));
                    case 1:
                      cov_6fvmovwly().s[69]++;
                      return _context6.a(2, true);
                  }
                }, _callee6);
              }));
              function test() {
                return _test.apply(this, arguments);
              }
              return test;
            }()
          }, {
            name: "Configuration Validation",
            test:
            /* istanbul ignore next */
            function () {
              var _test2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
              /* istanbul ignore next */
              _callee7()
              /* istanbul ignore next */
              {
                var _CONFIG$validateConfi, _ref4;
                var validation;
                return _regenerator().w(function (_context7) {
                  while (1) switch (_context7.n) {
                    case 0:
                      cov_6fvmovwly().f[19]++;
                      validation = (cov_6fvmovwly().s[70]++, (_CONFIG$validateConfi = CONFIG.validateConfiguration) === null || _CONFIG$validateConfi === void 0 ? void 0 :
                      /* istanbul ignore next */
                      _CONFIG$validateConfi.call(CONFIG));
                      cov_6fvmovwly().s[71]++;
                      return _context7.a(2, (_ref4 = (cov_6fvmovwly().b[13][0]++, validation === null || validation === void 0 ? void 0 : validation.valid)) !== null && _ref4 !== void 0 ? _ref4 : (cov_6fvmovwly().b[13][1]++, true));
                  }
                }, _callee7);
              }));
              function test() {
                return _test2.apply(this, arguments);
              }
              return test;
            }()
          }, {
            name: "ITK Sources Available",
            test:
            /* istanbul ignore next */
            function () {
              var _test3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
              /* istanbul ignore next */
              _callee8()
              /* istanbul ignore next */
              {
                var sources;
                return _regenerator().w(function (_context8) {
                  while (1) switch (_context8.n) {
                    case 0:
                      cov_6fvmovwly().f[20]++;
                      cov_6fvmovwly().s[72]++;
                      _context8.n = 1;
                      return prisma.itkSource.count({
                        where: {
                          isActive: true
                        }
                      });
                    case 1:
                      sources = _context8.v;
                      cov_6fvmovwly().s[73]++;
                      return _context8.a(2, sources > 0);
                  }
                }, _callee8);
              }));
              function test() {
                return _test3.apply(this, arguments);
              }
              return test;
            }()
          }, {
            name: "Quality Thresholds",
            test:
            /* istanbul ignore next */
            function () {
              var _test4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
              /* istanbul ignore next */
              _callee9()
              /* istanbul ignore next */
              {
                return _regenerator().w(function (_context9) {
                  while (1) switch (_context9.n) {
                    case 0:
                      cov_6fvmovwly().f[21]++;
                      cov_6fvmovwly().s[74]++;
                      return _context9.a(2,
                      /* istanbul ignore next */
                      (cov_6fvmovwly().b[14][0]++, CONFIG.quality.thresholds.terryVoice >= 0.75) &&
                      /* istanbul ignore next */
                      (cov_6fvmovwly().b[14][1]++, CONFIG.quality.autoPublishThreshold >= 0.8));
                  }
                }, _callee9);
              }));
              function test() {
                return _test4.apply(this, arguments);
              }
              return test;
            }()
          }]);
          results = (cov_6fvmovwly().s[75]++, []);
          cov_6fvmovwly().s[76]++;
          _i = 0, _tests = tests;
        case 1:
          if (!(_i < _tests.length)) {
            _context0.n = 6;
            break;
          }
          test = _tests[_i];
          cov_6fvmovwly().s[77]++;
          _context0.p = 2;
          cov_6fvmovwly().s[78]++;
          _context0.n = 3;
          return test.test();
        case 3:
          passed = _context0.v;
          cov_6fvmovwly().s[79]++;
          results.push({
            name: test.name,
            passed: passed,
            error: null
          });
          _context0.n = 5;
          break;
        case 4:
          _context0.p = 4;
          _t4 = _context0.v;
          cov_6fvmovwly().s[80]++;
          results.push({
            name: test.name,
            passed: false,
            error:
            /* istanbul ignore next */
            _t4 instanceof Error ?
            /* istanbul ignore next */
            (cov_6fvmovwly().b[15][0]++,
            /* istanbul ignore next */
            _t4.message) :
            /* istanbul ignore next */
            (cov_6fvmovwly().b[15][1]++, "Unknown error")
          });
        case 5:
          _i++;
          _context0.n = 1;
          break;
        case 6:
          cov_6fvmovwly().s[81]++;
          return _context0.a(2, results);
      }
    }, _callee0, null, [[2, 4]]);
  }));
  return _runPipelineTest.apply(this, arguments);
}
function formatBytes(bytes) {
  /* istanbul ignore next */
  cov_6fvmovwly().f[22]++;
  var sizes =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[82]++, ["Bytes", "KB", "MB", "GB"]);
  /* istanbul ignore next */
  cov_6fvmovwly().s[83]++;
  if (bytes === 0) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[16][0]++;
    cov_6fvmovwly().s[84]++;
    return "0 Bytes";
  } else
  /* istanbul ignore next */
  {
    cov_6fvmovwly().b[16][1]++;
  }
  var i =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[85]++, Math.floor(Math.log(bytes) / Math.log(1024)));
  /* istanbul ignore next */
  cov_6fvmovwly().s[86]++;
  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + " " + sizes[i];
}
function formatTimeAgo(date) {
  /* istanbul ignore next */
  cov_6fvmovwly().f[23]++;
  var now =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[87]++, new Date());
  var diffMs =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[88]++, now.getTime() - date.getTime());
  var diffMins =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[89]++, Math.floor(diffMs / 60000));
  var diffHours =
  /* istanbul ignore next */
  (cov_6fvmovwly().s[90]++, Math.floor(diffMins / 60));
  /* istanbul ignore next */
  cov_6fvmovwly().s[91]++;
  if (diffMins < 60) {
    /* istanbul ignore next */
    cov_6fvmovwly().b[17][0]++;
    cov_6fvmovwly().s[92]++;
    return /* istanbul ignore next */"".concat(diffMins, " minutes ago");
  } else {
    /* istanbul ignore next */
    cov_6fvmovwly().b[17][1]++;
    cov_6fvmovwly().s[93]++;
    if (diffHours < 24) {
      /* istanbul ignore next */
      cov_6fvmovwly().b[18][0]++;
      cov_6fvmovwly().s[94]++;
      return /* istanbul ignore next */"".concat(diffHours, " hours ago");
    } else {
      /* istanbul ignore next */
      cov_6fvmovwly().b[18][1]++;
      var diffDays =
      /* istanbul ignore next */
      (cov_6fvmovwly().s[95]++, Math.floor(diffHours / 24));
      /* istanbul ignore next */
      cov_6fvmovwly().s[96]++;
      return /* istanbul ignore next */"".concat(diffDays, " days ago");
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,