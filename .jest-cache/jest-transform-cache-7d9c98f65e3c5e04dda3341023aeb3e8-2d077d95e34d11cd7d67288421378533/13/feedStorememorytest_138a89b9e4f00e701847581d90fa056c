795f32ff0ed2d3fa9763f9c643cdbb6f
"use strict";

// Mock the memory monitor since we're testing in Node.js environment
_getJestObj().mock("@/lib/performance/memoryMonitor", function () {
  return {
    getMemoryMetrics: jest.fn(function () {
      return {
        usedMB: 85,
        // Mock realistic memory usage
        totalMB: 4096,
        percentUsed: 2.08
      };
    }),
    checkMemoryThresholds: jest.fn(function () {
      return {
        level: "safe",
        shouldCleanup: false,
        message: "Memory usage is safe"
      };
    }),
    MemoryOptimizer: {
      estimateObjectSize: jest.fn(function (obj) {
        // Realistic size estimation based on JSON serialization
        return JSON.stringify(obj).length * 2; // Approximation
      })
    }
  };
});
var _react = require("@testing-library/react");
var _feedStore = require("../feedStore");
var _memoryMonitor = require("@/lib/performance/memoryMonitor");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * Memory Performance Tests for Feed Store
 * Tests memory usage with 1000+ items to verify <100MB target
 */
describe("FeedStore Memory Performance Tests", function () {
  beforeEach(function () {
    // Reset store state
    var _renderHook = (0, _react.renderHook)(function () {
        return (0, _feedStore.useFeedStore)();
      }),
      result = _renderHook.result;
    (0, _react.act)(function () {
      result.current.clearFilters();
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  describe("Memory Usage with Large Datasets", function () {
    it("should stay under 100MB with 1000 items", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var _renderHook2, result, generateTestItem, memoryStats;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            _renderHook2 = (0, _react.renderHook)(function () {
              return (0, _feedStore.useFeedStore)();
            }), result = _renderHook2.result; // Generate 1000 realistic feed items
            generateTestItem = function generateTestItem(index) {
              return {
                id: "feed-item-".concat(index),
                type: "itk",
                timestamp: new Date(Date.now() - index * 60000),
                // Staggered timestamps
                content: "Transfer update ".concat(index, ": Manchester United are in advanced talks for a new signing. The deal is progressing well with medical tests scheduled for next week. Fee expected to be around \xA3").concat(20 + index, "m including add-ons. More updates to follow as situation develops further."),
                terryCommentary: index % 3 === 0 ? "Right, transfer ".concat(index, " is either happening or it's not. The Terry's money is on \"maybe\".") : undefined,
                source: {
                  name: ["Fabrizio Romano", "David Ornstein", "Sky Sports"][index % 3],
                  handle: ["@FabrizioRomano", "@David_Ornstein", "@SkySports"][index % 3],
                  tier: 1 + index % 3,
                  reliability: 0.9 - index % 3 * 0.1,
                  region: ["GLOBAL", "UK", "ES"][index % 3]
                },
                tags: {
                  clubs: ["Club".concat(index % 20)],
                  // 20 different clubs
                  players: ["Player".concat(index % 50)],
                  // 50 different players
                  sources: ["Fabrizio Romano", "David Ornstein", "Sky Sports"][index % 3]
                },
                media: index % 5 === 0 ? {
                  type: "image",
                  url: "https://example.com/image".concat(index, ".jpg"),
                  altText: "Transfer image ".concat(index),
                  thumbnailUrl: "https://example.com/thumb".concat(index, ".jpg")
                } : undefined,
                engagement: {
                  shares: Math.floor(Math.random() * 100),
                  reactions: Math.floor(Math.random() * 500),
                  clicks: Math.floor(Math.random() * 200)
                },
                metadata: {
                  transferType: ["signing", "rumour", "medical", "confirmed"][index % 4],
                  priority: ["low", "medium", "high"][index % 3],
                  relevanceScore: 0.7 + Math.random() * 0.3,
                  league: ["PL", "LaLiga", "SerieA", "Bundesliga", "Ligue1"][index % 5]
                },
                isRead: Math.random() > 0.3,
                isNew: Math.random() > 0.8
              };
            }; // Load 1000 items in batches to simulate real usage
            _context4.n = 1;
            return (0, _react.act)(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
              return _regenerator().w(function (_context3) {
                while (1) switch (_context3.n) {
                  case 0:
                    // Mock API response with 1000 items
                    global.fetch = jest.fn().mockResolvedValueOnce({
                      ok: true,
                      json: function () {
                        var _json = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
                          return _regenerator().w(function (_context) {
                            while (1) switch (_context.n) {
                              case 0:
                                return _context.a(2, {
                                  success: true,
                                  data: Array.from({
                                    length: 500
                                  }, function (_, i) {
                                    return generateTestItem(i);
                                  }),
                                  pagination: {
                                    hasMore: true,
                                    total: 1000
                                  }
                                });
                            }
                          }, _callee);
                        }));
                        function json() {
                          return _json.apply(this, arguments);
                        }
                        return json;
                      }()
                    }).mockResolvedValueOnce({
                      ok: true,
                      json: function () {
                        var _json2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
                          return _regenerator().w(function (_context2) {
                            while (1) switch (_context2.n) {
                              case 0:
                                return _context2.a(2, {
                                  success: true,
                                  data: Array.from({
                                    length: 500
                                  }, function (_, i) {
                                    return generateTestItem(i + 500);
                                  }),
                                  pagination: {
                                    hasMore: false,
                                    total: 1000
                                  }
                                });
                            }
                          }, _callee2);
                        }));
                        function json() {
                          return _json2.apply(this, arguments);
                        }
                        return json;
                      }()
                    });

                    // Load initial batch
                    _context3.n = 1;
                    return result.current.loadItems(500);
                  case 1:
                    _context3.n = 2;
                    return result.current.loadMoreItems(500);
                  case 2:
                    return _context3.a(2);
                }
              }, _callee3);
            })));
          case 1:
            // Verify we have 1000 items
            expect(result.current.items.length).toBe(1000);

            // Check memory stats
            memoryStats = result.current.getMemoryStats(); // Verify memory usage is under 100MB
            expect(memoryStats.usageMB).toBeLessThan(100);

            // Verify item count
            expect(memoryStats.itemCount).toBe(1000);

            // Log stats for visibility
            console.log("Memory Performance Test Results:", {
              itemCount: memoryStats.itemCount,
              memoryUsageMB: memoryStats.usageMB,
              avgItemSizeBytes: memoryStats.avgItemSize,
              isUnder100MB: memoryStats.usageMB < 100
            });

            // Verify memory optimization is available
            expect(_typeof(result.current.optimizeMemory)).toBe("function");
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it("should automatically optimize memory when threshold is exceeded", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var _renderHook3, result, mockGetMemoryMetrics, generateLargeItem, memoryStats;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            _renderHook3 = (0, _react.renderHook)(function () {
              return (0, _feedStore.useFeedStore)();
            }), result = _renderHook3.result; // Mock high memory usage to trigger optimization
            mockGetMemoryMetrics = _memoryMonitor.getMemoryMetrics;
            mockGetMemoryMetrics.mockReturnValue({
              usedMB: 95,
              // Near 100MB threshold
              totalMB: 4096,
              percentUsed: 2.3
            });

            // Generate items that would push memory over threshold
            generateLargeItem = function generateLargeItem(index) {
              return {
                id: "large-item-".concat(index),
                type: "itk",
                timestamp: new Date(),
                content: "Large content ".repeat(100),
                // Make content larger
                source: {
                  name: "Test Source",
                  tier: 1,
                  reliability: 0.9
                },
                tags: {
                  clubs: ["Test Club"],
                  players: ["Test Player"],
                  sources: ["Test Source"]
                },
                metadata: {
                  priority: "medium",
                  relevanceScore: 0.8
                }
              };
            };
            _context7.n = 1;
            return (0, _react.act)(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
              return _regenerator().w(function (_context6) {
                while (1) switch (_context6.n) {
                  case 0:
                    // Mock API with large items
                    global.fetch = jest.fn().mockResolvedValue({
                      ok: true,
                      json: function () {
                        var _json3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
                          return _regenerator().w(function (_context5) {
                            while (1) switch (_context5.n) {
                              case 0:
                                return _context5.a(2, {
                                  success: true,
                                  data: Array.from({
                                    length: 800
                                  }, function (_, i) {
                                    return generateLargeItem(i);
                                  }),
                                  pagination: {
                                    hasMore: false,
                                    total: 800
                                  }
                                });
                            }
                          }, _callee5);
                        }));
                        function json() {
                          return _json3.apply(this, arguments);
                        }
                        return json;
                      }()
                    });
                    _context6.n = 1;
                    return result.current.loadItems(800);
                  case 1:
                    return _context6.a(2);
                }
              }, _callee6);
            })));
          case 1:
            // Memory optimization should keep us under limits
            memoryStats = result.current.getMemoryStats();
            expect(result.current.items.length).toBeLessThanOrEqual(800);

            // Test manual optimization
            (0, _react.act)(function () {
              result.current.optimizeMemory();
            });

            // After optimization, should have fewer items but stay functional
            expect(result.current.items.length).toBeLessThanOrEqual(800);
            expect(result.current.items.length).toBeGreaterThan(0);
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    it("should handle memory-efficient filtering with large datasets", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var _renderHook4, result, generateFilterTestItem, memoryStats;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            _renderHook4 = (0, _react.renderHook)(function () {
              return (0, _feedStore.useFeedStore)();
            }), result = _renderHook4.result; // Create 1000 items with varied tags for filtering
            generateFilterTestItem = function generateFilterTestItem(index) {
              return {
                id: "filter-item-".concat(index),
                type: "itk",
                timestamp: new Date(),
                content: "Transfer ".concat(index),
                source: {
                  name: "Test Source",
                  tier: 1,
                  reliability: 0.9
                },
                tags: {
                  clubs: [["Arsenal"], ["Chelsea"], ["United"]][index % 3] || [],
                  players: [["Haaland"], ["Mbappe"], ["Kane"]][index % 3] || [],
                  sources: ["Test Source"]
                },
                metadata: {
                  priority: "medium",
                  relevanceScore: 0.8
                }
              };
            };
            _context0.n = 1;
            return (0, _react.act)(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
              return _regenerator().w(function (_context9) {
                while (1) switch (_context9.n) {
                  case 0:
                    global.fetch = jest.fn().mockResolvedValue({
                      ok: true,
                      json: function () {
                        var _json4 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
                          return _regenerator().w(function (_context8) {
                            while (1) switch (_context8.n) {
                              case 0:
                                return _context8.a(2, {
                                  success: true,
                                  data: Array.from({
                                    length: 1000
                                  }, function (_, i) {
                                    return generateFilterTestItem(i);
                                  }),
                                  pagination: {
                                    hasMore: false,
                                    total: 1000
                                  }
                                });
                            }
                          }, _callee8);
                        }));
                        function json() {
                          return _json4.apply(this, arguments);
                        }
                        return json;
                      }()
                    });
                    _context9.n = 1;
                    return result.current.loadItems(1000);
                  case 1:
                    return _context9.a(2);
                }
              }, _callee9);
            })));
          case 1:
            // Test filtering performance with large dataset
            (0, _react.act)(function () {
              result.current.addTagFilter("Arsenal", "club");
            });

            // Should filter efficiently without memory issues
            expect(result.current.filteredItems.length).toBeLessThan(result.current.items.length);
            expect(result.current.filteredItems.length).toBeGreaterThan(0);

            // Memory should still be reasonable
            memoryStats = result.current.getMemoryStats();
            expect(memoryStats.usageMB).toBeLessThan(100);

            // Test clearing filters
            (0, _react.act)(function () {
              result.current.clearFilters();
            });
            expect(result.current.filteredItems.length).toBe(result.current.items.length);
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it("should maintain performance with real-time updates on large datasets", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var _renderHook5, result, memoryStats;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            _renderHook5 = (0, _react.renderHook)(function () {
              return (0, _feedStore.useFeedStore)();
            }), result = _renderHook5.result; // Start with 800 items
            _context11.n = 1;
            return (0, _react.act)(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
              return _regenerator().w(function (_context10) {
                while (1) switch (_context10.n) {
                  case 0:
                    global.fetch = jest.fn().mockResolvedValue({
                      ok: true,
                      json: function () {
                        var _json5 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
                          return _regenerator().w(function (_context1) {
                            while (1) switch (_context1.n) {
                              case 0:
                                return _context1.a(2, {
                                  success: true,
                                  data: Array.from({
                                    length: 800
                                  }, function (_, i) {
                                    return {
                                      id: "base-item-".concat(i),
                                      type: "itk",
                                      timestamp: new Date(),
                                      content: "Base transfer ".concat(i),
                                      source: {
                                        name: "Test",
                                        tier: 1,
                                        reliability: 0.9
                                      },
                                      tags: {
                                        clubs: [],
                                        players: [],
                                        sources: []
                                      },
                                      metadata: {
                                        priority: "medium",
                                        relevanceScore: 0.8
                                      }
                                    };
                                  }),
                                  pagination: {
                                    hasMore: false,
                                    total: 800
                                  }
                                });
                            }
                          }, _callee1);
                        }));
                        function json() {
                          return _json5.apply(this, arguments);
                        }
                        return json;
                      }()
                    });
                    _context10.n = 1;
                    return result.current.loadItems(800);
                  case 1:
                    return _context10.a(2);
                }
              }, _callee10);
            })));
          case 1:
            // Add real-time updates to push over 1000
            (0, _react.act)(function () {
              for (var i = 0; i < 250; i++) {
                result.current.addItem({
                  id: "realtime-item-".concat(i),
                  type: "breaking",
                  timestamp: new Date(),
                  content: "Breaking: Transfer ".concat(i),
                  source: {
                    name: "Breaking Source",
                    tier: 1,
                    reliability: 0.95
                  },
                  tags: {
                    clubs: ["Real Madrid"],
                    players: ["Mbappe"],
                    sources: ["Breaking Source"]
                  },
                  metadata: {
                    priority: "high",
                    relevanceScore: 0.95
                  },
                  isNew: true
                });
              }
            });

            // Should have triggered automatic optimization to stay under maxItems
            expect(result.current.items.length).toBeLessThanOrEqual(1000);

            // Memory should remain efficient
            memoryStats = result.current.getMemoryStats();
            expect(memoryStats.usageMB).toBeLessThan(100);

            // Real-time features should still work
            expect(result.current.unreadCount).toBeGreaterThan(0);
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
  });
  describe("Memory Optimization Features", function () {
    it("should provide detailed memory statistics", function () {
      var _renderHook6 = (0, _react.renderHook)(function () {
          return (0, _feedStore.useFeedStore)();
        }),
        result = _renderHook6.result;
      var stats = result.current.getMemoryStats();
      expect(stats).toHaveProperty("usageMB");
      expect(stats).toHaveProperty("itemCount");
      expect(stats).toHaveProperty("avgItemSize");
      expect(_typeof(stats.usageMB)).toBe("number");
      expect(_typeof(stats.itemCount)).toBe("number");
      expect(_typeof(stats.avgItemSize)).toBe("number");
    });
    it("should cleanup old items when maxItems is exceeded", function () {
      var _renderHook7 = (0, _react.renderHook)(function () {
          return (0, _feedStore.useFeedStore)();
        }),
        result = _renderHook7.result;

      // Set a lower maxItems for testing
      (0, _react.act)(function () {
        // Add items beyond maxItems
        for (var i = 0; i < 1200; i++) {
          result.current.addItem({
            id: "overflow-item-".concat(i),
            type: "itk",
            timestamp: new Date(Date.now() - i * 1000),
            content: "Overflow transfer ".concat(i),
            source: {
              name: "Test",
              tier: 1,
              reliability: 0.9
            },
            tags: {
              clubs: [],
              players: [],
              sources: []
            },
            metadata: {
              priority: "medium",
              relevanceScore: 0.8
            }
          });
        }
      });

      // Should have been limited by maxItems
      expect(result.current.items.length).toBeLessThanOrEqual(1000);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,