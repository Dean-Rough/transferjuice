c03a9f0ef5424f8b399a197a44393860
"use strict";

// Mock OpenAI
_getJestObj().mock("openai");
// Mock terry-style module
_getJestObj().mock("@/lib/terry-style", function () {
  return {
    applyTerryStyle: {
      enhanceError: jest.fn(function (msg) {
        return "Terry-enhanced: ".concat(msg);
      })
    },
    terryPrompts: {
      articleGeneration: "Mock Terry article generation prompt"
    }
  };
});

// Mock Prisma client types
_getJestObj().mock("@prisma/client", function () {
  return {
    BriefingType: {
      MORNING: "MORNING",
      AFTERNOON: "AFTERNOON",
      EVENING: "EVENING",
      WEEKEND: "WEEKEND",
      SPECIAL: "SPECIAL"
    }
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _contentAnalyzer = require("../content-analyzer");
var _articleGenerator = require("../article-generator");
var _qualityValidator = require("../quality-validator");
var _openai = _interopRequireDefault(require("openai"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * AI Pipeline Integration Tests
 * End-to-end testing of the complete AI content processing pipeline
 */
var MockedOpenAI = _openai["default"];
describe("AI Pipeline Integration", function () {
  var analyzer;
  var generator;
  var validator;
  var mockOpenAI;
  var mockTweets = [{
    id: "tweet_123",
    text: "BREAKING: Manchester United are close to signing Declan Rice for Â£100m after successful medical tests. Agent confirms deal should be completed by Friday.",
    authorHandle: "FabrizioRomano",
    authorName: "Fabrizio Romano",
    authorVerified: true,
    authorTier: "tier1",
    createdAt: new Date("2024-01-15T10:00:00Z"),
    metrics: {
      retweets: 5420,
      likes: 18760,
      replies: 892,
      quotes: 234
    },
    context: {
      recentTweets: ["Previous transfer update about Rice"],
      authorSpecialties: ["Transfer news", "Premier League"]
    }
  }, {
    id: "tweet_124",
    text: "Arsenal are monitoring the situation with Gabriel Jesus. Personal terms agreed but fee negotiations ongoing. Medical could happen next week.",
    authorHandle: "David_Ornstein",
    authorName: "David Ornstein",
    authorVerified: true,
    authorTier: "tier1",
    createdAt: new Date("2024-01-15T11:00:00Z"),
    metrics: {
      retweets: 3240,
      likes: 12450,
      replies: 567,
      quotes: 189
    },
    context: {
      recentTweets: ["Arsenal transfer update"],
      authorSpecialties: ["Arsenal", "Premier League"]
    }
  }, {
    id: "tweet_125",
    text: "Chelsea are still working on outgoings. Several players expected to leave on loan or permanent deals. Need to clear space for new arrivals.",
    authorHandle: "Matt_Law_DT",
    authorName: "Matt Law",
    authorVerified: true,
    authorTier: "tier2",
    createdAt: new Date("2024-01-15T12:00:00Z"),
    metrics: {
      retweets: 1850,
      likes: 7230,
      replies: 423,
      quotes: 95
    },
    context: {
      recentTweets: ["Chelsea squad planning"],
      authorSpecialties: ["Chelsea", "Transfer news"]
    }
  }];
  var mockAnalysisResponses = [{
    classification: {
      isTransferRelated: true,
      transferType: "CONFIRMED",
      priority: "HIGH",
      confidence: 0.95,
      categories: ["signing", "medical"],
      keyPoints: ["Manchester United", "Declan Rice", "Â£100m", "Medical completed"]
    },
    entities: {
      players: [{
        name: "Declan Rice",
        confidence: 0.98,
        position: "Defensive Midfielder"
      }],
      clubs: [{
        name: "Manchester United",
        confidence: 0.99,
        league: "Premier League"
      }],
      transferDetails: [{
        type: "fee",
        value: "Â£100m",
        confidence: 0.9
      }],
      agents: []
    },
    sentiment: {
      sentiment: "positive",
      confidence: 0.85,
      emotions: ["excitement", "optimism"],
      reliability: 0.95,
      urgency: 0.8
    }
  }, {
    classification: {
      isTransferRelated: true,
      transferType: "TALKS",
      priority: "MEDIUM",
      confidence: 0.88,
      categories: ["signing", "negotiation"],
      keyPoints: ["Arsenal", "Gabriel Jesus", "Personal terms agreed"]
    },
    entities: {
      players: [{
        name: "Gabriel Jesus",
        confidence: 0.95,
        position: "Forward"
      }],
      clubs: [{
        name: "Arsenal",
        confidence: 0.97,
        league: "Premier League"
      }],
      transferDetails: [{
        type: "medical_date",
        value: "next week",
        confidence: 0.8
      }],
      agents: []
    },
    sentiment: {
      sentiment: "neutral",
      confidence: 0.75,
      emotions: ["optimism"],
      reliability: 0.92,
      urgency: 0.6
    }
  }, {
    classification: {
      isTransferRelated: true,
      transferType: "RUMOUR",
      priority: "LOW",
      confidence: 0.75,
      categories: ["departure", "rumour"],
      keyPoints: ["Chelsea", "Outgoings", "Squad planning"]
    },
    entities: {
      players: [],
      clubs: [{
        name: "Chelsea",
        confidence: 0.95,
        league: "Premier League"
      }],
      transferDetails: [],
      agents: []
    },
    sentiment: {
      sentiment: "neutral",
      confidence: 0.65,
      emotions: [],
      reliability: 0.85,
      urgency: 0.3
    }
  }];
  var mockSectionContent = "Right, this might be the most cursed transfer saga I've witnessed today, and I've been watching football for longer than I care to admit. Manchester United (currently in their \"cautiously optimistic\" phase) have finally managed to drag Declan Rice across the finish line for \xA3100m (or roughly the GDP of a small Caribbean island).\n\nThe whole medical circus (basically checking he has two legs and a pulse) was completed yesterday, which means we're now in that delightful phase where everyone pretends this was always going to happen (it wasn't) and that \xA3100m represents good value (it doesn't, but here we are).\n\nWhat this actually means, beyond the obvious financial lunacy, is that United have finally addressed their midfield issues with the sort of decisive action that would make a sloth proud. Rice brings exactly the sort of defensive stability that United have been missing since, oh, approximately 2013.";
  var mockMetadataResponse = {
    title: "Rice Finally Joins United After Â£100m Circus",
    slug: "rice-finally-joins-united-after-100m-circus",
    summary: "Manchester United complete the signing of Declan Rice for Â£100m after medical tests.",
    metaDescription: "Declan Rice joins Manchester United for Â£100m in latest transfer madness.",
    tags: ["Manchester United", "Declan Rice", "Transfer", "Premier League"]
  };
  var mockValidationResponses = [{
    score: 88,
    issues: []
  },
  // factual accuracy
  {
    score: 85,
    issues: []
  },
  // brand voice
  {
    score: 95,
    issues: []
  },
  // safety
  {
    score: 92,
    issues: []
  } // legal
  ];
  beforeEach(function () {
    jest.clearAllMocks();

    // Create mock OpenAI instance
    mockOpenAI = {
      chat: {
        completions: {
          create: jest.fn()
        }
      }
    };
    MockedOpenAI.mockImplementation(function () {
      return mockOpenAI;
    });

    // Initialize all pipeline components
    analyzer = new _contentAnalyzer.AIContentAnalyzer({
      openaiApiKey: "test-key",
      enableCaching: false // Disable caching for tests
    });
    generator = new _articleGenerator.TerryArticleGenerator({
      openaiApiKey: "test-key",
      terryIntensity: "medium"
    });
    validator = new _qualityValidator.ContentQualityValidator({
      openaiApiKey: "test-key",
      strictMode: false
    });
  });
  describe("Complete Pipeline Flow", function () {
    it("should process tweets through entire pipeline successfully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var i, _i, _i2, _mockValidationRespon, response, analyses, article, validation;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            // Setup mock responses for analysis phase (3 tweets Ã 3 API calls each)
            for (i = 0; i < 3; i++) {
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(mockAnalysisResponses[i].classification)
                  }
                }]
              }).mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(mockAnalysisResponses[i].entities)
                  }
                }]
              }).mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(mockAnalysisResponses[i].sentiment)
                  }
                }]
              });
            }

            // Setup mock responses for generation phase (4 sections + metadata)
            for (_i = 0; _i < 4; _i++) {
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: mockSectionContent
                  }
                }]
              });
            }
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockMetadataResponse)
                }
              }]
            });

            // Setup mock responses for validation phase (4 validation checks)
            for (_i2 = 0, _mockValidationRespon = mockValidationResponses; _i2 < _mockValidationRespon.length; _i2++) {
              response = _mockValidationRespon[_i2];
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(response)
                  }
                }]
              });
            }

            // Step 1: Analyze all tweets
            _context.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context.v;
            expect(analyses).toHaveLength(3);
            expect(analyses[0].classification.isTransferRelated).toBe(true);
            expect(analyses[0].qualityScore).toBeGreaterThan(0);

            // Step 2: Generate article from analyses
            _context.n = 2;
            return generator.generateArticle({
              briefingType: "MORNING",
              tweetAnalyses: analyses,
              briefingDate: new Date("2024-01-15T08:00:00Z"),
              targetWordCount: 800
            });
          case 2:
            article = _context.v;
            expect(article.title).toBe("Rice Finally Joins United After Â£100m Circus");
            expect(article.content.sections).toHaveLength(4);
            expect(article.content.wordCount).toBeGreaterThan(0);
            expect(article.qualityScore).toBeGreaterThan(0);

            // Step 3: Validate generated article
            _context.n = 3;
            return validator.validateContent(article);
          case 3:
            validation = _context.v;
            expect(validation.passed).toBe(true);
            expect(validation.overallScore).toBeGreaterThan(75);
            expect(validation.checks).toHaveLength(6);

            // Verify the complete flow
            expect(validation.blockers).toHaveLength(0);
            expect(validation.requiresHumanReview).toBe(false);
          case 4:
            return _context.a(2);
        }
      }, _callee);
    })));
    it("should handle pipeline errors gracefully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var firstAnalysis;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            // Mock analysis to fail on second tweet
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockAnalysisResponses[0].classification)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockAnalysisResponses[0].entities)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockAnalysisResponses[0].sentiment)
                }
              }]
            }).mockRejectedValueOnce(new Error("API Error"));

            // Analyze first tweet successfully
            _context2.n = 1;
            return analyzer.analyzeTweet(mockTweets[0]);
          case 1:
            firstAnalysis = _context2.v;
            expect(firstAnalysis).toBeDefined();

            // Second tweet should fail
            _context2.n = 2;
            return expect(analyzer.analyzeTweet(mockTweets[1])).rejects.toThrow("AI analysis failed");
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it("should filter low-quality content in pipeline", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var lowQualityResponses, i, analyses;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            // Setup low-quality analysis responses
            lowQualityResponses = mockAnalysisResponses.map(function (response) {
              return _objectSpread(_objectSpread({}, response), {}, {
                classification: _objectSpread(_objectSpread({}, response.classification), {}, {
                  isTransferRelated: false,
                  confidence: 0.3
                })
              });
            }); // Mock analysis responses
            for (i = 0; i < 3; i++) {
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(lowQualityResponses[i].classification)
                  }
                }]
              }).mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(lowQualityResponses[i].entities)
                  }
                }]
              }).mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(lowQualityResponses[i].sentiment)
                  }
                }]
              });
            }
            _context3.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context3.v;
            // All analyses should be marked as non-transfer related
            expect(analyses.every(function (a) {
              return !a.classification.isTransferRelated;
            })).toBe(true);

            // Generation should fail or produce minimal content with no transfer-related analyses
            _context3.n = 2;
            return expect(generator.generateArticle({
              briefingType: "MORNING",
              tweetAnalyses: analyses,
              briefingDate: new Date("2024-01-15T08:00:00Z"),
              targetWordCount: 800
            })).rejects.toThrow();
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
  });
  describe("Pipeline Performance", function () {
    it("should complete analysis phase within reasonable time", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var i, startTime, analyses, processingTime;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            // Mock fast responses
            for (i = 0; i < 9; i++) {
              // 3 tweets Ã 3 calls each
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(mockAnalysisResponses[i % 3])
                  }
                }]
              });
            }
            startTime = Date.now();
            _context4.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context4.v;
            processingTime = Date.now() - startTime;
            expect(analyses).toHaveLength(3);
            expect(processingTime).toBeLessThan(5000); // Should complete in under 5 seconds
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it("should handle concurrent analysis requests", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      var i, manyTweets, analyses;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            // Mock responses for concurrent requests
            for (i = 0; i < 15; i++) {
              // 5 tweets Ã 3 calls each
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(mockAnalysisResponses[i % 3])
                  }
                }]
              });
            }

            // Create more tweets for concurrent testing
            manyTweets = Array(5).fill(mockTweets[0]).map(function (tweet, i) {
              return _objectSpread(_objectSpread({}, tweet), {}, {
                id: "tweet_".concat(i)
              });
            });
            _context5.n = 1;
            return Promise.all(manyTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context5.v;
            expect(analyses).toHaveLength(5);
            expect(analyses.every(function (a) {
              return a.processingTime >= 0;
            })).toBe(true);
          case 2:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe("Pipeline Quality Assurance", function () {
    it("should maintain quality standards throughout pipeline", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var highQualityResponses, i, responseIndex, callType, responseData, _i3, content, highQualityValidation, _iterator, _step, response, analyses, article, validation;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            // Setup high-quality responses
            highQualityResponses = mockAnalysisResponses.map(function (response) {
              return _objectSpread(_objectSpread({}, response), {}, {
                classification: _objectSpread(_objectSpread({}, response.classification), {}, {
                  confidence: 0.95
                }),
                sentiment: _objectSpread(_objectSpread({}, response.sentiment), {}, {
                  reliability: 0.95
                })
              });
            }); // Mock analysis responses
            for (i = 0; i < 9; i++) {
              responseIndex = Math.floor(i / 3);
              callType = i % 3;
              responseData = callType === 0 ? highQualityResponses[responseIndex].classification : callType === 1 ? highQualityResponses[responseIndex].entities : highQualityResponses[responseIndex].sentiment;
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(responseData)
                  }
                }]
              });
            }

            // Mock generation responses
            for (_i3 = 0; _i3 < 5; _i3++) {
              content = _i3 < 4 ? mockSectionContent : JSON.stringify(mockMetadataResponse);
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: content
                  }
                }]
              });
            }

            // Mock validation responses (high scores)
            highQualityValidation = mockValidationResponses.map(function (r) {
              return _objectSpread(_objectSpread({}, r), {}, {
                score: r.score + 5
              });
            });
            _iterator = _createForOfIteratorHelper(highQualityValidation);
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                response = _step.value;
                mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                  choices: [{
                    message: {
                      content: JSON.stringify(response)
                    }
                  }]
                });
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            _context6.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context6.v;
            _context6.n = 2;
            return generator.generateArticle({
              briefingType: "MORNING",
              tweetAnalyses: analyses,
              briefingDate: new Date("2024-01-15T08:00:00Z"),
              targetWordCount: 800
            });
          case 2:
            article = _context6.v;
            _context6.n = 3;
            return validator.validateContent(article);
          case 3:
            validation = _context6.v;
            // Verify high quality throughout
            expect(analyses.every(function (a) {
              return a.qualityScore > 80;
            })).toBe(true);
            expect(article.qualityScore).toBeGreaterThan(85);
            expect(validation.overallScore).toBeGreaterThan(85);
            expect(validation.passed).toBe(true);
          case 4:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it("should catch quality issues at validation stage", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var i, responseIndex, callType, responseData, _i4, content, lowQualityValidation, _i5, _lowQualityValidation, response, analyses, article, validation;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            // Setup analysis and generation with normal responses
            for (i = 0; i < 9; i++) {
              responseIndex = Math.floor(i / 3);
              callType = i % 3;
              responseData = callType === 0 ? mockAnalysisResponses[responseIndex].classification : callType === 1 ? mockAnalysisResponses[responseIndex].entities : mockAnalysisResponses[responseIndex].sentiment;
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(responseData)
                  }
                }]
              });
            }
            for (_i4 = 0; _i4 < 5; _i4++) {
              content = _i4 < 4 ? mockSectionContent : JSON.stringify(mockMetadataResponse);
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: content
                  }
                }]
              });
            }

            // Mock validation with quality issues
            lowQualityValidation = [{
              score: 60,
              issues: [{
                severity: "high",
                type: "accuracy",
                description: "Factual issues found"
              }]
            }, {
              score: 55,
              issues: [{
                severity: "medium",
                type: "voice",
                description: "Off-brand content"
              }]
            }, {
              score: 40,
              issues: [{
                severity: "critical",
                type: "safety",
                description: "Content safety violation"
              }]
            }, {
              score: 70,
              issues: []
            }];
            for (_i5 = 0, _lowQualityValidation = lowQualityValidation; _i5 < _lowQualityValidation.length; _i5++) {
              response = _lowQualityValidation[_i5];
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(response)
                  }
                }]
              });
            }
            _context7.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context7.v;
            _context7.n = 2;
            return generator.generateArticle({
              briefingType: "MORNING",
              tweetAnalyses: analyses,
              briefingDate: new Date("2024-01-15T08:00:00Z"),
              targetWordCount: 800
            });
          case 2:
            article = _context7.v;
            _context7.n = 3;
            return validator.validateContent(article);
          case 3:
            validation = _context7.v;
            // Should catch quality issues
            expect(validation.passed).toBe(false);
            expect(validation.requiresHumanReview).toBe(true);
            expect(validation.blockers.length).toBeGreaterThan(0);
            expect(validation.overallScore).toBeLessThan(75);
          case 4:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe("Pipeline Edge Cases", function () {
    it("should handle mixed quality tweet analyses", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var mixedResponses, i, responseIndex, callType, responseData, analyses, transferAnalyses;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            // Mix of high and low quality responses
            mixedResponses = [_objectSpread({}, mockAnalysisResponses[0]), // High quality
            _objectSpread(_objectSpread({}, mockAnalysisResponses[1]), {}, {
              classification: _objectSpread(_objectSpread({}, mockAnalysisResponses[1].classification), {}, {
                isTransferRelated: false
              })
            }), // Low quality
            _objectSpread({}, mockAnalysisResponses[2]) // Medium quality
            ]; // Mock analysis responses
            for (i = 0; i < 9; i++) {
              responseIndex = Math.floor(i / 3);
              callType = i % 3;
              responseData = callType === 0 ? mixedResponses[responseIndex].classification : callType === 1 ? mixedResponses[responseIndex].entities : mixedResponses[responseIndex].sentiment;
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: JSON.stringify(responseData)
                  }
                }]
              });
            }
            _context8.n = 1;
            return Promise.all(mockTweets.map(function (tweet) {
              return analyzer.analyzeTweet(tweet);
            }));
          case 1:
            analyses = _context8.v;
            // Should filter out non-transfer content in generator
            transferAnalyses = analyses.filter(function (a) {
              return a.classification.isTransferRelated;
            });
            expect(transferAnalyses.length).toBeLessThan(analyses.length);
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    it("should handle empty or minimal content gracefully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var minimalTweet, minimalResponse, analysis;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            minimalTweet = _objectSpread(_objectSpread({}, mockTweets[0]), {}, {
              text: "Yes.",
              metrics: {
                retweets: 0,
                likes: 1,
                replies: 0,
                quotes: 0
              }
            }); // Mock minimal response
            minimalResponse = {
              classification: {
                isTransferRelated: false,
                priority: "LOW",
                confidence: 0.1,
                categories: [],
                keyPoints: []
              },
              entities: {
                players: [],
                clubs: [],
                transferDetails: [],
                agents: []
              },
              sentiment: {
                sentiment: "neutral",
                confidence: 0.3,
                emotions: [],
                reliability: 0.2,
                urgency: 0.1
              }
            };
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(minimalResponse.classification)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(minimalResponse.entities)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(minimalResponse.sentiment)
                }
              }]
            });
            _context9.n = 1;
            return analyzer.analyzeTweet(minimalTweet);
          case 1:
            analysis = _context9.v;
            expect(analysis.qualityScore).toBeLessThan(50);
            expect(analysis.classification.isTransferRelated).toBe(false);
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe("Configuration and Error Recovery", function () {
    it("should validate all component configurations", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var _yield$Promise$all, _yield$Promise$all2, analyzerValid, generatorValid, validatorValid;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: "Test response"
                }
              }]
            });
            _context0.n = 1;
            return Promise.all([analyzer.validateConfiguration(), generator.validateConfiguration(), validator.validateConfiguration()]);
          case 1:
            _yield$Promise$all = _context0.v;
            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
            analyzerValid = _yield$Promise$all2[0];
            generatorValid = _yield$Promise$all2[1];
            validatorValid = _yield$Promise$all2[2];
            expect(analyzerValid.valid).toBe(true);
            expect(generatorValid.valid).toBe(true);
            expect(validatorValid.valid).toBe(true);
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it("should handle component configuration failures", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var _yield$Promise$all3, _yield$Promise$all4, analyzerValid, generatorValid, validatorValid;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error("Invalid API key"));
            _context1.n = 1;
            return Promise.all([analyzer.validateConfiguration(), generator.validateConfiguration(), validator.validateConfiguration()]);
          case 1:
            _yield$Promise$all3 = _context1.v;
            _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 3);
            analyzerValid = _yield$Promise$all4[0];
            generatorValid = _yield$Promise$all4[1];
            validatorValid = _yield$Promise$all4[2];
            expect(analyzerValid.valid).toBe(false);
            expect(generatorValid.valid).toBe(false);
            expect(validatorValid.valid).toBe(false);
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,