538b358a5dc17b0e39f6884e273df834
/* istanbul ignore next */ function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function cov_utzvudh10() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/email/subscribe/route.ts";
  var hash = "8cfda8cf949962fe81326ad7f823ebb2d3e17adf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/email/subscribe/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 24
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "1": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "2": {
        start: {
          line: 29,
          column: 32
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "3": {
        start: {
          line: 41,
          column: 17
        },
        end: {
          line: 41,
          column: 67
        }
      },
      "4": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 46,
          column: 22
        }
      },
      "5": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "6": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 80
        }
      },
      "7": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 114,
          column: 3
        }
      },
      "8": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "9": {
        start: {
          line: 59,
          column: 18
        },
        end: {
          line: 59,
          column: 47
        }
      },
      "10": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      "11": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 68,
          column: 8
        }
      },
      "12": {
        start: {
          line: 72,
          column: 23
        },
        end: {
          line: 88,
          column: 6
        }
      },
      "13": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      "14": {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "15": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "16": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 65
        }
      },
      "17": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 113,
          column: 6
        }
      },
      "18": {
        start: {
          line: 119,
          column: 2
        },
        end: {
          line: 226,
          column: 3
        }
      },
      "19": {
        start: {
          line: 120,
          column: 17
        },
        end: {
          line: 120,
          column: 37
        }
      },
      "20": {
        start: {
          line: 123,
          column: 26
        },
        end: {
          line: 123,
          column: 53
        }
      },
      "21": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 129,
          column: 15
        }
      },
      "22": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 130,
          column: 68
        }
      },
      "23": {
        start: {
          line: 133,
          column: 21
        },
        end: {
          line: 135,
          column: 6
        }
      },
      "24": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "25": {
        start: {
          line: 138,
          column: 6
        },
        end: {
          line: 169,
          column: 7
        }
      },
      "26": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 149,
          column: 10
        }
      },
      "27": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 162,
          column: 10
        }
      },
      "28": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "29": {
        start: {
          line: 173,
          column: 23
        },
        end: {
          line: 185,
          column: 6
        }
      },
      "30": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 203,
          column: 6
        }
      },
      "31": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 214,
          column: 5
        }
      },
      "32": {
        start: {
          line: 206,
          column: 6
        },
        end: {
          line: 213,
          column: 8
        }
      },
      "33": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 216,
          column: 49
        }
      },
      "34": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 225,
          column: 6
        }
      },
      "35": {
        start: {
          line: 231,
          column: 2
        },
        end: {
          line: 297,
          column: 3
        }
      },
      "36": {
        start: {
          line: 232,
          column: 17
        },
        end: {
          line: 232,
          column: 37
        }
      },
      "37": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 61
        }
      },
      "38": {
        start: {
          line: 238,
          column: 23
        },
        end: {
          line: 240,
          column: 6
        }
      },
      "39": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 250,
          column: 5
        }
      },
      "40": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 249,
          column: 8
        }
      },
      "41": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 263,
          column: 6
        }
      },
      "42": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 274,
          column: 7
        }
      },
      "43": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 285,
          column: 5
        }
      },
      "44": {
        start: {
          line: 277,
          column: 6
        },
        end: {
          line: 284,
          column: 8
        }
      },
      "45": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 58
        }
      },
      "46": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 296,
          column: 6
        }
      },
      "47": {
        start: {
          line: 302,
          column: 2
        },
        end: {
          line: 367,
          column: 3
        }
      },
      "48": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 36
        }
      },
      "49": {
        start: {
          line: 304,
          column: 18
        },
        end: {
          line: 304,
          column: 47
        }
      },
      "50": {
        start: {
          line: 305,
          column: 18
        },
        end: {
          line: 305,
          column: 47
        }
      },
      "51": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 315,
          column: 5
        }
      },
      "52": {
        start: {
          line: 308,
          column: 6
        },
        end: {
          line: 314,
          column: 8
        }
      },
      "53": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 326,
          column: 5
        }
      },
      "54": {
        start: {
          line: 319,
          column: 6
        },
        end: {
          line: 325,
          column: 8
        }
      },
      "55": {
        start: {
          line: 329,
          column: 23
        },
        end: {
          line: 331,
          column: 6
        }
      },
      "56": {
        start: {
          line: 333,
          column: 4
        },
        end: {
          line: 341,
          column: 5
        }
      },
      "57": {
        start: {
          line: 334,
          column: 6
        },
        end: {
          line: 340,
          column: 8
        }
      },
      "58": {
        start: {
          line: 344,
          column: 4
        },
        end: {
          line: 350,
          column: 7
        }
      },
      "59": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 355,
          column: 7
        }
      },
      "60": {
        start: {
          line: 357,
          column: 4
        },
        end: {
          line: 357,
          column: 51
        }
      },
      "61": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 366,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "generateUnsubscribeToken",
        decl: {
          start: {
            line: 40,
            column: 9
          },
          end: {
            line: 40,
            column: 33
          }
        },
        loc: {
          start: {
            line: 40,
            column: 57
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 40
      },
      "1": {
        name: "verifyUnsubscribeToken",
        decl: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 50,
            column: 31
          }
        },
        loc: {
          start: {
            line: 50,
            column: 71
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 50
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 56,
            column: 22
          },
          end: {
            line: 56,
            column: 25
          }
        },
        loc: {
          start: {
            line: 56,
            column: 48
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 56
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 118,
            column: 26
          }
        },
        loc: {
          start: {
            line: 118,
            column: 49
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 118
      },
      "4": {
        name: "PUT",
        decl: {
          start: {
            line: 230,
            column: 22
          },
          end: {
            line: 230,
            column: 25
          }
        },
        loc: {
          start: {
            line: 230,
            column: 48
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 230
      },
      "5": {
        name: "DELETE",
        decl: {
          start: {
            line: 301,
            column: 22
          },
          end: {
            line: 301,
            column: 28
          }
        },
        loc: {
          start: {
            line: 301,
            column: 51
          },
          end: {
            line: 368,
            column: 1
          }
        },
        line: 301
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 41,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 17
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: 41,
            column: 51
          },
          end: {
            line: 41,
            column: 67
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "3": {
        loc: {
          start: {
            line: 110,
            column: 17
          },
          end: {
            line: 110,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 42
          },
          end: {
            line: 110,
            column: 55
          }
        }, {
          start: {
            line: 110,
            column: 58
          },
          end: {
            line: 110,
            column: 73
          }
        }],
        line: 110
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 6
          },
          end: {
            line: 129,
            column: 15
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 6
          },
          end: {
            line: 127,
            column: 44
          }
        }, {
          start: {
            line: 128,
            column: 6
          },
          end: {
            line: 128,
            column: 38
          }
        }, {
          start: {
            line: 129,
            column: 6
          },
          end: {
            line: 129,
            column: 15
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 130,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 130,
            column: 55
          }
        }, {
          start: {
            line: 130,
            column: 59
          },
          end: {
            line: 130,
            column: 68
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "7": {
        loc: {
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 169,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 6
          },
          end: {
            line: 169,
            column: 7
          }
        }, {
          start: {
            line: 150,
            column: 13
          },
          end: {
            line: 169,
            column: 7
          }
        }],
        line: 138
      },
      "8": {
        loc: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "9": {
        loc: {
          start: {
            line: 222,
            column: 17
          },
          end: {
            line: 222,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 222,
            column: 42
          },
          end: {
            line: 222,
            column: 55
          }
        }, {
          start: {
            line: 222,
            column: 58
          },
          end: {
            line: 222,
            column: 73
          }
        }],
        line: 222
      },
      "10": {
        loc: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 250,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "11": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 35
          }
        }, {
          start: {
            line: 256,
            column: 39
          },
          end: {
            line: 256,
            column: 77
          }
        }],
        line: 256
      },
      "12": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 257,
            column: 39
          }
        }, {
          start: {
            line: 257,
            column: 43
          },
          end: {
            line: 259,
            column: 9
          }
        }],
        line: 257
      },
      "13": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 260,
            column: 34
          }
        }, {
          start: {
            line: 260,
            column: 38
          },
          end: {
            line: 260,
            column: 74
          }
        }],
        line: 260
      },
      "14": {
        loc: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "15": {
        loc: {
          start: {
            line: 293,
            column: 17
          },
          end: {
            line: 293,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 42
          },
          end: {
            line: 293,
            column: 55
          }
        }, {
          start: {
            line: 293,
            column: 58
          },
          end: {
            line: 293,
            column: 73
          }
        }],
        line: 293
      },
      "16": {
        loc: {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "17": {
        loc: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "18": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 318,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: 318,
            column: 17
          },
          end: {
            line: 318,
            column: 54
          }
        }],
        line: 318
      },
      "19": {
        loc: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 341,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "20": {
        loc: {
          start: {
            line: 363,
            column: 17
          },
          end: {
            line: 363,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 42
          },
          end: {
            line: 363,
            column: 55
          }
        }, {
          start: {
            line: 363,
            column: 58
          },
          end: {
            line: 363,
            column: 73
          }
        }],
        line: 363
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cfda8cf949962fe81326ad7f823ebb2d3e17adf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_utzvudh10 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_utzvudh10();
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * API Route: Email Newsletter Subscription
 * Handles email subscription and preference management
 */

import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { z } from "zod";
import { EmailFrequency } from "@prisma/client";
import crypto from "crypto";

// Validation schemas
var SubscribeSchema =
/* istanbul ignore next */
(cov_utzvudh10().s[0]++, z.object({
  email: z.string().email(),
  frequency: z.nativeEnum(EmailFrequency)[
  /* istanbul ignore next */
  "default"]("DAILY"),
  preferredTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)[
  /* istanbul ignore next */
  "default"]("08:00"),
  timezone: z.string()[
  /* istanbul ignore next */
  "default"]("Europe/London"),
  source: z.string().optional()
}));
var UnsubscribeSchema =
/* istanbul ignore next */
(cov_utzvudh10().s[1]++, z.object({
  email: z.string().email(),
  token: z.string().optional() // For secure unsubscribe links
}));
var UpdatePreferencesSchema =
/* istanbul ignore next */
(cov_utzvudh10().s[2]++, z.object({
  email: z.string().email(),
  frequency: z.nativeEnum(EmailFrequency).optional(),
  preferredTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/).optional(),
  timezone: z.string().optional()
}));

// Helper function to generate unsubscribe token
function generateUnsubscribeToken(email) {
  /* istanbul ignore next */
  cov_utzvudh10().f[0]++;
  var secret =
  /* istanbul ignore next */
  (cov_utzvudh10().s[3]++,
  /* istanbul ignore next */
  (cov_utzvudh10().b[0][0]++, process.env.UNSUBSCRIBE_SECRET) ||
  /* istanbul ignore next */
  (cov_utzvudh10().b[0][1]++, "default-secret"));
  /* istanbul ignore next */
  cov_utzvudh10().s[4]++;
  return crypto.createHmac("sha256", secret).update(email).digest("hex").substring(0, 16);
}

// Helper function to verify unsubscribe token
function verifyUnsubscribeToken(email, token) {
  /* istanbul ignore next */
  cov_utzvudh10().f[1]++;
  var expectedToken =
  /* istanbul ignore next */
  (cov_utzvudh10().s[5]++, generateUnsubscribeToken(email));
  /* istanbul ignore next */
  cov_utzvudh10().s[6]++;
  return crypto.timingSafeEqual(Buffer.from(token), Buffer.from(expectedToken));
}

// GET - Check subscription status
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}

// POST - Subscribe to newsletter
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var url, email, subscriber, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_utzvudh10().f[2]++;
          cov_utzvudh10().s[7]++;
          _context.p = 1;
          url = (cov_utzvudh10().s[8]++, new URL(request.url));
          email = (cov_utzvudh10().s[9]++, url.searchParams.get("email"));
          cov_utzvudh10().s[10]++;
          if (email) {
            _context.n = 2;
            break;
          }
          cov_utzvudh10().b[1][0]++;
          cov_utzvudh10().s[11]++;
          return _context.a(2, NextResponse.json({
            success: false,
            error: "Email parameter is required"
          }, {
            status: 400
          }));
        case 2:
          cov_utzvudh10().b[1][1]++;
        case 3:
          cov_utzvudh10().s[12]++;
          _context.n = 4;
          return prisma.emailSubscriber.findUnique({
            where: {
              email: email
            },
            select: {
              id: true,
              email: true,
              isActive: true,
              isVerified: true,
              frequency: true,
              preferredTime: true,
              timezone: true,
              subscribedAt: true,
              lastEmailSent: true,
              totalEmailsSent: true,
              totalOpens: true,
              totalClicks: true
            }
          });
        case 4:
          subscriber = _context.v;
          cov_utzvudh10().s[13]++;
          if (subscriber) {
            _context.n = 5;
            break;
          }
          cov_utzvudh10().b[2][0]++;
          cov_utzvudh10().s[14]++;
          return _context.a(2, NextResponse.json({
            success: true,
            subscribed: false,
            message: "Email not subscribed"
          }));
        case 5:
          cov_utzvudh10().b[2][1]++;
        case 6:
          cov_utzvudh10().s[15]++;
          return _context.a(2, NextResponse.json({
            success: true,
            subscribed: true,
            data: subscriber
          }));
        case 7:
          _context.p = 7;
          _t = _context.v;
          cov_utzvudh10().s[16]++;
          console.error("Failed to check subscription status:",
          /* istanbul ignore next */
          _t);
          cov_utzvudh10().s[17]++;
          return _context.a(2, NextResponse.json({
            success: false,
            error: "Failed to check subscription status",
            details:
            /* istanbul ignore next */
            _t instanceof Error ?
            /* istanbul ignore next */
            (cov_utzvudh10().b[3][0]++,
            /* istanbul ignore next */
            _t.message) :
            /* istanbul ignore next */
            (cov_utzvudh10().b[3][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _GET.apply(this, arguments);
}
export
/* istanbul ignore next */
function POST(_x2) {
  return _POST.apply(this, arguments);
}

// PUT - Update subscription preferences
/* istanbul ignore next */
function _POST() {
  _POST = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(request)
  /* istanbul ignore next */
  {
    var body, validatedData, ipAddress, userAgent, existing, reactivated, subscriber, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_utzvudh10().f[3]++;
          cov_utzvudh10().s[18]++;
          _context2.p = 1;
          cov_utzvudh10().s[19]++;
          _context2.n = 2;
          return request.json();
        case 2:
          body = _context2.v;
          // Validate input
          validatedData = (cov_utzvudh10().s[20]++, SubscribeSchema.parse(body)); // Get IP and user agent for analytics
          ipAddress = (cov_utzvudh10().s[21]++,
          /* istanbul ignore next */
          (cov_utzvudh10().b[4][0]++, request.headers.get("x-forwarded-for")) ||
          /* istanbul ignore next */
          (cov_utzvudh10().b[4][1]++, request.headers.get("x-real-ip")) ||
          /* istanbul ignore next */
          (cov_utzvudh10().b[4][2]++, "unknown"));
          userAgent = (cov_utzvudh10().s[22]++,
          /* istanbul ignore next */
          (cov_utzvudh10().b[5][0]++, request.headers.get("user-agent")) ||
          /* istanbul ignore next */
          (cov_utzvudh10().b[5][1]++, "unknown")); // Check if already subscribed
          cov_utzvudh10().s[23]++;
          _context2.n = 3;
          return prisma.emailSubscriber.findUnique({
            where: {
              email: validatedData.email
            }
          });
        case 3:
          existing = _context2.v;
          cov_utzvudh10().s[24]++;
          if (!existing) {
            _context2.n = 7;
            break;
          }
          cov_utzvudh10().b[6][0]++;
          cov_utzvudh10().s[25]++;
          if (!existing.isActive) {
            _context2.n = 4;
            break;
          }
          cov_utzvudh10().b[7][0]++;
          cov_utzvudh10().s[26]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "Email already subscribed",
            data: {
              isActive: existing.isActive,
              frequency: existing.frequency
            }
          }, {
            status: 409
          }));
        case 4:
          cov_utzvudh10().b[7][1]++;
          cov_utzvudh10().s[27]++;
          _context2.n = 5;
          return prisma.emailSubscriber.update({
            where: {
              email: validatedData.email
            },
            data: {
              isActive: true,
              frequency: validatedData.frequency,
              preferredTime: validatedData.preferredTime,
              timezone: validatedData.timezone,
              unsubscribedAt: null,
              updatedAt: new Date()
            }
          });
        case 5:
          reactivated = _context2.v;
          cov_utzvudh10().s[28]++;
          return _context2.a(2, NextResponse.json({
            success: true,
            data: reactivated,
            message: "Subscription reactivated successfully"
          }));
        case 6:
          _context2.n = 8;
          break;
        case 7:
          cov_utzvudh10().b[6][1]++;
        case 8:
          cov_utzvudh10().s[29]++;
          _context2.n = 9;
          return prisma.emailSubscriber.create({
            data: {
              email: validatedData.email,
              frequency: validatedData.frequency,
              preferredTime: validatedData.preferredTime,
              timezone: validatedData.timezone,
              source: validatedData.source,
              ipAddress: ipAddress.substring(0, 45),
              // Limit IP length
              userAgent: userAgent.substring(0, 255),
              // Limit user agent length
              isActive: true,
              isVerified: false // Will need email verification
            }
          });
        case 9:
          subscriber = _context2.v;
          cov_utzvudh10().s[30]++;
          return _context2.a(2, NextResponse.json({
            success: true,
            data: {
              id: subscriber.id,
              email: subscriber.email,
              frequency: subscriber.frequency,
              isVerified: subscriber.isVerified
            },
            message: "Successfully subscribed! Please check your email to verify your subscription."
          }, {
            status: 201
          }));
        case 10:
          _context2.p = 10;
          _t2 = _context2.v;
          cov_utzvudh10().s[31]++;
          if (!(
          /* istanbul ignore next */
          _t2 instanceof z.ZodError)) {
            _context2.n = 11;
            break;
          }
          cov_utzvudh10().b[8][0]++;
          cov_utzvudh10().s[32]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "Invalid subscription data",
            details:
            /* istanbul ignore next */
            _t2.errors
          }, {
            status: 400
          }));
        case 11:
          cov_utzvudh10().b[8][1]++;
        case 12:
          cov_utzvudh10().s[33]++;
          console.error("Failed to subscribe:",
          /* istanbul ignore next */
          _t2);
          cov_utzvudh10().s[34]++;
          return _context2.a(2, NextResponse.json({
            success: false,
            error: "Failed to process subscription",
            details:
            /* istanbul ignore next */
            _t2 instanceof Error ?
            /* istanbul ignore next */
            (cov_utzvudh10().b[9][0]++,
            /* istanbul ignore next */
            _t2.message) :
            /* istanbul ignore next */
            (cov_utzvudh10().b[9][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee2, null, [[1, 10]]);
  }));
  return _POST.apply(this, arguments);
}
export
/* istanbul ignore next */
function PUT(_x3) {
  return _PUT.apply(this, arguments);
}

// DELETE - Unsubscribe from newsletter
/* istanbul ignore next */
function _PUT() {
  _PUT = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(request)
  /* istanbul ignore next */
  {
    var body, validatedData, subscriber, updated, _t3;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_utzvudh10().f[4]++;
          cov_utzvudh10().s[35]++;
          _context3.p = 1;
          cov_utzvudh10().s[36]++;
          _context3.n = 2;
          return request.json();
        case 2:
          body = _context3.v;
          // Validate input
          validatedData = (cov_utzvudh10().s[37]++, UpdatePreferencesSchema.parse(body)); // Find subscriber
          cov_utzvudh10().s[38]++;
          _context3.n = 3;
          return prisma.emailSubscriber.findUnique({
            where: {
              email: validatedData.email
            }
          });
        case 3:
          subscriber = _context3.v;
          cov_utzvudh10().s[39]++;
          if (subscriber) {
            _context3.n = 4;
            break;
          }
          cov_utzvudh10().b[10][0]++;
          cov_utzvudh10().s[40]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Email not found"
          }, {
            status: 404
          }));
        case 4:
          cov_utzvudh10().b[10][1]++;
        case 5:
          cov_utzvudh10().s[41]++;
          _context3.n = 6;
          return prisma.emailSubscriber.update({
            where: {
              email: validatedData.email
            },
            data:
            /* istanbul ignore next */
            _objectSpread(_objectSpread(_objectSpread(_objectSpread({},
            /* istanbul ignore next */
            (cov_utzvudh10().b[11][0]++, validatedData.frequency) &&
            /* istanbul ignore next */
            (cov_utzvudh10().b[11][1]++, {
              frequency: validatedData.frequency
            })),
            /* istanbul ignore next */
            (cov_utzvudh10().b[12][0]++, validatedData.preferredTime) &&
            /* istanbul ignore next */
            (cov_utzvudh10().b[12][1]++, {
              preferredTime: validatedData.preferredTime
            })),
            /* istanbul ignore next */
            (cov_utzvudh10().b[13][0]++, validatedData.timezone) &&
            /* istanbul ignore next */
            (cov_utzvudh10().b[13][1]++, {
              timezone: validatedData.timezone
            })), {}, {
              updatedAt: new Date()
            })
          });
        case 6:
          updated = _context3.v;
          cov_utzvudh10().s[42]++;
          return _context3.a(2, NextResponse.json({
            success: true,
            data: {
              email: updated.email,
              frequency: updated.frequency,
              preferredTime: updated.preferredTime,
              timezone: updated.timezone
            },
            message: "Preferences updated successfully"
          }));
        case 7:
          _context3.p = 7;
          _t3 = _context3.v;
          cov_utzvudh10().s[43]++;
          if (!(
          /* istanbul ignore next */
          _t3 instanceof z.ZodError)) {
            _context3.n = 8;
            break;
          }
          cov_utzvudh10().b[14][0]++;
          cov_utzvudh10().s[44]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Invalid preference data",
            details:
            /* istanbul ignore next */
            _t3.errors
          }, {
            status: 400
          }));
        case 8:
          cov_utzvudh10().b[14][1]++;
        case 9:
          cov_utzvudh10().s[45]++;
          console.error("Failed to update preferences:",
          /* istanbul ignore next */
          _t3);
          cov_utzvudh10().s[46]++;
          return _context3.a(2, NextResponse.json({
            success: false,
            error: "Failed to update preferences",
            details:
            /* istanbul ignore next */
            _t3 instanceof Error ?
            /* istanbul ignore next */
            (cov_utzvudh10().b[15][0]++,
            /* istanbul ignore next */
            _t3.message) :
            /* istanbul ignore next */
            (cov_utzvudh10().b[15][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee3, null, [[1, 7]]);
  }));
  return _PUT.apply(this, arguments);
}
export
/* istanbul ignore next */
function DELETE(_x4) {
  return _DELETE.apply(this, arguments);
}
/* istanbul ignore next */
function _DELETE() {
  _DELETE = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4(request)
  /* istanbul ignore next */
  {
    var url, email, token, subscriber, _t4;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          cov_utzvudh10().f[5]++;
          cov_utzvudh10().s[47]++;
          _context4.p = 1;
          url = (cov_utzvudh10().s[48]++, new URL(request.url));
          email = (cov_utzvudh10().s[49]++, url.searchParams.get("email"));
          token = (cov_utzvudh10().s[50]++, url.searchParams.get("token"));
          cov_utzvudh10().s[51]++;
          if (email) {
            _context4.n = 2;
            break;
          }
          cov_utzvudh10().b[16][0]++;
          cov_utzvudh10().s[52]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Email parameter is required"
          }, {
            status: 400
          }));
        case 2:
          cov_utzvudh10().b[16][1]++;
        case 3:
          cov_utzvudh10().s[53]++;
          if (!(
          /* istanbul ignore next */
          (cov_utzvudh10().b[18][0]++, token) &&
          /* istanbul ignore next */
          (cov_utzvudh10().b[18][1]++, !verifyUnsubscribeToken(email, token)))) {
            _context4.n = 4;
            break;
          }
          cov_utzvudh10().b[17][0]++;
          cov_utzvudh10().s[54]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Invalid unsubscribe token"
          }, {
            status: 401
          }));
        case 4:
          cov_utzvudh10().b[17][1]++;
        case 5:
          cov_utzvudh10().s[55]++;
          _context4.n = 6;
          return prisma.emailSubscriber.findUnique({
            where: {
              email: email
            }
          });
        case 6:
          subscriber = _context4.v;
          cov_utzvudh10().s[56]++;
          if (subscriber) {
            _context4.n = 7;
            break;
          }
          cov_utzvudh10().b[19][0]++;
          cov_utzvudh10().s[57]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Email not found"
          }, {
            status: 404
          }));
        case 7:
          cov_utzvudh10().b[19][1]++;
        case 8:
          cov_utzvudh10().s[58]++;
          _context4.n = 9;
          return prisma.emailSubscriber.update({
            where: {
              email: email
            },
            data: {
              isActive: false,
              unsubscribedAt: new Date()
            }
          });
        case 9:
          cov_utzvudh10().s[59]++;
          return _context4.a(2, NextResponse.json({
            success: true,
            message: "Successfully unsubscribed from Transfer Juice newsletter"
          }));
        case 10:
          _context4.p = 10;
          _t4 = _context4.v;
          cov_utzvudh10().s[60]++;
          console.error("Failed to unsubscribe:",
          /* istanbul ignore next */
          _t4);
          cov_utzvudh10().s[61]++;
          return _context4.a(2, NextResponse.json({
            success: false,
            error: "Failed to process unsubscribe",
            details:
            /* istanbul ignore next */
            _t4 instanceof Error ?
            /* istanbul ignore next */
            (cov_utzvudh10().b[20][0]++,
            /* istanbul ignore next */
            _t4.message) :
            /* istanbul ignore next */
            (cov_utzvudh10().b[20][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee4, null, [[1, 10]]);
  }));
  return _DELETE.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,