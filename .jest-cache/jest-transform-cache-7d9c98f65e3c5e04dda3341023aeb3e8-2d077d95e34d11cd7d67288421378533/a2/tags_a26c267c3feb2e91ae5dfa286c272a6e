62e9e82e39356f6b0e926dc190bf8510
/* istanbul ignore next */ function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function cov_wof0t1ycq() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/database/tags.ts";
  var hash = "c31565db976e038635a3b360cd90cda7f80911b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/database/tags.ts",
    statementMap: {
      "0": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 69
        }
      },
      "1": {
        start: {
          line: 23,
          column: 19
        },
        end: {
          line: 28,
          column: 4
        }
      },
      "2": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "3": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 38,
          column: 7
        }
      },
      "4": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 20
        }
      },
      "5": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "6": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 68
        }
      },
      "7": {
        start: {
          line: 70,
          column: 45
        },
        end: {
          line: 70,
          column: 65
        }
      },
      "8": {
        start: {
          line: 82,
          column: 46
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "9": {
        start: {
          line: 84,
          column: 2
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "10": {
        start: {
          line: 104,
          column: 22
        },
        end: {
          line: 116,
          column: 4
        }
      },
      "11": {
        start: {
          line: 119,
          column: 17
        },
        end: {
          line: 119,
          column: 48
        }
      },
      "12": {
        start: {
          line: 119,
          column: 40
        },
        end: {
          line: 119,
          column: 47
        }
      },
      "13": {
        start: {
          line: 120,
          column: 15
        },
        end: {
          line: 122,
          column: 4
        }
      },
      "14": {
        start: {
          line: 125,
          column: 17
        },
        end: {
          line: 125,
          column: 63
        }
      },
      "15": {
        start: {
          line: 125,
          column: 52
        },
        end: {
          line: 125,
          column: 61
        }
      },
      "16": {
        start: {
          line: 127,
          column: 2
        },
        end: {
          line: 132,
          column: 25
        }
      },
      "17": {
        start: {
          line: 128,
          column: 21
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "18": {
        start: {
          line: 132,
          column: 19
        },
        end: {
          line: 132,
          column: 23
        }
      },
      "19": {
        start: {
          line: 145,
          column: 31
        },
        end: {
          line: 145,
          column: 44
        }
      },
      "20": {
        start: {
          line: 146,
          column: 26
        },
        end: {
          line: 146,
          column: 66
        }
      },
      "21": {
        start: {
          line: 148,
          column: 2
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "22": {
        start: {
          line: 165,
          column: 17
        },
        end: {
          line: 173,
          column: 4
        }
      },
      "23": {
        start: {
          line: 176,
          column: 2
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "24": {
        start: {
          line: 186,
          column: 2
        },
        end: {
          line: 186,
          column: 22
        }
      },
      "25": {
        start: {
          line: 194,
          column: 27
        },
        end: {
          line: 198,
          column: 4
        }
      },
      "26": {
        start: {
          line: 200,
          column: 22
        },
        end: {
          line: 200,
          column: 67
        }
      },
      "27": {
        start: {
          line: 200,
          column: 52
        },
        end: {
          line: 200,
          column: 66
        }
      },
      "28": {
        start: {
          line: 203,
          column: 26
        },
        end: {
          line: 216,
          column: 4
        }
      },
      "29": {
        start: {
          line: 219,
          column: 24
        },
        end: {
          line: 219,
          column: 59
        }
      },
      "30": {
        start: {
          line: 219,
          column: 51
        },
        end: {
          line: 219,
          column: 58
        }
      },
      "31": {
        start: {
          line: 220,
          column: 2
        },
        end: {
          line: 222,
          column: 5
        }
      },
      "32": {
        start: {
          line: 232,
          column: 2
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "33": {
        start: {
          line: 234,
          column: 35
        },
        end: {
          line: 237,
          column: 6
        }
      },
      "34": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 241,
          column: 5
        }
      },
      "35": {
        start: {
          line: 240,
          column: 6
        },
        end: {
          line: 240,
          column: 52
        }
      },
      "36": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 247,
          column: 7
        }
      },
      "37": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 253,
          column: 7
        }
      },
      "38": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 261,
          column: 7
        }
      },
      "39": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 266,
          column: 7
        }
      },
      "40": {
        start: {
          line: 275,
          column: 21
        },
        end: {
          line: 284,
          column: 4
        }
      },
      "41": {
        start: {
          line: 286,
          column: 2
        },
        end: {
          line: 286,
          column: 40
        }
      },
      "42": {
        start: {
          line: 286,
          column: 31
        },
        end: {
          line: 286,
          column: 40
        }
      },
      "43": {
        start: {
          line: 289,
          column: 17
        },
        end: {
          line: 293,
          column: 4
        }
      },
      "44": {
        start: {
          line: 291,
          column: 38
        },
        end: {
          line: 291,
          column: 42
        }
      },
      "45": {
        start: {
          line: 295,
          column: 2
        },
        end: {
          line: 295,
          column: 22
        }
      }
    },
    fnMap: {
      "0": {
        name: "findOrCreateTag",
        decl: {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 37
          }
        },
        loc: {
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 19
      },
      "1": {
        name: "findOrCreateTags",
        decl: {
          start: {
            line: 61,
            column: 22
          },
          end: {
            line: 61,
            column: 38
          }
        },
        loc: {
          start: {
            line: 69,
            column: 18
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 69
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 36
          },
          end: {
            line: 70,
            column: 37
          }
        },
        loc: {
          start: {
            line: 70,
            column: 45
          },
          end: {
            line: 70,
            column: 65
          }
        },
        line: 70
      },
      "3": {
        name: "getPopularTags",
        decl: {
          start: {
            line: 76,
            column: 22
          },
          end: {
            line: 76,
            column: 36
          }
        },
        loc: {
          start: {
            line: 81,
            column: 19
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 81
      },
      "4": {
        name: "getTrendingTags",
        decl: {
          start: {
            line: 99,
            column: 22
          },
          end: {
            line: 99,
            column: 37
          }
        },
        loc: {
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 133,
            column: 1
          }
        },
        line: 102
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 119,
            column: 34
          }
        },
        loc: {
          start: {
            line: 119,
            column: 40
          },
          end: {
            line: 119,
            column: 47
          }
        },
        line: 119
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 125,
            column: 45
          },
          end: {
            line: 125,
            column: 46
          }
        },
        loc: {
          start: {
            line: 125,
            column: 52
          },
          end: {
            line: 125,
            column: 61
          }
        },
        line: 125
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 128,
            column: 9
          },
          end: {
            line: 128,
            column: 10
          }
        },
        loc: {
          start: {
            line: 128,
            column: 21
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 128
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        loc: {
          start: {
            line: 132,
            column: 19
          },
          end: {
            line: 132,
            column: 23
          }
        },
        line: 132
      },
      "9": {
        name: "searchTags",
        decl: {
          start: {
            line: 138,
            column: 22
          },
          end: {
            line: 138,
            column: 32
          }
        },
        loc: {
          start: {
            line: 144,
            column: 18
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 144
      },
      "10": {
        name: "updateTagPopularity",
        decl: {
          start: {
            line: 163,
            column: 22
          },
          end: {
            line: 163,
            column: 41
          }
        },
        loc: {
          start: {
            line: 163,
            column: 76
          },
          end: {
            line: 187,
            column: 1
          }
        },
        line: 163
      },
      "11": {
        name: "getRelatedTags",
        decl: {
          start: {
            line: 192,
            column: 22
          },
          end: {
            line: 192,
            column: 36
          }
        },
        loc: {
          start: {
            line: 192,
            column: 79
          },
          end: {
            line: 223,
            column: 1
          }
        },
        line: 192
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 200,
            column: 43
          },
          end: {
            line: 200,
            column: 44
          }
        },
        loc: {
          start: {
            line: 200,
            column: 52
          },
          end: {
            line: 200,
            column: 66
          }
        },
        line: 200
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 219,
            column: 44
          },
          end: {
            line: 219,
            column: 45
          }
        },
        loc: {
          start: {
            line: 219,
            column: 51
          },
          end: {
            line: 219,
            column: 58
          }
        },
        line: 219
      },
      "14": {
        name: "mergeTags",
        decl: {
          start: {
            line: 228,
            column: 22
          },
          end: {
            line: 228,
            column: 31
          }
        },
        loc: {
          start: {
            line: 231,
            column: 17
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 231
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 232,
            column: 29
          }
        },
        loc: {
          start: {
            line: 232,
            column: 42
          },
          end: {
            line: 267,
            column: 3
          }
        },
        line: 232
      },
      "16": {
        name: "cleanupUnusedTags",
        decl: {
          start: {
            line: 273,
            column: 22
          },
          end: {
            line: 273,
            column: 39
          }
        },
        loc: {
          start: {
            line: 273,
            column: 59
          },
          end: {
            line: 296,
            column: 1
          }
        },
        line: 273
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 291,
            column: 31
          },
          end: {
            line: 291,
            column: 32
          }
        },
        loc: {
          start: {
            line: 291,
            column: 38
          },
          end: {
            line: 291,
            column: 42
          }
        },
        line: 291
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 82,
            column: 34
          }
        }],
        line: 82
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 82,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 82,
            column: 53
          }
        }, {
          start: {
            line: 82,
            column: 57
          },
          end: {
            line: 82,
            column: 59
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 10
          },
          end: {
            line: 86,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 10
          },
          end: {
            line: 86,
            column: 14
          }
        }, {
          start: {
            line: 86,
            column: 18
          },
          end: {
            line: 86,
            column: 26
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 10
          },
          end: {
            line: 87,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 10
          },
          end: {
            line: 87,
            column: 16
          }
        }, {
          start: {
            line: 87,
            column: 20
          },
          end: {
            line: 87,
            column: 30
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 10
          },
          end: {
            line: 88,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 10
          },
          end: {
            line: 88,
            column: 15
          }
        }, {
          start: {
            line: 88,
            column: 19
          },
          end: {
            line: 88,
            column: 49
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 2
          },
          end: {
            line: 101,
            column: 12
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 101,
            column: 10
          },
          end: {
            line: 101,
            column: 12
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 26
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 145,
            column: 31
          },
          end: {
            line: 145,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 31
          },
          end: {
            line: 145,
            column: 38
          }
        }, {
          start: {
            line: 145,
            column: 42
          },
          end: {
            line: 145,
            column: 44
          }
        }],
        line: 145
      },
      "9": {
        loc: {
          start: {
            line: 153,
            column: 10
          },
          end: {
            line: 153,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 10
          },
          end: {
            line: 153,
            column: 14
          }
        }, {
          start: {
            line: 153,
            column: 18
          },
          end: {
            line: 153,
            column: 26
          }
        }],
        line: 153
      },
      "10": {
        loc: {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 163,
            column: 54
          },
          end: {
            line: 163,
            column: 57
          }
        }],
        line: 163
      },
      "11": {
        loc: {
          start: {
            line: 192,
            column: 52
          },
          end: {
            line: 192,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 192,
            column: 60
          },
          end: {
            line: 192,
            column: 61
          }
        }],
        line: 192
      },
      "12": {
        loc: {
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "13": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 239,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 239,
            column: 18
          }
        }, {
          start: {
            line: 239,
            column: 22
          },
          end: {
            line: 239,
            column: 32
          }
        }],
        line: 239
      },
      "14": {
        loc: {
          start: {
            line: 286,
            column: 2
          },
          end: {
            line: 286,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 2
          },
          end: {
            line: 286,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c31565db976e038635a3b360cd90cda7f80911b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_wof0t1ycq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_wof0t1ycq();
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Tag Data Access Layer
 * Database operations for tag management
 */

import { prisma } from "@/lib/prisma";
/**
 * Find or create tag
 */
export
/* istanbul ignore next */
function findOrCreateTag(_x) {
  return _findOrCreateTag.apply(this, arguments);
}

/**
 * Find or create multiple tags
 */
/* istanbul ignore next */
function _findOrCreateTag() {
  _findOrCreateTag = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(data)
  /* istanbul ignore next */
  {
    var normalizedName, existing;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_wof0t1ycq().f[0]++;
          normalizedName = (cov_wof0t1ycq().s[0]++, data.name.toLowerCase().replace(/\s+/g, "-")); // Try to find existing tag
          cov_wof0t1ycq().s[1]++;
          _context.n = 1;
          return prisma.tag.findFirst({
            where: {
              normalizedName: normalizedName,
              type: data.type
            }
          });
        case 1:
          existing = _context.v;
          cov_wof0t1ycq().s[2]++;
          if (!existing) {
            _context.n = 3;
            break;
          }
          cov_wof0t1ycq().b[0][0]++;
          cov_wof0t1ycq().s[3]++;
          _context.n = 2;
          return prisma.tag.update({
            where: {
              id: existing.id
            },
            data: {
              usageCount: {
                increment: 1
              },
              lastUsedAt: new Date()
            }
          });
        case 2:
          cov_wof0t1ycq().s[4]++;
          return _context.a(2, existing);
        case 3:
          cov_wof0t1ycq().b[0][1]++;
        case 4:
          cov_wof0t1ycq().s[5]++;
          _context.n = 5;
          return prisma.tag.create({
            data: {
              name: data.name,
              type: data.type,
              normalizedName: normalizedName,
              league: data.league,
              country: data.country,
              position: data.position,
              transferValue: data.transferValue,
              usageCount: 1,
              lastUsedAt: new Date()
            }
          });
        case 5:
          return _context.a(2, _context.v);
      }
    }, _callee);
  }));
  return _findOrCreateTag.apply(this, arguments);
}
export
/* istanbul ignore next */
function findOrCreateTags(_x2) {
  return _findOrCreateTags.apply(this, arguments);
}

/**
 * Get popular tags
 */
/* istanbul ignore next */
function _findOrCreateTags() {
  _findOrCreateTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(tags)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_wof0t1ycq().f[1]++;
          cov_wof0t1ycq().s[6]++;
          _context2.n = 1;
          return Promise.all(tags.map(function (tag) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[2]++;
            cov_wof0t1ycq().s[7]++;
            return findOrCreateTag(tag);
          }));
        case 1:
          return _context2.a(2, _context2.v);
      }
    }, _callee2);
  }));
  return _findOrCreateTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function getPopularTags(_x3) {
  return _getPopularTags.apply(this, arguments);
}

/**
 * Get trending tags
 */
/* istanbul ignore next */
function _getPopularTags() {
  _getPopularTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(options)
  /* istanbul ignore next */
  {
    var _ref, type, league, _ref$limit, limit, since;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_wof0t1ycq().f[3]++;
          _ref = (cov_wof0t1ycq().s[8]++,
          /* istanbul ignore next */
          (cov_wof0t1ycq().b[2][0]++, options) ||
          /* istanbul ignore next */
          (cov_wof0t1ycq().b[2][1]++, {})), type = _ref.type, league = _ref.league, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? (cov_wof0t1ycq().b[1][0]++, 20) : _ref$limit, since = _ref.since;
          cov_wof0t1ycq().s[9]++;
          _context3.n = 1;
          return prisma.tag.findMany({
            where:
            /* istanbul ignore next */
            _objectSpread(_objectSpread(_objectSpread(_objectSpread({},
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[3][0]++, type) &&
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[3][1]++, {
              type: type
            })),
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[4][0]++, league) &&
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[4][1]++, {
              league: league
            })),
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[5][0]++, since) &&
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[5][1]++, {
              lastUsedAt: {
                gte: since
              }
            })), {}, {
              isPopular: true
            }),
            orderBy: {
              usageCount: "desc"
            },
            take: limit
          });
        case 1:
          return _context3.a(2, _context3.v);
      }
    }, _callee3);
  }));
  return _getPopularTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function getTrendingTags(_x4) {
  return _getTrendingTags.apply(this, arguments);
}

/**
 * Search tags by name
 */
/* istanbul ignore next */
function _getTrendingTags() {
  _getTrendingTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4(since)
  /* istanbul ignore next */
  {
    var limit,
      recentUsage,
      tagIds,
      tags,
      tagMap,
      _args4 = arguments;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          limit = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : (cov_wof0t1ycq().b[6][0]++, 10);
          cov_wof0t1ycq().f[4]++;
          cov_wof0t1ycq().s[10]++;
          _context4.n = 1;
          return prisma.feedItemTag.groupBy({
            by: ["tagId"],
            where: {
              createdAt: {
                gte: since
              }
            },
            _count: true,
            orderBy: {
              _count: {
                tagId: "desc"
              }
            },
            take: limit
          });
        case 1:
          recentUsage = _context4.v;
          // Get tag details
          tagIds = (cov_wof0t1ycq().s[11]++, recentUsage.map(function (u) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[5]++;
            cov_wof0t1ycq().s[12]++;
            return u.tagId;
          }));
          cov_wof0t1ycq().s[13]++;
          _context4.n = 2;
          return prisma.tag.findMany({
            where: {
              id: {
                /* istanbul ignore next */
                "in": tagIds
              }
            }
          });
        case 2:
          tags = _context4.v;
          // Combine with usage counts
          tagMap = (cov_wof0t1ycq().s[14]++, Object.fromEntries(tags.map(function (t) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[6]++;
            cov_wof0t1ycq().s[15]++;
            return [t.id, t];
          })));
          cov_wof0t1ycq().s[16]++;
          return _context4.a(2, recentUsage.map(function (usage) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[7]++;
            cov_wof0t1ycq().s[17]++;
            return /* istanbul ignore next */_objectSpread(_objectSpread({}, tagMap[usage.tagId]), {}, {
              recentUsage: usage._count
            });
          }).filter(function (t) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[8]++;
            cov_wof0t1ycq().s[18]++;
            return t.id;
          }));
      }
    }, _callee4);
  }));
  return _getTrendingTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function searchTags(_x5, _x6) {
  return _searchTags.apply(this, arguments);
}

/**
 * Update tag popularity
 */
/* istanbul ignore next */
function _searchTags() {
  _searchTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee5(query, options)
  /* istanbul ignore next */
  {
    var _ref2, type, _ref2$limit, limit, normalizedQuery;
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          cov_wof0t1ycq().f[9]++;
          _ref2 = (cov_wof0t1ycq().s[19]++,
          /* istanbul ignore next */
          (cov_wof0t1ycq().b[8][0]++, options) ||
          /* istanbul ignore next */
          (cov_wof0t1ycq().b[8][1]++, {})), type = _ref2.type, _ref2$limit = _ref2.limit, limit = _ref2$limit === void 0 ? (cov_wof0t1ycq().b[7][0]++, 10) : _ref2$limit;
          normalizedQuery = (cov_wof0t1ycq().s[20]++, query.toLowerCase().replace(/\s+/g, "-"));
          cov_wof0t1ycq().s[21]++;
          _context5.n = 1;
          return prisma.tag.findMany({
            where:
            /* istanbul ignore next */
            _objectSpread({
              normalizedName: {
                contains: normalizedQuery
              }
            },
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[9][0]++, type) &&
            /* istanbul ignore next */
            (cov_wof0t1ycq().b[9][1]++, {
              type: type
            })),
            orderBy: {
              usageCount: "desc"
            },
            take: limit
          });
        case 1:
          return _context5.a(2, _context5.v);
      }
    }, _callee5);
  }));
  return _searchTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function updateTagPopularity() {
  return _updateTagPopularity.apply(this, arguments);
}

/**
 * Get related tags
 */
/* istanbul ignore next */
function _updateTagPopularity() {
  _updateTagPopularity = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee6()
  /* istanbul ignore next */
  {
    var threshold,
      result,
      _args6 = arguments;
    return _regenerator().w(function (_context6) {
      while (1) switch (_context6.n) {
        case 0:
          threshold = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : (cov_wof0t1ycq().b[10][0]++, 100);
          cov_wof0t1ycq().f[10]++;
          cov_wof0t1ycq().s[22]++;
          _context6.n = 1;
          return prisma.tag.updateMany({
            where: {
              usageCount: {
                gte: threshold
              },
              isPopular: false
            },
            data: {
              isPopular: true
            }
          });
        case 1:
          result = _context6.v;
          cov_wof0t1ycq().s[23]++;
          _context6.n = 2;
          return prisma.tag.updateMany({
            where: {
              usageCount: {
                lt: threshold
              },
              isPopular: true
            },
            data: {
              isPopular: false
            }
          });
        case 2:
          cov_wof0t1ycq().s[24]++;
          return _context6.a(2, result.count);
      }
    }, _callee6);
  }));
  return _updateTagPopularity.apply(this, arguments);
}
export
/* istanbul ignore next */
function getRelatedTags(_x7) {
  return _getRelatedTags.apply(this, arguments);
}

/**
 * Merge duplicate tags
 */
/* istanbul ignore next */
function _getRelatedTags() {
  _getRelatedTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee7(tagId)
  /* istanbul ignore next */
  {
    var limit,
      feedItemsWithTag,
      feedItemIds,
      relatedTagUsage,
      relatedTagIds,
      _args7 = arguments;
    return _regenerator().w(function (_context7) {
      while (1) switch (_context7.n) {
        case 0:
          limit = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : (cov_wof0t1ycq().b[11][0]++, 5);
          cov_wof0t1ycq().f[11]++;
          cov_wof0t1ycq().s[25]++;
          _context7.n = 1;
          return prisma.feedItemTag.findMany({
            where: {
              tagId: tagId
            },
            select: {
              feedItemId: true
            },
            take: 100 // Sample recent items
          });
        case 1:
          feedItemsWithTag = _context7.v;
          feedItemIds = (cov_wof0t1ycq().s[26]++, feedItemsWithTag.map(function (fit) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[12]++;
            cov_wof0t1ycq().s[27]++;
            return fit.feedItemId;
          })); // Find other tags on these feed items
          cov_wof0t1ycq().s[28]++;
          _context7.n = 2;
          return prisma.feedItemTag.groupBy({
            by: ["tagId"],
            where: {
              feedItemId: {
                /* istanbul ignore next */
                "in": feedItemIds
              },
              tagId: {
                not: tagId
              } // Exclude the original tag
            },
            _count: true,
            orderBy: {
              _count: {
                tagId: "desc"
              }
            },
            take: limit
          });
        case 2:
          relatedTagUsage = _context7.v;
          // Get tag details
          relatedTagIds = (cov_wof0t1ycq().s[29]++, relatedTagUsage.map(function (u) {
            /* istanbul ignore next */
            cov_wof0t1ycq().f[13]++;
            cov_wof0t1ycq().s[30]++;
            return u.tagId;
          }));
          cov_wof0t1ycq().s[31]++;
          _context7.n = 3;
          return prisma.tag.findMany({
            where: {
              id: {
                /* istanbul ignore next */
                "in": relatedTagIds
              }
            }
          });
        case 3:
          return _context7.a(2, _context7.v);
      }
    }, _callee7);
  }));
  return _getRelatedTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function mergeTags(_x8, _x9) {
  return _mergeTags.apply(this, arguments);
}

/**
 * Clean up unused tags
 */
/* istanbul ignore next */
function _mergeTags() {
  _mergeTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee9(sourceTagId, targetTagId)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context9) {
      while (1) switch (_context9.n) {
        case 0:
          cov_wof0t1ycq().f[14]++;
          cov_wof0t1ycq().s[32]++;
          _context9.n = 1;
          return prisma.$transaction(
          /* istanbul ignore next */
          /*#__PURE__*/function () {
            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
            /* istanbul ignore next */
            _callee8(tx)
            /* istanbul ignore next */
            {
              var _ref4, _ref5, sourceTag, targetTag;
              return _regenerator().w(function (_context8) {
                while (1) switch (_context8.n) {
                  case 0:
                    cov_wof0t1ycq().f[15]++;
                    cov_wof0t1ycq().s[33]++;
                    _context8.n = 1;
                    return Promise.all([tx.tag.findUnique({
                      where: {
                        id: sourceTagId
                      }
                    }), tx.tag.findUnique({
                      where: {
                        id: targetTagId
                      }
                    })]);
                  case 1:
                    _ref4 = _context8.v;
                    _ref5 = _slicedToArray(_ref4, 2);
                    sourceTag = _ref5[0];
                    targetTag = _ref5[1];
                    cov_wof0t1ycq().s[34]++;
                    if (!(
                    /* istanbul ignore next */
                    (cov_wof0t1ycq().b[13][0]++, !sourceTag) ||
                    /* istanbul ignore next */
                    (cov_wof0t1ycq().b[13][1]++, !targetTag))) {
                      _context8.n = 2;
                      break;
                    }
                    cov_wof0t1ycq().b[12][0]++;
                    cov_wof0t1ycq().s[35]++;
                    throw new Error("One or both tags not found");
                  case 2:
                    cov_wof0t1ycq().b[12][1]++;
                  case 3:
                    cov_wof0t1ycq().s[36]++;
                    _context8.n = 4;
                    return tx.feedItemTag.updateMany({
                      where: {
                        tagId: sourceTagId
                      },
                      data: {
                        tagId: targetTagId
                      }
                    });
                  case 4:
                    cov_wof0t1ycq().s[37]++;
                    _context8.n = 5;
                    return tx.briefingTag.updateMany({
                      where: {
                        tagId: sourceTagId
                      },
                      data: {
                        tagId: targetTagId
                      }
                    });
                  case 5:
                    cov_wof0t1ycq().s[38]++;
                    _context8.n = 6;
                    return tx.tag.update({
                      where: {
                        id: targetTagId
                      },
                      data: {
                        usageCount: {
                          increment: sourceTag.usageCount
                        }
                      }
                    });
                  case 6:
                    cov_wof0t1ycq().s[39]++;
                    _context8.n = 7;
                    return tx.tag[
                    /* istanbul ignore next */
                    "delete"]({
                      where: {
                        id: sourceTagId
                      }
                    });
                  case 7:
                    return _context8.a(2);
                }
              }, _callee8);
            }));
            return function (_x0) {
              return _ref3.apply(this, arguments);
            };
          }());
        case 1:
          return _context9.a(2);
      }
    }, _callee9);
  }));
  return _mergeTags.apply(this, arguments);
}
export
/* istanbul ignore next */
function cleanupUnusedTags() {
  return _cleanupUnusedTags.apply(this, arguments);
}
/* istanbul ignore next */
function _cleanupUnusedTags() {
  _cleanupUnusedTags = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee0()
  /* istanbul ignore next */
  {
    var unusedTags, result;
    return _regenerator().w(function (_context0) {
      while (1) switch (_context0.n) {
        case 0:
          cov_wof0t1ycq().f[16]++;
          cov_wof0t1ycq().s[40]++;
          _context0.n = 1;
          return prisma.tag.findMany({
            where: {
              AND: [{
                feedItems: {
                  none: {}
                }
              }, {
                briefings: {
                  none: {}
                }
              }, {
                usageCount: 0
              }]
            },
            select: {
              id: true
            }
          });
        case 1:
          unusedTags = _context0.v;
          cov_wof0t1ycq().s[41]++;
          if (!(unusedTags.length === 0)) {
            _context0.n = 2;
            break;
          }
          cov_wof0t1ycq().b[14][0]++;
          cov_wof0t1ycq().s[42]++;
          return _context0.a(2, 0);
        case 2:
          cov_wof0t1ycq().b[14][1]++;
        case 3:
          cov_wof0t1ycq().s[43]++;
          _context0.n = 4;
          return prisma.tag.deleteMany({
            where: {
              id: {
                /* istanbul ignore next */
                "in": unusedTags.map(function (t) {
                  /* istanbul ignore next */
                  cov_wof0t1ycq().f[17]++;
                  cov_wof0t1ycq().s[44]++;
                  return t.id;
                })
              }
            }
          });
        case 4:
          result = _context0.v;
          cov_wof0t1ycq().s[45]++;
          return _context0.a(2, result.count);
      }
    }, _callee0);
  }));
  return _cleanupUnusedTags.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfd29mMHQxeWNxIiwiYWN0dWFsQ292ZXJhZ2UiLCJfc2xpY2VkVG9BcnJheSIsInIiLCJlIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsImEiLCJfYXJyYXlMaWtlVG9BcnJheSIsInQiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW5ndGgiLCJuIiwibCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaSIsInUiLCJmIiwibyIsIm5leHQiLCJPYmplY3QiLCJkb25lIiwicHVzaCIsInZhbHVlIiwiaXNBcnJheSIsIm93bktleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIk51bWJlciIsIl9yZWdlbmVyYXRvciIsInRvU3RyaW5nVGFnIiwiYyIsInByb3RvdHlwZSIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIl9yZWdlbmVyYXRvckRlZmluZTIiLCJwIiwieSIsIkciLCJ2IiwiZCIsImJpbmQiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRpc3BsYXlOYW1lIiwidyIsIm0iLCJfcmVnZW5lcmF0b3JEZWZpbmUiLCJfaW52b2tlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfbmV4dCIsIl90aHJvdyIsInByaXNtYSIsImZpbmRPckNyZWF0ZVRhZyIsIl94IiwiX2ZpbmRPckNyZWF0ZVRhZyIsIl9jYWxsZWUiLCJkYXRhIiwibm9ybWFsaXplZE5hbWUiLCJleGlzdGluZyIsIl9jb250ZXh0IiwicyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsInRhZyIsImZpbmRGaXJzdCIsIndoZXJlIiwidHlwZSIsImIiLCJ1cGRhdGUiLCJpZCIsInVzYWdlQ291bnQiLCJpbmNyZW1lbnQiLCJsYXN0VXNlZEF0IiwiRGF0ZSIsImxlYWd1ZSIsImNvdW50cnkiLCJwb3NpdGlvbiIsInRyYW5zZmVyVmFsdWUiLCJmaW5kT3JDcmVhdGVUYWdzIiwiX3gyIiwiX2ZpbmRPckNyZWF0ZVRhZ3MiLCJfY2FsbGVlMiIsInRhZ3MiLCJfY29udGV4dDIiLCJhbGwiLCJtYXAiLCJnZXRQb3B1bGFyVGFncyIsIl94MyIsIl9nZXRQb3B1bGFyVGFncyIsIl9jYWxsZWUzIiwib3B0aW9ucyIsIl9yZWYiLCJfcmVmJGxpbWl0IiwibGltaXQiLCJzaW5jZSIsIl9jb250ZXh0MyIsImZpbmRNYW55IiwiZ3RlIiwiaXNQb3B1bGFyIiwib3JkZXJCeSIsInRha2UiLCJnZXRUcmVuZGluZ1RhZ3MiLCJfeDQiLCJfZ2V0VHJlbmRpbmdUYWdzIiwiX2NhbGxlZTQiLCJyZWNlbnRVc2FnZSIsInRhZ0lkcyIsInRhZ01hcCIsIl9hcmdzNCIsIl9jb250ZXh0NCIsInVuZGVmaW5lZCIsImZlZWRJdGVtVGFnIiwiZ3JvdXBCeSIsImJ5IiwiY3JlYXRlZEF0IiwiX2NvdW50IiwidGFnSWQiLCJmcm9tRW50cmllcyIsInVzYWdlIiwic2VhcmNoVGFncyIsIl94NSIsIl94NiIsIl9zZWFyY2hUYWdzIiwiX2NhbGxlZTUiLCJxdWVyeSIsIl9yZWYyIiwiX3JlZjIkbGltaXQiLCJub3JtYWxpemVkUXVlcnkiLCJfY29udGV4dDUiLCJjb250YWlucyIsInVwZGF0ZVRhZ1BvcHVsYXJpdHkiLCJfdXBkYXRlVGFnUG9wdWxhcml0eSIsIl9jYWxsZWU2IiwidGhyZXNob2xkIiwicmVzdWx0IiwiX2FyZ3M2IiwiX2NvbnRleHQ2IiwidXBkYXRlTWFueSIsImx0IiwiY291bnQiLCJnZXRSZWxhdGVkVGFncyIsIl94NyIsIl9nZXRSZWxhdGVkVGFncyIsIl9jYWxsZWU3IiwiZmVlZEl0ZW1zV2l0aFRhZyIsImZlZWRJdGVtSWRzIiwicmVsYXRlZFRhZ1VzYWdlIiwicmVsYXRlZFRhZ0lkcyIsIl9hcmdzNyIsIl9jb250ZXh0NyIsInNlbGVjdCIsImZlZWRJdGVtSWQiLCJmaXQiLCJub3QiLCJtZXJnZVRhZ3MiLCJfeDgiLCJfeDkiLCJfbWVyZ2VUYWdzIiwiX2NhbGxlZTkiLCJzb3VyY2VUYWdJZCIsInRhcmdldFRhZ0lkIiwiX2NvbnRleHQ5IiwiJHRyYW5zYWN0aW9uIiwiX3JlZjMiLCJfY2FsbGVlOCIsInR4IiwiX3JlZjQiLCJfcmVmNSIsInNvdXJjZVRhZyIsInRhcmdldFRhZyIsIl9jb250ZXh0OCIsImZpbmRVbmlxdWUiLCJFcnJvciIsImJyaWVmaW5nVGFnIiwiX3gwIiwiY2xlYW51cFVudXNlZFRhZ3MiLCJfY2xlYW51cFVudXNlZFRhZ3MiLCJfY2FsbGVlMCIsInVudXNlZFRhZ3MiLCJfY29udGV4dDAiLCJBTkQiLCJmZWVkSXRlbXMiLCJub25lIiwiYnJpZWZpbmdzIiwiZGVsZXRlTWFueSJdLCJzb3VyY2VzIjpbInRhZ3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUYWcgRGF0YSBBY2Nlc3MgTGF5ZXJcbiAqIERhdGFiYXNlIG9wZXJhdGlvbnMgZm9yIHRhZyBtYW5hZ2VtZW50XG4gKi9cblxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIkAvbGliL3ByaXNtYVwiO1xuaW1wb3J0IHR5cGUgeyBUYWcsIFRhZ1R5cGUsIExlYWd1ZSB9IGZyb20gXCJAcHJpc21hL2NsaWVudFwiO1xuXG4vKipcbiAqIEZpbmQgb3IgY3JlYXRlIHRhZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmluZE9yQ3JlYXRlVGFnKGRhdGE6IHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBUYWdUeXBlO1xuICBsZWFndWU/OiBMZWFndWU7XG4gIGNvdW50cnk/OiBzdHJpbmc7XG4gIHBvc2l0aW9uPzogc3RyaW5nO1xuICB0cmFuc2ZlclZhbHVlPzogYmlnaW50O1xufSk6IFByb21pc2U8VGFnPiB7XG4gIGNvbnN0IG5vcm1hbGl6ZWROYW1lID0gZGF0YS5uYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCBcIi1cIik7XG5cbiAgLy8gVHJ5IHRvIGZpbmQgZXhpc3RpbmcgdGFnXG4gIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgcHJpc21hLnRhZy5maW5kRmlyc3Qoe1xuICAgIHdoZXJlOiB7XG4gICAgICBub3JtYWxpemVkTmFtZSxcbiAgICAgIHR5cGU6IGRhdGEudHlwZSxcbiAgICB9LFxuICB9KTtcblxuICBpZiAoZXhpc3RpbmcpIHtcbiAgICAvLyBVcGRhdGUgdXNhZ2UgY291bnRcbiAgICBhd2FpdCBwcmlzbWEudGFnLnVwZGF0ZSh7XG4gICAgICB3aGVyZTogeyBpZDogZXhpc3RpbmcuaWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXNhZ2VDb3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcbiAgICAgICAgbGFzdFVzZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGV4aXN0aW5nO1xuICB9XG5cbiAgLy8gQ3JlYXRlIG5ldyB0YWdcbiAgcmV0dXJuIGF3YWl0IHByaXNtYS50YWcuY3JlYXRlKHtcbiAgICBkYXRhOiB7XG4gICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICB0eXBlOiBkYXRhLnR5cGUsXG4gICAgICBub3JtYWxpemVkTmFtZSxcbiAgICAgIGxlYWd1ZTogZGF0YS5sZWFndWUsXG4gICAgICBjb3VudHJ5OiBkYXRhLmNvdW50cnksXG4gICAgICBwb3NpdGlvbjogZGF0YS5wb3NpdGlvbixcbiAgICAgIHRyYW5zZmVyVmFsdWU6IGRhdGEudHJhbnNmZXJWYWx1ZSxcbiAgICAgIHVzYWdlQ291bnQ6IDEsXG4gICAgICBsYXN0VXNlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIEZpbmQgb3IgY3JlYXRlIG11bHRpcGxlIHRhZ3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRPckNyZWF0ZVRhZ3MoXG4gIHRhZ3M6IEFycmF5PHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHlwZTogVGFnVHlwZTtcbiAgICBsZWFndWU/OiBMZWFndWU7XG4gICAgY291bnRyeT86IHN0cmluZztcbiAgICBwb3NpdGlvbj86IHN0cmluZztcbiAgfT5cbik6IFByb21pc2U8VGFnW10+IHtcbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHRhZ3MubWFwKCh0YWcpID0+IGZpbmRPckNyZWF0ZVRhZyh0YWcpKSk7XG59XG5cbi8qKlxuICogR2V0IHBvcHVsYXIgdGFnc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UG9wdWxhclRhZ3Mob3B0aW9ucz86IHtcbiAgdHlwZT86IFRhZ1R5cGU7XG4gIGxlYWd1ZT86IExlYWd1ZTtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIHNpbmNlPzogRGF0ZTtcbn0pOiBQcm9taXNlPFRhZ1tdPiB7XG4gIGNvbnN0IHsgdHlwZSwgbGVhZ3VlLCBsaW1pdCA9IDIwLCBzaW5jZSB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICByZXR1cm4gYXdhaXQgcHJpc21hLnRhZy5maW5kTWFueSh7XG4gICAgd2hlcmU6IHtcbiAgICAgIC4uLih0eXBlICYmIHsgdHlwZSB9KSxcbiAgICAgIC4uLihsZWFndWUgJiYgeyBsZWFndWUgfSksXG4gICAgICAuLi4oc2luY2UgJiYgeyBsYXN0VXNlZEF0OiB7IGd0ZTogc2luY2UgfSB9KSxcbiAgICAgIGlzUG9wdWxhcjogdHJ1ZSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgdXNhZ2VDb3VudDogXCJkZXNjXCIgfSxcbiAgICB0YWtlOiBsaW1pdCxcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRyZW5kaW5nIHRhZ3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyZW5kaW5nVGFncyhcbiAgc2luY2U6IERhdGUsXG4gIGxpbWl0ID0gMTBcbik6IFByb21pc2U8KFRhZyAmIHsgcmVjZW50VXNhZ2U6IG51bWJlciB9KVtdPiB7XG4gIC8vIEdldCByZWNlbnQgdGFnIHVzYWdlXG4gIGNvbnN0IHJlY2VudFVzYWdlID0gYXdhaXQgcHJpc21hLmZlZWRJdGVtVGFnLmdyb3VwQnkoe1xuICAgIGJ5OiBbXCJ0YWdJZFwiXSxcbiAgICB3aGVyZToge1xuICAgICAgY3JlYXRlZEF0OiB7IGd0ZTogc2luY2UgfSxcbiAgICB9LFxuICAgIF9jb3VudDogdHJ1ZSxcbiAgICBvcmRlckJ5OiB7XG4gICAgICBfY291bnQ6IHtcbiAgICAgICAgdGFnSWQ6IFwiZGVzY1wiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHRha2U6IGxpbWl0LFxuICB9KTtcblxuICAvLyBHZXQgdGFnIGRldGFpbHNcbiAgY29uc3QgdGFnSWRzID0gcmVjZW50VXNhZ2UubWFwKCh1KSA9PiB1LnRhZ0lkKTtcbiAgY29uc3QgdGFncyA9IGF3YWl0IHByaXNtYS50YWcuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IGlkOiB7IGluOiB0YWdJZHMgfSB9LFxuICB9KTtcblxuICAvLyBDb21iaW5lIHdpdGggdXNhZ2UgY291bnRzXG4gIGNvbnN0IHRhZ01hcCA9IE9iamVjdC5mcm9tRW50cmllcyh0YWdzLm1hcCgodCkgPT4gW3QuaWQsIHRdKSk7XG5cbiAgcmV0dXJuIHJlY2VudFVzYWdlXG4gICAgLm1hcCgodXNhZ2UpID0+ICh7XG4gICAgICAuLi50YWdNYXBbdXNhZ2UudGFnSWRdLFxuICAgICAgcmVjZW50VXNhZ2U6IHVzYWdlLl9jb3VudCxcbiAgICB9KSlcbiAgICAuZmlsdGVyKCh0KSA9PiB0LmlkKTsgLy8gRmlsdGVyIG91dCBhbnkgbWlzc2luZyB0YWdzXG59XG5cbi8qKlxuICogU2VhcmNoIHRhZ3MgYnkgbmFtZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoVGFncyhcbiAgcXVlcnk6IHN0cmluZyxcbiAgb3B0aW9ucz86IHtcbiAgICB0eXBlPzogVGFnVHlwZTtcbiAgICBsaW1pdD86IG51bWJlcjtcbiAgfVxuKTogUHJvbWlzZTxUYWdbXT4ge1xuICBjb25zdCB7IHR5cGUsIGxpbWl0ID0gMTAgfSA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IG5vcm1hbGl6ZWRRdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCBcIi1cIik7XG5cbiAgcmV0dXJuIGF3YWl0IHByaXNtYS50YWcuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7XG4gICAgICBub3JtYWxpemVkTmFtZToge1xuICAgICAgICBjb250YWluczogbm9ybWFsaXplZFF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIC4uLih0eXBlICYmIHsgdHlwZSB9KSxcbiAgICB9LFxuICAgIG9yZGVyQnk6IHsgdXNhZ2VDb3VudDogXCJkZXNjXCIgfSxcbiAgICB0YWtlOiBsaW1pdCxcbiAgfSk7XG59XG5cbi8qKlxuICogVXBkYXRlIHRhZyBwb3B1bGFyaXR5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVUYWdQb3B1bGFyaXR5KHRocmVzaG9sZCA9IDEwMCk6IFByb21pc2U8bnVtYmVyPiB7XG4gIC8vIE1hcmsgdGFncyBhcyBwb3B1bGFyIGlmIHRoZXkgZXhjZWVkIHVzYWdlIHRocmVzaG9sZFxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmlzbWEudGFnLnVwZGF0ZU1hbnkoe1xuICAgIHdoZXJlOiB7XG4gICAgICB1c2FnZUNvdW50OiB7IGd0ZTogdGhyZXNob2xkIH0sXG4gICAgICBpc1BvcHVsYXI6IGZhbHNlLFxuICAgIH0sXG4gICAgZGF0YToge1xuICAgICAgaXNQb3B1bGFyOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFVubWFyayB0YWdzIHRoYXQgZmVsbCBiZWxvdyB0aHJlc2hvbGRcbiAgYXdhaXQgcHJpc21hLnRhZy51cGRhdGVNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgdXNhZ2VDb3VudDogeyBsdDogdGhyZXNob2xkIH0sXG4gICAgICBpc1BvcHVsYXI6IHRydWUsXG4gICAgfSxcbiAgICBkYXRhOiB7XG4gICAgICBpc1BvcHVsYXI6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuY291bnQ7XG59XG5cbi8qKlxuICogR2V0IHJlbGF0ZWQgdGFnc1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVsYXRlZFRhZ3ModGFnSWQ6IHN0cmluZywgbGltaXQgPSA1KTogUHJvbWlzZTxUYWdbXT4ge1xuICAvLyBGaW5kIGZlZWQgaXRlbXMgdGhhdCBoYXZlIHRoaXMgdGFnXG4gIGNvbnN0IGZlZWRJdGVtc1dpdGhUYWcgPSBhd2FpdCBwcmlzbWEuZmVlZEl0ZW1UYWcuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IHRhZ0lkIH0sXG4gICAgc2VsZWN0OiB7IGZlZWRJdGVtSWQ6IHRydWUgfSxcbiAgICB0YWtlOiAxMDAsIC8vIFNhbXBsZSByZWNlbnQgaXRlbXNcbiAgfSk7XG5cbiAgY29uc3QgZmVlZEl0ZW1JZHMgPSBmZWVkSXRlbXNXaXRoVGFnLm1hcCgoZml0KSA9PiBmaXQuZmVlZEl0ZW1JZCk7XG5cbiAgLy8gRmluZCBvdGhlciB0YWdzIG9uIHRoZXNlIGZlZWQgaXRlbXNcbiAgY29uc3QgcmVsYXRlZFRhZ1VzYWdlID0gYXdhaXQgcHJpc21hLmZlZWRJdGVtVGFnLmdyb3VwQnkoe1xuICAgIGJ5OiBbXCJ0YWdJZFwiXSxcbiAgICB3aGVyZToge1xuICAgICAgZmVlZEl0ZW1JZDogeyBpbjogZmVlZEl0ZW1JZHMgfSxcbiAgICAgIHRhZ0lkOiB7IG5vdDogdGFnSWQgfSwgLy8gRXhjbHVkZSB0aGUgb3JpZ2luYWwgdGFnXG4gICAgfSxcbiAgICBfY291bnQ6IHRydWUsXG4gICAgb3JkZXJCeToge1xuICAgICAgX2NvdW50OiB7XG4gICAgICAgIHRhZ0lkOiBcImRlc2NcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICB0YWtlOiBsaW1pdCxcbiAgfSk7XG5cbiAgLy8gR2V0IHRhZyBkZXRhaWxzXG4gIGNvbnN0IHJlbGF0ZWRUYWdJZHMgPSByZWxhdGVkVGFnVXNhZ2UubWFwKCh1KSA9PiB1LnRhZ0lkKTtcbiAgcmV0dXJuIGF3YWl0IHByaXNtYS50YWcuZmluZE1hbnkoe1xuICAgIHdoZXJlOiB7IGlkOiB7IGluOiByZWxhdGVkVGFnSWRzIH0gfSxcbiAgfSk7XG59XG5cbi8qKlxuICogTWVyZ2UgZHVwbGljYXRlIHRhZ3NcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1lcmdlVGFncyhcbiAgc291cmNlVGFnSWQ6IHN0cmluZyxcbiAgdGFyZ2V0VGFnSWQ6IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oYXN5bmMgKHR4KSA9PiB7XG4gICAgLy8gR2V0IGJvdGggdGFnc1xuICAgIGNvbnN0IFtzb3VyY2VUYWcsIHRhcmdldFRhZ10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0eC50YWcuZmluZFVuaXF1ZSh7IHdoZXJlOiB7IGlkOiBzb3VyY2VUYWdJZCB9IH0pLFxuICAgICAgdHgudGFnLmZpbmRVbmlxdWUoeyB3aGVyZTogeyBpZDogdGFyZ2V0VGFnSWQgfSB9KSxcbiAgICBdKTtcblxuICAgIGlmICghc291cmNlVGFnIHx8ICF0YXJnZXRUYWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk9uZSBvciBib3RoIHRhZ3Mgbm90IGZvdW5kXCIpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBhbGwgZmVlZCBpdGVtIHRhZ3NcbiAgICBhd2FpdCB0eC5mZWVkSXRlbVRhZy51cGRhdGVNYW55KHtcbiAgICAgIHdoZXJlOiB7IHRhZ0lkOiBzb3VyY2VUYWdJZCB9LFxuICAgICAgZGF0YTogeyB0YWdJZDogdGFyZ2V0VGFnSWQgfSxcbiAgICB9KTtcblxuICAgIC8vIFVwZGF0ZSBhbGwgYnJpZWZpbmcgdGFnc1xuICAgIGF3YWl0IHR4LmJyaWVmaW5nVGFnLnVwZGF0ZU1hbnkoe1xuICAgICAgd2hlcmU6IHsgdGFnSWQ6IHNvdXJjZVRhZ0lkIH0sXG4gICAgICBkYXRhOiB7IHRhZ0lkOiB0YXJnZXRUYWdJZCB9LFxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIHRhcmdldCB0YWcgdXNhZ2UgY291bnRcbiAgICBhd2FpdCB0eC50YWcudXBkYXRlKHtcbiAgICAgIHdoZXJlOiB7IGlkOiB0YXJnZXRUYWdJZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2FnZUNvdW50OiB7IGluY3JlbWVudDogc291cmNlVGFnLnVzYWdlQ291bnQgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBEZWxldGUgc291cmNlIHRhZ1xuICAgIGF3YWl0IHR4LnRhZy5kZWxldGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHNvdXJjZVRhZ0lkIH0sXG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENsZWFuIHVwIHVudXNlZCB0YWdzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwVW51c2VkVGFncygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAvLyBGaW5kIHRhZ3Mgd2l0aCBubyBhc3NvY2lhdGVkIGZlZWQgaXRlbXMgb3IgYnJpZWZpbmdzXG4gIGNvbnN0IHVudXNlZFRhZ3MgPSBhd2FpdCBwcmlzbWEudGFnLmZpbmRNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgQU5EOiBbXG4gICAgICAgIHsgZmVlZEl0ZW1zOiB7IG5vbmU6IHt9IH0gfSxcbiAgICAgICAgeyBicmllZmluZ3M6IHsgbm9uZToge30gfSB9LFxuICAgICAgICB7IHVzYWdlQ291bnQ6IDAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBzZWxlY3Q6IHsgaWQ6IHRydWUgfSxcbiAgfSk7XG5cbiAgaWYgKHVudXNlZFRhZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcblxuICAvLyBEZWxldGUgdW51c2VkIHRhZ3NcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJpc21hLnRhZy5kZWxldGVNYW55KHtcbiAgICB3aGVyZToge1xuICAgICAgaWQ6IHsgaW46IHVudXNlZFRhZ3MubWFwKCh0KSA9PiB0LmlkKSB9LFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQuY291bnQ7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlWTtJQUFBQSxhQUFBLFlBQUFB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