8c51bfa243c3a25e8a4e0ebdcf4a99e0
/* istanbul ignore next */
function cov_1s501iumw5() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/utils/slug.ts";
  var hash = "fb10f6c07d10fce360108f4e42d15285667f8d32";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/utils/slug.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 18
        },
        end: {
          line: 15,
          column: 22
        }
      },
      "1": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 22,
          column: 17
        }
      },
      "2": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 35
        }
      },
      "3": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "4": {
        start: {
          line: 33,
          column: 18
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "5": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "6": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 28
        }
      },
      "7": {
        start: {
          line: 36,
          column: 40
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "8": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 62
        }
      },
      "9": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 16
        }
      },
      "10": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 59
        }
      }
    },
    fnMap: {
      "0": {
        name: "generateSlug",
        decl: {
          start: {
            line: 9,
            column: 16
          },
          end: {
            line: 9,
            column: 28
          }
        },
        loc: {
          start: {
            line: 9,
            column: 69
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 9
      },
      "1": {
        name: "getTimestampFromSlug",
        decl: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 36
          }
        },
        loc: {
          start: {
            line: 30,
            column: 64
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "isValidSlug",
        decl: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 27
          }
        },
        loc: {
          start: {
            line: 46,
            column: 51
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 46
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fb10f6c07d10fce360108f4e42d15285667f8d32"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s501iumw5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s501iumw5();
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/**
 * Slug Generation Utilities
 * URL-friendly slug creation for briefings
 */

/**
 * Generate URL-friendly slug from title and timestamp
 */
export function generateSlug(title, timestamp) {
  /* istanbul ignore next */
  cov_1s501iumw5().f[0]++;
  // Format date as YYYY-MM-DD-HH
  var dateStr =
  /* istanbul ignore next */
  (cov_1s501iumw5().s[0]++, timestamp.toISOString().slice(0, 13).replace("T", "-").replace(/:/g, ""));

  // Create slug from title
  var titleSlug =
  /* istanbul ignore next */
  (cov_1s501iumw5().s[1]++, title.toLowerCase().replace(/[^a-z0-9]+/g, "-").replace(/^-+|-+$/g, "").slice(0, 50)); // Limit length
  /* istanbul ignore next */
  cov_1s501iumw5().s[2]++;
  return /* istanbul ignore next */"".concat(dateStr, "-").concat(titleSlug);
}

/**
 * Extract timestamp from slug
 */
export function getTimestampFromSlug(slug) {
  /* istanbul ignore next */
  cov_1s501iumw5().f[1]++;
  cov_1s501iumw5().s[3]++;
  try {
    // Extract date part (YYYY-MM-DD-HH)
    var match =
    /* istanbul ignore next */
    (cov_1s501iumw5().s[4]++, slug.match(/^(\d{4})-(\d{2})-(\d{2})-(\d{2})/));
    /* istanbul ignore next */
    cov_1s501iumw5().s[5]++;
    if (!match) {
      /* istanbul ignore next */
      cov_1s501iumw5().b[0][0]++;
      cov_1s501iumw5().s[6]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1s501iumw5().b[0][1]++;
    }
    var
      /* istanbul ignore next */
      _ref = (cov_1s501iumw5().s[7]++, match),
      /* istanbul ignore next */
      _ref2 = _slicedToArray(_ref, 5),
      /* istanbul ignore next */
      _ = _ref2[0],
      /* istanbul ignore next */
      year = _ref2[1],
      /* istanbul ignore next */
      month = _ref2[2],
      /* istanbul ignore next */
      day = _ref2[3],
      /* istanbul ignore next */
      hour = _ref2[4];
    /* istanbul ignore next */
    cov_1s501iumw5().s[8]++;
    return new Date(
    /* istanbul ignore next */
    "".concat(year, "-").concat(month, "-").concat(day, "T").concat(hour, ":00:00Z"));
  } catch (
  /* istanbul ignore next */
  _unused) {
    /* istanbul ignore next */
    cov_1s501iumw5().s[9]++;
    return null;
  }
}

/**
 * Validate slug format
 */
export function isValidSlug(slug) {
  /* istanbul ignore next */
  cov_1s501iumw5().f[2]++;
  cov_1s501iumw5().s[10]++;
  return /^\d{4}-\d{2}-\d{2}-\d{2}-[a-z0-9-]+$/.test(slug);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXM1MDFpdW13NSIsImFjdHVhbENvdmVyYWdlIiwiX3NsaWNlZFRvQXJyYXkiLCJyIiwiZSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJhIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0IiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuZ3RoIiwibiIsImwiLCJTeW1ib2wiLCJpdGVyYXRvciIsImkiLCJ1IiwiZiIsIm8iLCJuZXh0IiwiT2JqZWN0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImlzQXJyYXkiLCJnZW5lcmF0ZVNsdWciLCJ0aXRsZSIsInRpbWVzdGFtcCIsImRhdGVTdHIiLCJzIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwidGl0bGVTbHVnIiwidG9Mb3dlckNhc2UiLCJjb25jYXQiLCJnZXRUaW1lc3RhbXBGcm9tU2x1ZyIsInNsdWciLCJtYXRjaCIsImIiLCJfcmVmIiwiX3JlZjIiLCJfIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIkRhdGUiLCJfdW51c2VkIiwiaXNWYWxpZFNsdWciXSwic291cmNlcyI6WyJzbHVnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2x1ZyBHZW5lcmF0aW9uIFV0aWxpdGllc1xuICogVVJMLWZyaWVuZGx5IHNsdWcgY3JlYXRpb24gZm9yIGJyaWVmaW5nc1xuICovXG5cbi8qKlxuICogR2VuZXJhdGUgVVJMLWZyaWVuZGx5IHNsdWcgZnJvbSB0aXRsZSBhbmQgdGltZXN0YW1wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVNsdWcodGl0bGU6IHN0cmluZywgdGltZXN0YW1wOiBEYXRlKTogc3RyaW5nIHtcbiAgLy8gRm9ybWF0IGRhdGUgYXMgWVlZWS1NTS1ERC1ISFxuICBjb25zdCBkYXRlU3RyID0gdGltZXN0YW1wXG4gICAgLnRvSVNPU3RyaW5nKClcbiAgICAuc2xpY2UoMCwgMTMpXG4gICAgLnJlcGxhY2UoXCJUXCIsIFwiLVwiKVxuICAgIC5yZXBsYWNlKC86L2csIFwiXCIpO1xuXG4gIC8vIENyZWF0ZSBzbHVnIGZyb20gdGl0bGVcbiAgY29uc3QgdGl0bGVTbHVnID0gdGl0bGVcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9bXmEtejAtOV0rL2csIFwiLVwiKVxuICAgIC5yZXBsYWNlKC9eLSt8LSskL2csIFwiXCIpXG4gICAgLnNsaWNlKDAsIDUwKTsgLy8gTGltaXQgbGVuZ3RoXG5cbiAgcmV0dXJuIGAke2RhdGVTdHJ9LSR7dGl0bGVTbHVnfWA7XG59XG5cbi8qKlxuICogRXh0cmFjdCB0aW1lc3RhbXAgZnJvbSBzbHVnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lc3RhbXBGcm9tU2x1ZyhzbHVnOiBzdHJpbmcpOiBEYXRlIHwgbnVsbCB7XG4gIHRyeSB7XG4gICAgLy8gRXh0cmFjdCBkYXRlIHBhcnQgKFlZWVktTU0tREQtSEgpXG4gICAgY29uc3QgbWF0Y2ggPSBzbHVnLm1hdGNoKC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSktKFxcZHsyfSkvKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IFtfLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyXSA9IG1hdGNoO1xuICAgIHJldHVybiBuZXcgRGF0ZShgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1UJHtob3VyfTowMDowMFpgKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBzbHVnIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFNsdWcoc2x1Zzogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9LVxc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