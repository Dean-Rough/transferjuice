{"version":3,"names":["_globalSources","require","_typeof","o","Symbol","iterator","constructor","prototype","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","name","Array","from","test","isArray","length","e","n","describe","it","expect","ALL_ITK_SOURCES","toBeGreaterThanOrEqual","console","log","concat","TIER_1_SOURCES","TIER_2_SOURCES","TIER_2_ADDITIONAL","TIER_3_SOURCES","activeSources","getActiveSources","toBe","tier1","getSourcesByTier","tier2","tier3","regions","Set","map","s","region","toContain","join","ukSources","getSourcesByRegion","esSources","itSources","frSources","deSources","globalSources","leagueCoverage","reduce","acc","source","leagues","forEach","league","languages","language","enSources","getSourcesByLanguage","ptSources","tier1Reliability","every","reliability","tier2Reliability","tier3Reliability","avgReliability","sum","toBeGreaterThan","toFixed","prioritySources","getMonitoringPriority","firstFew","tier","i","current","next","toBeLessThan","index","id","toBeTruthy","handle","toMatch","toBeLessThanOrEqual","specialties","isActive","ids","handles","size","validLeagues","sourceNames","toLowerCase","stats","totalSources","flatMap"],"sources":["globalSources.test.ts"],"sourcesContent":["/**\n * Global ITK Sources Tests\n * Validates that we have 20+ sources covering 5 major leagues\n */\n\nimport {\n  ALL_ITK_SOURCES,\n  TIER_1_SOURCES,\n  TIER_2_SOURCES,\n  TIER_2_ADDITIONAL,\n  TIER_3_SOURCES,\n  getSourcesByRegion,\n  getSourcesByTier,\n  getSourcesByLanguage,\n  getActiveSources,\n  getMonitoringPriority,\n  type ITKSource,\n} from '../globalSources';\n\ndescribe('Global ITK Sources Configuration', () => {\n  describe('Source Count Requirements', () => {\n    it('should have 20+ global ITK sources', () => {\n      expect(ALL_ITK_SOURCES.length).toBeGreaterThanOrEqual(20);\n      \n      console.log(`Total ITK Sources: ${ALL_ITK_SOURCES.length}`);\n      console.log(`Breakdown:`);\n      console.log(`  Tier 1: ${TIER_1_SOURCES.length} sources`);\n      console.log(`  Tier 2: ${TIER_2_SOURCES.length} sources`);\n      console.log(`  Tier 2 Additional: ${TIER_2_ADDITIONAL.length} sources`);\n      console.log(`  Tier 3: ${TIER_3_SOURCES.length} sources`);\n    });\n\n    it('should have all sources active by default', () => {\n      const activeSources = getActiveSources();\n      expect(activeSources.length).toBe(ALL_ITK_SOURCES.length);\n      expect(activeSources.length).toBeGreaterThanOrEqual(20);\n    });\n\n    it('should have proper tier distribution', () => {\n      const tier1 = getSourcesByTier(1);\n      const tier2 = getSourcesByTier(2);\n      const tier3 = getSourcesByTier(3);\n\n      expect(tier1.length).toBeGreaterThanOrEqual(3); // Elite sources\n      expect(tier2.length).toBeGreaterThanOrEqual(5); // Trusted sources \n      expect(tier3.length).toBeGreaterThanOrEqual(8); // Regional sources\n\n      expect(tier1.length + tier2.length + tier3.length).toBe(ALL_ITK_SOURCES.length);\n    });\n  });\n\n  describe('Regional Coverage Requirements', () => {\n    it('should cover 5 major leagues regions', () => {\n      const regions = [...new Set(ALL_ITK_SOURCES.map(s => s.region))];\n      \n      // Should include major regions\n      expect(regions).toContain('UK'); // Premier League\n      expect(regions).toContain('ES'); // La Liga\n      expect(regions).toContain('IT'); // Serie A\n      expect(regions).toContain('FR'); // Ligue 1\n      expect(regions).toContain('DE'); // Bundesliga\n      expect(regions).toContain('BR'); // Brazilian sources\n      expect(regions).toContain('GLOBAL'); // Global sources\n\n      console.log(`Regions covered: ${regions.join(', ')}`);\n      console.log(`Total regions: ${regions.length}`);\n    });\n\n    it('should have sources for each major region', () => {\n      const ukSources = getSourcesByRegion('UK');\n      const esSources = getSourcesByRegion('ES');\n      const itSources = getSourcesByRegion('IT');\n      const frSources = getSourcesByRegion('FR');\n      const deSources = getSourcesByRegion('DE');\n      const globalSources = getSourcesByRegion('GLOBAL');\n\n      expect(ukSources.length).toBeGreaterThanOrEqual(2);\n      expect(esSources.length).toBeGreaterThanOrEqual(2);\n      expect(itSources.length).toBeGreaterThanOrEqual(2);\n      expect(frSources.length).toBeGreaterThanOrEqual(2);\n      expect(deSources.length).toBeGreaterThanOrEqual(2);\n      expect(globalSources.length).toBeGreaterThanOrEqual(2);\n\n      console.log(`Regional distribution:`);\n      console.log(`  UK: ${ukSources.length} sources`);\n      console.log(`  ES: ${esSources.length} sources`);\n      console.log(`  IT: ${itSources.length} sources`);\n      console.log(`  FR: ${frSources.length} sources`);\n      console.log(`  DE: ${deSources.length} sources`);\n      console.log(`  GLOBAL: ${globalSources.length} sources`);\n    });\n\n    it('should support major league coverage', () => {\n      const leagueCoverage = ALL_ITK_SOURCES.reduce((acc, source) => {\n        source.leagues.forEach(league => {\n          acc[league] = (acc[league] || 0) + 1;\n        });\n        return acc;\n      }, {} as Record<string, number>);\n\n      // Major leagues should have multiple sources\n      expect(leagueCoverage['PL']).toBeGreaterThanOrEqual(5);\n      expect(leagueCoverage['LaLiga']).toBeGreaterThanOrEqual(3);\n      expect(leagueCoverage['SerieA']).toBeGreaterThanOrEqual(3);\n      expect(leagueCoverage['Bundesliga']).toBeGreaterThanOrEqual(3);\n      expect(leagueCoverage['Ligue1']).toBeGreaterThanOrEqual(3);\n\n      console.log(`League coverage:`, leagueCoverage);\n    });\n  });\n\n  describe('Language Support Requirements', () => {\n    it('should support multiple languages', () => {\n      const languages = [...new Set(ALL_ITK_SOURCES.map(s => s.language))];\n      \n      expect(languages).toContain('en'); // English\n      expect(languages).toContain('es'); // Spanish\n      expect(languages).toContain('it'); // Italian\n      expect(languages).toContain('fr'); // French\n      expect(languages).toContain('de'); // German\n      expect(languages).toContain('pt'); // Portuguese\n\n      console.log(`Languages supported: ${languages.join(', ')}`);\n    });\n\n    it('should have balanced language distribution', () => {\n      const enSources = getSourcesByLanguage('en');\n      const esSources = getSourcesByLanguage('es');\n      const itSources = getSourcesByLanguage('it');\n      const frSources = getSourcesByLanguage('fr');\n      const deSources = getSourcesByLanguage('de');\n      const ptSources = getSourcesByLanguage('pt');\n\n      expect(enSources.length).toBeGreaterThanOrEqual(6); // English dominant\n      expect(esSources.length).toBeGreaterThanOrEqual(2);\n      expect(itSources.length).toBeGreaterThanOrEqual(2);\n      expect(frSources.length).toBeGreaterThanOrEqual(2);\n      expect(deSources.length).toBeGreaterThanOrEqual(2);\n      expect(ptSources.length).toBeGreaterThanOrEqual(1);\n\n      console.log(`Language distribution:`);\n      console.log(`  English: ${enSources.length} sources`);\n      console.log(`  Spanish: ${esSources.length} sources`);\n      console.log(`  Italian: ${itSources.length} sources`);\n      console.log(`  French: ${frSources.length} sources`);\n      console.log(`  German: ${deSources.length} sources`);\n      console.log(`  Portuguese: ${ptSources.length} sources`);\n    });\n  });\n\n  describe('Source Quality Requirements', () => {\n    it('should have high reliability scores', () => {\n      const tier1Reliability = TIER_1_SOURCES.every(s => s.reliability >= 0.9);\n      const tier2Reliability = [...TIER_2_SOURCES, ...TIER_2_ADDITIONAL].every(s => s.reliability >= 0.75);\n      const tier3Reliability = TIER_3_SOURCES.every(s => s.reliability >= 0.7);\n\n      expect(tier1Reliability).toBe(true);\n      expect(tier2Reliability).toBe(true);  \n      expect(tier3Reliability).toBe(true);\n\n      const avgReliability = ALL_ITK_SOURCES.reduce((sum, s) => sum + s.reliability, 0) / ALL_ITK_SOURCES.length;\n      expect(avgReliability).toBeGreaterThan(0.75);\n\n      console.log(`Average reliability: ${(avgReliability * 100).toFixed(1)}%`);\n    });\n\n    it('should have proper monitoring priority order', () => {\n      const prioritySources = getMonitoringPriority();\n      \n      expect(prioritySources.length).toBe(ALL_ITK_SOURCES.length);\n      \n      // First sources should be Tier 1\n      const firstFew = prioritySources.slice(0, 3);\n      expect(firstFew.every(s => s.tier === 1)).toBe(true);\n\n      // Should be ordered by tier first, then reliability\n      for (let i = 0; i < prioritySources.length - 1; i++) {\n        const current = prioritySources[i];\n        const next = prioritySources[i + 1];\n        \n        if (current.tier === next.tier) {\n          expect(current.reliability).toBeGreaterThanOrEqual(next.reliability);\n        } else {\n          expect(current.tier).toBeLessThan(next.tier);\n        }\n      }\n\n      console.log('Top 5 priority sources:');\n      prioritySources.slice(0, 5).forEach((source, index) => {\n        console.log(`  ${index + 1}. ${source.name} (Tier ${source.tier}, ${(source.reliability * 100).toFixed(1)}%)`);\n      });\n    });\n  });\n\n  describe('Source Data Validation', () => {\n    it('should have all required fields for each source', () => {\n      ALL_ITK_SOURCES.forEach(source => {\n        expect(source.id).toBeTruthy();\n        expect(source.name).toBeTruthy();\n        expect(source.handle).toMatch(/^@\\w+/);\n        expect([1, 2, 3]).toContain(source.tier);\n        expect(source.reliability).toBeGreaterThan(0);\n        expect(source.reliability).toBeLessThanOrEqual(1);\n        expect(['UK', 'ES', 'IT', 'FR', 'DE', 'BR', 'GLOBAL']).toContain(source.region);\n        expect(['en', 'es', 'it', 'fr', 'de', 'pt']).toContain(source.language);\n        expect(Array.isArray(source.specialties)).toBe(true);\n        expect(Array.isArray(source.leagues)).toBe(true);\n        expect(typeof source.isActive).toBe('boolean');\n      });\n    });\n\n    it('should have unique IDs and handles', () => {\n      const ids = ALL_ITK_SOURCES.map(s => s.id);\n      const handles = ALL_ITK_SOURCES.map(s => s.handle);\n      \n      expect(new Set(ids).size).toBe(ALL_ITK_SOURCES.length);\n      expect(new Set(handles).size).toBe(ALL_ITK_SOURCES.length);\n    });\n\n    it('should have proper league assignments', () => {\n      const validLeagues = ['PL', 'LaLiga', 'SerieA', 'Bundesliga', 'Ligue1', 'UCL', 'Championship', 'Brasileirao'];\n      \n      ALL_ITK_SOURCES.forEach(source => {\n        expect(source.leagues.length).toBeGreaterThan(0);\n        source.leagues.forEach(league => {\n          expect(validLeagues).toContain(league);\n        });\n      });\n    });\n  });\n\n  describe('Elite Sources (Tier 1)', () => {\n    it('should include global transfer experts', () => {\n      const sourceNames = TIER_1_SOURCES.map(s => s.name.toLowerCase());\n      \n      expect(sourceNames).toContain('fabrizio romano');\n      expect(sourceNames).toContain('david ornstein');\n      expect(sourceNames).toContain('gianluca di marzio');\n\n      // All Tier 1 should have >90% reliability\n      TIER_1_SOURCES.forEach(source => {\n        expect(source.reliability).toBeGreaterThan(0.9);\n      });\n    });\n  });\n\n  describe('Global Coverage Analysis', () => {\n    it('should provide comprehensive global coverage', () => {\n      // Test data for comprehensive analysis\n      const stats = {\n        totalSources: ALL_ITK_SOURCES.length,\n        activeSources: getActiveSources().length,\n        regions: [...new Set(ALL_ITK_SOURCES.map(s => s.region))].length,\n        languages: [...new Set(ALL_ITK_SOURCES.map(s => s.language))].length,\n        leagues: [...new Set(ALL_ITK_SOURCES.flatMap(s => s.leagues))].length,\n        avgReliability: ALL_ITK_SOURCES.reduce((sum, s) => sum + s.reliability, 0) / ALL_ITK_SOURCES.length,\n      };\n\n      expect(stats.totalSources).toBeGreaterThanOrEqual(20);\n      expect(stats.regions).toBeGreaterThanOrEqual(6);\n      expect(stats.languages).toBeGreaterThanOrEqual(5);\n      expect(stats.leagues).toBeGreaterThanOrEqual(6);\n      expect(stats.avgReliability).toBeGreaterThan(0.75);\n\n      console.log('📊 Global ITK Coverage Analysis:');\n      console.log(`  ✅ Total Sources: ${stats.totalSources} (requirement: 20+)`);\n      console.log(`  ✅ Active Sources: ${stats.activeSources}`);\n      console.log(`  ✅ Regions Covered: ${stats.regions}`);\n      console.log(`  ✅ Languages Supported: ${stats.languages}`);\n      console.log(`  ✅ Leagues Monitored: ${stats.leagues}`);\n      console.log(`  ✅ Average Reliability: ${(stats.avgReliability * 100).toFixed(1)}%`);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}