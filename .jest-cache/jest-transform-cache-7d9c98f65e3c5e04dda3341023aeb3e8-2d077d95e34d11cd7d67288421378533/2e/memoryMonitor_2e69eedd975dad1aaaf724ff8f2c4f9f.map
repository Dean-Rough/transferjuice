{"version":3,"names":["cov_7cuuyuo0d","actualCoverage","_slicedToArray","r","e","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","name","Array","from","test","length","n","l","Symbol","iterator","i","u","f","o","next","Object","done","push","value","isArray","_typeof","prototype","_classCallCheck","_defineProperties","enumerable","configurable","writable","defineProperty","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","toPrimitive","String","Number","DEFAULT_THRESHOLDS","s","warning","critical","maximum","getMemoryMetrics","b","window","memory","performance","usedMB","Math","round","usedJSHeapSize","totalMB","totalJSHeapSize","limitMB","jsHeapSizeLimit","percentUsed","checkMemoryThresholds","metrics","thresholds","arguments","undefined","_ref","level","message","concat","shouldCleanup","MemoryMonitor","start","_this","intervalMs","intervalId","stop","setInterval","callbacks","forEach","callback","status","console","warn","clearInterval","onUpdate","_this2","index","indexOf","splice","getSnapshot","forceGarbageCollection","gc","log","error","MemoryOptimizer","optimizeObject","obj","keepKeys","optimized","deepFreeze","_this3","visited","WeakSet","has","add","getOwnPropertyNames","prop","freeze","createBoundedArray","maxSize","items","item","unshift","size","clear","getMemoryUsage","JSON","stringify","estimateObjectSize","_unused","useMemoryMonitor","_ref2","React","useState","_ref3","setMetrics","_ref4","_ref5","setStatus","_ref6","_ref7","monitor","useEffect","unsubscribe","newMetrics"],"sources":["memoryMonitor.ts"],"sourcesContent":["/**\n * Memory monitoring and optimization utilities for feed performance\n */\n\nexport interface MemoryMetrics {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n  usedMB: number;\n  totalMB: number;\n  limitMB: number;\n  percentUsed: number;\n}\n\nexport interface MemoryThresholds {\n  warning: number; // MB\n  critical: number; // MB\n  maximum: number; // MB for 1000+ items requirement\n}\n\nexport const DEFAULT_THRESHOLDS: MemoryThresholds = {\n  warning: 75, // 75MB warning\n  critical: 90, // 90MB critical\n  maximum: 100, // 100MB hard limit\n};\n\n/**\n * Get current memory usage metrics\n */\nexport function getMemoryMetrics(): MemoryMetrics | null {\n  if (typeof window === 'undefined' || !('performance' in window)) {\n    return null;\n  }\n\n  const memory = (performance as any).memory;\n  if (!memory) {\n    return null;\n  }\n\n  const usedMB = Math.round((memory.usedJSHeapSize / 1024 / 1024) * 100) / 100;\n  const totalMB =\n    Math.round((memory.totalJSHeapSize / 1024 / 1024) * 100) / 100;\n  const limitMB =\n    Math.round((memory.jsHeapSizeLimit / 1024 / 1024) * 100) / 100;\n  const percentUsed =\n    Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100 * 100) /\n    100;\n\n  return {\n    usedJSHeapSize: memory.usedJSHeapSize,\n    totalJSHeapSize: memory.totalJSHeapSize,\n    jsHeapSizeLimit: memory.jsHeapSizeLimit,\n    usedMB,\n    totalMB,\n    limitMB,\n    percentUsed,\n  };\n}\n\n/**\n * Check if memory usage exceeds thresholds\n */\nexport function checkMemoryThresholds(\n  metrics: MemoryMetrics,\n  thresholds: MemoryThresholds = DEFAULT_THRESHOLDS\n): {\n  level: 'safe' | 'warning' | 'critical' | 'exceeded';\n  message: string;\n  shouldCleanup: boolean;\n} {\n  const { usedMB } = metrics;\n\n  if (usedMB >= thresholds.maximum) {\n    return {\n      level: 'exceeded',\n      message: `Memory usage (${usedMB}MB) exceeds maximum threshold (${thresholds.maximum}MB)`,\n      shouldCleanup: true,\n    };\n  }\n\n  if (usedMB >= thresholds.critical) {\n    return {\n      level: 'critical',\n      message: `Memory usage (${usedMB}MB) is at critical level (${thresholds.critical}MB+)`,\n      shouldCleanup: true,\n    };\n  }\n\n  if (usedMB >= thresholds.warning) {\n    return {\n      level: 'warning',\n      message: `Memory usage (${usedMB}MB) approaching warning level (${thresholds.warning}MB+)`,\n      shouldCleanup: false,\n    };\n  }\n\n  return {\n    level: 'safe',\n    message: `Memory usage (${usedMB}MB) is within safe limits`,\n    shouldCleanup: false,\n  };\n}\n\n/**\n * Memory monitoring hook for continuous tracking\n */\nexport class MemoryMonitor {\n  private intervalId: NodeJS.Timeout | null = null;\n  private callbacks: ((metrics: MemoryMetrics) => void)[] = [];\n  private thresholds: MemoryThresholds;\n\n  constructor(thresholds: MemoryThresholds = DEFAULT_THRESHOLDS) {\n    this.thresholds = thresholds;\n  }\n\n  /**\n   * Start monitoring memory usage\n   */\n  start(intervalMs: number = 5000): void {\n    if (this.intervalId) {\n      this.stop();\n    }\n\n    this.intervalId = setInterval(() => {\n      const metrics = getMemoryMetrics();\n      if (metrics) {\n        this.callbacks.forEach((callback) => callback(metrics));\n\n        const status = checkMemoryThresholds(metrics, this.thresholds);\n        if (status.level === 'critical' || status.level === 'exceeded') {\n          console.warn(`Memory Monitor: ${status.message}`);\n        }\n      }\n    }, intervalMs);\n  }\n\n  /**\n   * Stop monitoring\n   */\n  stop(): void {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n  }\n\n  /**\n   * Add callback for memory updates\n   */\n  onUpdate(callback: (metrics: MemoryMetrics) => void): () => void {\n    this.callbacks.push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const index = this.callbacks.indexOf(callback);\n      if (index > -1) {\n        this.callbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Get current memory snapshot\n   */\n  getSnapshot(): MemoryMetrics | null {\n    return getMemoryMetrics();\n  }\n\n  /**\n   * Force garbage collection if available (dev mode)\n   */\n  forceGarbageCollection(): void {\n    if (typeof window !== 'undefined' && (window as any).gc) {\n      try {\n        (window as any).gc();\n        console.log('Manual garbage collection triggered');\n      } catch (error) {\n        console.warn('Failed to trigger garbage collection:', error);\n      }\n    }\n  }\n}\n\n/**\n * Memory optimization utilities\n */\nexport const MemoryOptimizer = {\n  /**\n   * Optimize object for memory by removing unnecessary properties\n   */\n  optimizeObject<T extends Record<string, any>>(\n    obj: T,\n    keepKeys: (keyof T)[]\n  ): Partial<T> {\n    const optimized: Partial<T> = {};\n    keepKeys.forEach((key) => {\n      if (key in obj) {\n        optimized[key] = obj[key];\n      }\n    });\n    return optimized;\n  },\n\n  /**\n   * Deep freeze object to prevent memory leaks from references\n   */\n  deepFreeze<T>(obj: T, visited = new WeakSet()): T {\n    // Prevent infinite recursion with circular references\n    if (visited.has(obj as any)) {\n      return obj;\n    }\n    visited.add(obj as any);\n\n    Object.getOwnPropertyNames(obj).forEach((prop) => {\n      const value = (obj as any)[prop];\n      if (value && typeof value === 'object') {\n        this.deepFreeze(value, visited);\n      }\n    });\n    return Object.freeze(obj);\n  },\n\n  /**\n   * Create memory-efficient array with maximum size\n   */\n  createBoundedArray<T>(maxSize: number): {\n    items: T[];\n    add: (item: T) => void;\n    size: () => number;\n    clear: () => void;\n    getMemoryUsage: () => number;\n  } {\n    let items: T[] = [];\n\n    return {\n      get items() {\n        return items;\n      },\n\n      add(item: T) {\n        items.unshift(item);\n        if (items.length > maxSize) {\n          items = items.slice(0, maxSize);\n        }\n      },\n\n      size() {\n        return items.length;\n      },\n\n      clear() {\n        items = [];\n      },\n\n      getMemoryUsage() {\n        return JSON.stringify(items).length;\n      },\n    };\n  },\n\n  /**\n   * Estimate object size in bytes\n   */\n  estimateObjectSize(obj: any): number {\n    try {\n      return JSON.stringify(obj).length * 2; // Rough estimate (UTF-16)\n    } catch {\n      return 0;\n    }\n  },\n};\n\n/**\n * React hook for memory monitoring\n */\nexport function useMemoryMonitor(\n  thresholds: MemoryThresholds = DEFAULT_THRESHOLDS,\n  intervalMs: number = 5000\n): {\n  metrics: MemoryMetrics | null;\n  status: ReturnType<typeof checkMemoryThresholds> | null;\n  monitor: MemoryMonitor;\n} {\n  const [metrics, setMetrics] = React.useState<MemoryMetrics | null>(null);\n  const [status, setStatus] = React.useState<ReturnType<\n    typeof checkMemoryThresholds\n  > | null>(null);\n  const [monitor] = React.useState(() => new MemoryMonitor(thresholds));\n\n  React.useEffect(() => {\n    const unsubscribe = monitor.onUpdate((newMetrics) => {\n      setMetrics(newMetrics);\n      setStatus(checkMemoryThresholds(newMetrics, thresholds));\n    });\n\n    monitor.start(intervalMs);\n\n    return () => {\n      unsubscribe();\n      monitor.stop();\n    };\n  }, [monitor, thresholds, intervalMs]);\n\n  return { metrics, status, monitor };\n}\n\n// Add React import for the hook\nimport React from 'react';\n"],"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","ignoreList":[]}