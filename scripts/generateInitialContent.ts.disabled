#!/usr/bin/env tsx
/**
 * Generate Initial Content Batch
 * Creates the first batch of transfer feed content with Terry commentary
 */

import { globalMonitor } from '../src/lib/twitter/globalMonitor';
import { startTerrySystem, testTerryVoice, getTerryDashboard } from '../src/lib/ai';
import { useFeedStore } from '../src/lib/stores/feedStore';
import { 
  classifyTransferContent,
  type TweetData 
} from '../src/lib/twitter/transferClassifier';
import { 
  getSourceByHandle,
  getActiveSources,
  ALL_ITK_SOURCES 
} from '../src/lib/twitter/globalSources';
import { convertTweetToFeedItem } from '../src/lib/twitter/feedIntegration';

console.log('üöÄ Starting TransferJuice Initial Content Generation...\n');

async function generateInitialContent() {
  console.log('üìä System Status Check...');
  
  // Initialize Terry's commentary system
  console.log('üé≠ Starting Terry Commentary System...');
  const terrySystem = startTerrySystem({
    integration: {
      // Terry config fields
      enabledTypes: ['itk', 'breaking'],
      minConfidenceForCommentary: 0.5, // Lower threshold for more commentary
      maxCommentariesPerHour: 12, // Higher for initial batch
      voiceConsistencyThreshold: 0.7, // Slightly lower for more content
      breakingNewsCommentaryRate: 0.8,
      humorIntensity: 'sharp',
      // Integration specific fields
      enableRealTimeCommentary: true,
      enableBatchCommentary: true,
      commentaryDelay: 0, // Immediate for batch generation
      retryFailedCommentary: false,
      maxRetries: 0,
    },
    monitoring: {
      enableAutoCommentary: true,
      processAllIncomingTweets: true,
      prioritizeBreakingNews: true,
      minConfidenceForTerry: 0.5, // Lower threshold for more commentary
    }
  });

  // Test Terry's voice first
  console.log('\nüß™ Testing Terry Voice...');
  const voiceTest = await testTerryVoice();
  if (!voiceTest) {
    console.error('‚ùå Terry voice test failed!');
    return;
  }
  console.log(`‚úÖ Terry voice test passed! Consistency: ${Math.round(voiceTest.voiceConsistencyScore * 100)}%`);

  // Run global monitoring cycle to generate content
  console.log('\nüåç Running Global ITK Monitoring Cycle...');
  const monitoringStats = await globalMonitor.runMonitoringCycle();
  
  console.log('üìà Global Monitoring Results:');
  console.log(`- Sources monitored: ${monitoringStats.activeSources}`);
  console.log(`- Total tweets checked: ${monitoringStats.totalTweetsChecked}`);
  console.log(`- Transfer tweets found: ${monitoringStats.totalTransferTweets}`);
  console.log(`- Processing time: ${monitoringStats.processingTimeMs}ms`);
  console.log(`- Average confidence: ${monitoringStats.averageConfidence}%`);

  // Display regional breakdown
  console.log('\nüó∫Ô∏è Regional Coverage:');
  Object.entries(monitoringStats.regionStats).forEach(([region, stats]) => {
    console.log(`- ${region}: ${stats.sources} sources, ${stats.tweets} tweets, ${stats.transfers} transfers`);
  });

  // Load initial feed content
  console.log('\nüì∞ Loading Initial Feed Content...');
  const feedStore = useFeedStore.getState();
  await feedStore.loadItems(50); // Load 50 initial items

  console.log(`‚úÖ Loaded ${feedStore.items.length} feed items`);

  // Generate some high-quality mock tweets for demonstration
  const demoTweets = generateDemoTweets();
  
  console.log('\nüéØ Processing Demo Transfer Tweets...');
  for (const tweet of demoTweets) {
    const classification = classifyTransferContent(tweet);
    const source = getSourceByHandle(tweet.author.username);
    
    if (classification.isTransferRelated && source) {
      const feedItem = convertTweetToFeedItem(tweet, classification, source);
      
      // Add to feed store
      feedStore.addItem(feedItem);
      
      console.log(`üìù Added: ${tweet.text.substring(0, 60)}...`);
      console.log(`   Confidence: ${Math.round(classification.confidence * 100)}%`);
      console.log(`   Source: ${source.name} (Tier ${source.tier})`);
      console.log(`   Type: ${classification.transferType || 'general'}`);
      
      // Small delay to allow Terry processing
      await sleep(1000);
    }
  }

  // Wait a moment for Terry to process
  console.log('\n‚è≥ Waiting for Terry to add commentary...');
  await sleep(3000);

  // Get Terry system status
  console.log('\nüé≠ Terry System Performance:');
  const terryDashboard = getTerryDashboard();
  
  console.log('Performance Metrics:');
  console.log(`- Total commentaries: ${terryDashboard.performance.totalCommentaries}`);
  console.log(`- Success rate: ${terryDashboard.performance.successRate}%`);
  console.log(`- Voice consistency: ${Math.round(terryDashboard.performance.voiceConsistency * 100)}%`);
  console.log(`- Average response time: ${terryDashboard.performance.averageResponseTime}ms`);

  if (terryDashboard.voiceAnalytics) {
    console.log('\nVoice Analytics:');
    console.log(`- Average consistency: ${Math.round(terryDashboard.voiceAnalytics.averageConsistency * 100)}%`);
    console.log(`- Ascerbic score: ${Math.round(terryDashboard.voiceAnalytics.averageAscerbicScore * 100)}%`);
    console.log(`- British humour: ${Math.round(terryDashboard.voiceAnalytics.averageBritishHumour * 100)}%`);
    console.log(`- Football knowledge: ${Math.round(terryDashboard.voiceAnalytics.averageFootballKnowledge * 100)}%`);
  }

  // Display final feed statistics
  const finalStore = useFeedStore.getState();
  console.log('\nüìä Final Feed Statistics:');
  console.log(`- Total items: ${finalStore.items.length}`);
  console.log(`- Items with Terry commentary: ${finalStore.items.filter(item => item.terryCommentary).length}`);
  console.log(`- Breaking news items: ${finalStore.items.filter(item => item.type === 'breaking').length}`);
  console.log(`- High priority items: ${finalStore.items.filter(item => item.metadata.priority === 'high').length}`);

  // Show some example items with Terry commentary
  const itemsWithTerry = finalStore.items.filter(item => item.terryCommentary).slice(0, 3);
  
  if (itemsWithTerry.length > 0) {
    console.log('\nüé≠ Sample Terry Commentaries:');
    itemsWithTerry.forEach((item, index) => {
      console.log(`\n${index + 1}. Original: ${item.content.substring(0, 80)}...`);
      console.log(`   Terry: ${item.terryCommentary}`);
      console.log(`   Source: ${item.source.name} | Priority: ${item.metadata.priority}`);
    });
  }

  // System health check
  console.log('\nüîç System Health:');
  console.log(`- Pending commentaries: ${terryDashboard.systemHealth.pendingCommentaries}`);
  console.log(`- Quality rejections: ${terryDashboard.systemHealth.rejectionsLowQuality}`);
  console.log(`- Quota rejections: ${terryDashboard.systemHealth.rejectionsQuotaExceeded}`);

  console.log('\n‚úÖ Initial content generation complete!');
  console.log('\nüéâ TransferJuice is ready to go live with Terry commentary!');
}

function generateDemoTweets(): TweetData[] {
  return [
    {
      id: 'demo-1',
      text: 'üö® BREAKING: Arsenal agree ‚Ç¨65M fee for Declan Rice! Medical scheduled for tomorrow. Personal terms already agreed. Here we go! ‚úÖ',
      author: {
        username: 'FabrizioRomano',
        displayName: 'Fabrizio Romano',
      },
      createdAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 minutes ago
      lang: 'en',
      metrics: {
        retweets: 2847,
        likes: 15632,
        replies: 891,
      },
    },
    {
      id: 'demo-2',
      text: 'Personal terms agreed between Kylian Mbapp√© and Real Madrid. Club-to-club negotiations ongoing for final fee structure. Deal expected to be completed within 48-72 hours.',
      author: {
        username: 'David_Ornstein',
        displayName: 'David Ornstein',
      },
      createdAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(), // 45 minutes ago
      lang: 'en',
      metrics: {
        retweets: 1923,
        likes: 8741,
        replies: 542,
      },
    },
    {
      id: 'demo-3',
      text: 'UFFICIALE: Juventus confermato accordo per Victor Osimhen! Visite mediche programmate per domani mattina. Contratto di 5 anni. üá≥üá¨‚ö´‚ö™',
      author: {
        username: 'DiMarzio',
        displayName: 'Gianluca Di Marzio',
      },
      createdAt: new Date(Date.now() - 20 * 60 * 1000).toISOString(), // 20 minutes ago
      lang: 'it',
      metrics: {
        retweets: 1456,
        likes: 6789,
        replies: 378,
      },
    },
    {
      id: 'demo-4',
      text: 'Bayern Munich officials confident about completing Jamal Musiala contract extension. New deal until 2029 with significant salary increase. Announcement expected this week.',
      author: {
        username: 'SkySports',
        displayName: 'Sky Sports',
      },
      createdAt: new Date(Date.now() - 60 * 60 * 1000).toISOString(), // 1 hour ago
      lang: 'en',
      metrics: {
        retweets: 876,
        likes: 4321,
        replies: 234,
      },
    },
    {
      id: 'demo-5',
      text: 'EXCLUSIVE: Manchester United monitoring Pedri situation at Barcelona. Initial contact made with player representatives. No formal bid yet but interest is genuine.',
      author: {
        username: 'marca',
        displayName: 'MARCA',
      },
      createdAt: new Date(Date.now() - 90 * 60 * 1000).toISOString(), // 1.5 hours ago
      lang: 'en',
      metrics: {
        retweets: 654,
        likes: 2987,
        replies: 189,
      },
    },
    {
      id: 'demo-6',
      text: 'PSG preparing improved offer for Rafael Le√£o. AC Milan want ‚Ç¨120M, PSG willing to pay ‚Ç¨100M plus bonuses. Player keen on Paris move. Negotiations continue.',
      author: {
        username: 'lequipe',
        displayName: "L'√âquipe",
      },
      createdAt: new Date(Date.now() - 75 * 60 * 1000).toISOString(), // 1 hour 15 minutes ago
      lang: 'en',
      metrics: {
        retweets: 432,
        likes: 1876,
        replies: 145,
      },
    },
  ];
}

function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Run the content generation
generateInitialContent().catch(console.error);