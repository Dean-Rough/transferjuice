ae08221366995988e6b45d3a683ca7c6
"use strict";

// Mock OpenAI
_getJestObj().mock('openai');
// Mock terry-style module
_getJestObj().mock('@/lib/terry-style', function () {
  return {
    applyTerryStyle: {
      enhanceError: jest.fn(function (msg) {
        return "Terry-enhanced: ".concat(msg);
      })
    },
    terryPrompts: {
      articleGeneration: 'Mock Terry article generation prompt'
    }
  };
});

// Mock Prisma client types
_getJestObj().mock('@prisma/client', function () {
  return {
    BriefingType: {
      MORNING: 'MORNING',
      AFTERNOON: 'AFTERNOON',
      EVENING: 'EVENING',
      WEEKEND: 'WEEKEND',
      SPECIAL: 'SPECIAL'
    }
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _openai = _interopRequireDefault(require("openai"));
var _articleGenerator = require("../article-generator");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * Terry-Style Article Generator Tests
 * Comprehensive test suite for AI-powered article generation
 */
var MockedOpenAI = _openai["default"];
describe('TerryArticleGenerator', function () {
  var generator;
  var mockOpenAI;
  var mockContentAnalysis = {
    classification: {
      isTransferRelated: true,
      transferType: 'CONFIRMED',
      priority: 'HIGH',
      confidence: 0.95,
      categories: ['signing', 'medical'],
      keyPoints: ['Manchester United', 'Declan Rice', '£100m', 'Medical completed'],
      duplicateOf: undefined
    },
    entities: {
      players: [{
        name: 'Declan Rice',
        confidence: 0.98,
        position: 'Defensive Midfielder',
        currentClub: 'West Ham United',
        nationality: 'England'
      }],
      clubs: [{
        name: 'Manchester United',
        confidence: 0.99,
        league: 'Premier League',
        country: 'England'
      }],
      transferDetails: [{
        type: 'fee',
        value: '£100m',
        confidence: 0.9
      }],
      agents: []
    },
    sentiment: {
      sentiment: 'positive',
      confidence: 0.85,
      emotions: ['excitement', 'optimism'],
      reliability: 0.95,
      urgency: 0.8
    },
    qualityScore: 88,
    terryCompatibility: 75,
    processingTime: 1200,
    aiModel: 'gpt-4.1'
  };
  var mockGenerationInput = {
    briefingType: 'MORNING',
    tweetAnalyses: [mockContentAnalysis],
    briefingDate: new Date('2024-01-15T08:00:00Z'),
    targetWordCount: 800,
    focusClubs: ['Manchester United', 'Arsenal']
  };
  var mockSectionContent = "Right, this might be the most cursed transfer saga I've witnessed today, and I've been watching football for longer than I care to admit. Manchester United (currently in their \"cautiously optimistic\" phase) have finally managed to drag Declan Rice across the finish line for \xA3100m (or roughly the GDP of a small Caribbean island).\n\nThe whole medical circus (basically checking he has two legs and a pulse) was completed yesterday, which means we're now in that delightful phase where everyone pretends this was always going to happen (it wasn't) and that \xA3100m represents good value (it doesn't, but here we are).\n\nWhat this actually means, beyond the obvious financial lunacy, is that United have finally addressed their midfield issues with the sort of decisive action that would make a sloth proud. Rice brings exactly the sort of defensive stability that United have been missing since, oh, approximately 2013.";
  var mockMetadataResponse = {
    title: 'Rice Finally Joins United After £100m Circus',
    slug: 'rice-finally-joins-united-after-100m-circus',
    summary: 'Manchester United complete the signing of Declan Rice for £100m after medical tests.',
    metaDescription: 'Declan Rice joins Manchester United for £100m in latest transfer madness.',
    tags: ['Manchester United', 'Declan Rice', 'Transfer', 'Premier League']
  };

  // Helper function to setup mocks for article generation
  var setupMocksForGeneration = function setupMocksForGeneration() {
    var numberOfSections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;
    mockOpenAI.chat.completions.create.mockClear();

    // Mock section generation calls
    for (var i = 0; i < numberOfSections; i++) {
      mockOpenAI.chat.completions.create.mockResolvedValueOnce({
        choices: [{
          message: {
            content: mockSectionContent
          }
        }]
      });
    }

    // Mock metadata generation call
    mockOpenAI.chat.completions.create.mockResolvedValueOnce({
      choices: [{
        message: {
          content: JSON.stringify(mockMetadataResponse)
        }
      }]
    });
  };
  beforeEach(function () {
    jest.clearAllMocks();

    // Create mock OpenAI instance
    mockOpenAI = {
      chat: {
        completions: {
          create: jest.fn()
        }
      }
    };
    MockedOpenAI.mockImplementation(function () {
      return mockOpenAI;
    });
    generator = new _articleGenerator.TerryArticleGenerator({
      openaiApiKey: 'test-key',
      model: 'gpt-4.1',
      terryIntensity: 'medium'
    });
  });
  describe('constructor', function () {
    it('should initialize with default configuration', function () {
      var defaultGenerator = new _articleGenerator.TerryArticleGenerator({
        openaiApiKey: 'test-key'
      });
      expect(defaultGenerator).toBeInstanceOf(_articleGenerator.TerryArticleGenerator);
    });
    it('should initialize with custom configuration', function () {
      var customGenerator = new _articleGenerator.TerryArticleGenerator({
        openaiApiKey: 'test-key',
        model: 'gpt-4o',
        maxTokens: 5000,
        temperature: 0.8,
        terryIntensity: 'nuclear'
      });
      expect(customGenerator).toBeInstanceOf(_articleGenerator.TerryArticleGenerator);
    });
  });
  describe('generateArticle', function () {
    it('should generate complete article with all sections', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            setupMocksForGeneration(4);
            _context.n = 1;
            return generator.generateArticle(mockGenerationInput);
          case 1:
            result = _context.v;
            expect(result).toMatchObject({
              title: expect.any(String),
              slug: expect.any(String),
              content: {
                sections: expect.any(Array),
                wordCount: expect.any(Number),
                estimatedReadTime: expect.any(Number),
                terryScore: expect.any(Number),
                qualityMetrics: {
                  coherence: expect.any(Number),
                  factualAccuracy: expect.any(Number),
                  brandVoice: expect.any(Number),
                  readability: expect.any(Number)
                }
              },
              summary: expect.any(String),
              metaDescription: expect.any(String),
              tags: expect.any(Array),
              briefingType: 'MORNING',
              status: expect.stringMatching(/^(DRAFT|REVIEW)$/),
              qualityScore: expect.any(Number),
              aiModel: 'gpt-4.1',
              generationTime: expect.any(Number)
            });
            expect(result.content.sections).toHaveLength(4);
            expect(result.content.wordCount).toBeGreaterThan(0);
            expect(result.content.estimatedReadTime).toBeGreaterThan(0);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should handle multiple tweet analyses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var multipleAnalyses, result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            setupMocksForGeneration(5); // More sections for more content
            multipleAnalyses = [mockContentAnalysis, _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
              classification: _objectSpread(_objectSpread({}, mockContentAnalysis.classification), {}, {
                keyPoints: ['Arsenal', 'Gabriel Jesus', '£45m', 'Medical scheduled']
              }),
              entities: _objectSpread(_objectSpread({}, mockContentAnalysis.entities), {}, {
                players: [{
                  name: 'Gabriel Jesus',
                  confidence: 0.9
                }],
                clubs: [{
                  name: 'Arsenal',
                  confidence: 0.95
                }]
              })
            })];
            _context2.n = 1;
            return generator.generateArticle(_objectSpread(_objectSpread({}, mockGenerationInput), {}, {
              tweetAnalyses: multipleAnalyses
            }));
          case 1:
            result = _context2.v;
            expect(result.content.sections.length).toBeGreaterThanOrEqual(4);
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalled();
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should set status to REVIEW for high quality articles', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            setupMocksForGeneration(4);
            _context3.n = 1;
            return generator.generateArticle(mockGenerationInput);
          case 1:
            result = _context3.v;
            if (result.qualityScore >= 85) {
              expect(result.status).toBe('REVIEW');
            } else {
              expect(result.status).toBe('DRAFT');
            }
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    it('should handle generation errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error('API Error'));
            _context4.n = 1;
            return expect(generator.generateArticle(mockGenerationInput)).rejects.toThrow('Article generation failed');
          case 1:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it('should handle empty content responses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: null
                }
              }]
            });
            _context5.n = 1;
            return expect(generator.generateArticle(mockGenerationInput)).rejects.toThrow('No content generated');
          case 1:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe('content prioritization', function () {
    it('should prioritize high-quality transfer content', function () {
      var analyses = [_objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        qualityScore: 60,
        terryCompatibility: 40
      }), _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        qualityScore: 90,
        terryCompatibility: 80
      }), _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        qualityScore: 75,
        terryCompatibility: 60
      })];
      var prioritized = generator.prioritizeContent(analyses);
      expect(prioritized[0].qualityScore).toBe(90);
      expect(prioritized[0].terryCompatibility).toBe(80);
    });
    it('should boost chaotic content in prioritization', function () {
      var chaoticAnalysis = _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        qualityScore: 70,
        sentiment: _objectSpread(_objectSpread({}, mockContentAnalysis.sentiment), {}, {
          emotions: ['excitement', 'skepticism']
        }),
        entities: _objectSpread(_objectSpread({}, mockContentAnalysis.entities), {}, {
          transferDetails: [{
            type: 'fee',
            value: '£200m',
            confidence: 0.9
          }]
        }),
        terryCompatibility: 85
      });
      var normalAnalysis = _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        qualityScore: 80,
        terryCompatibility: 50
      });
      var prioritized = generator.prioritizeContent([normalAnalysis, chaoticAnalysis]);
      expect(prioritized[0]).toBe(chaoticAnalysis);
    });
    it('should filter out non-transfer content', function () {
      var analyses = [mockContentAnalysis, _objectSpread(_objectSpread({}, mockContentAnalysis), {}, {
        classification: _objectSpread(_objectSpread({}, mockContentAnalysis.classification), {}, {
          isTransferRelated: false
        })
      })];
      var prioritized = generator.prioritizeContent(analyses);
      expect(prioritized).toHaveLength(1);
      expect(prioritized[0].classification.isTransferRelated).toBe(true);
    });
    it('should limit to top 10 pieces of content', function () {
      var analyses = Array(15).fill(mockContentAnalysis);
      var prioritized = generator.prioritizeContent(analyses);
      expect(prioritized).toHaveLength(10);
    });
  });
  describe('article structure planning', function () {
    it('should create proper article structure', function () {
      var analyses = Array(8).fill(mockContentAnalysis);
      var structure = generator.planArticleStructure(analyses, mockGenerationInput);
      var expectedTypes = ['intro', 'main', 'context', 'analysis', 'conclusion'];
      var actualTypes = structure.map(function (s) {
        return s.type;
      });
      expectedTypes.forEach(function (type) {
        expect(actualTypes).toContain(type);
      });
    });
    it('should omit conclusion for short content', function () {
      var analyses = Array(3).fill(mockContentAnalysis);
      var structure = generator.planArticleStructure(analyses, mockGenerationInput);
      expect(structure.find(function (s) {
        return s.type === 'conclusion';
      })).toBeUndefined();
    });
    it('should distribute content across sections', function () {
      var analyses = Array(10).fill(mockContentAnalysis);
      var structure = generator.planArticleStructure(analyses, mockGenerationInput);
      var totalContent = structure.reduce(function (sum, section) {
        return sum + section.content.length;
      }, 0);
      expect(totalContent).toBe(10);
    });
  });
  describe('section generation', function () {
    it('should generate section with proper structure', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var section;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: mockSectionContent
                }
              }]
            });
            _context6.n = 1;
            return generator.generateSection('intro', [mockContentAnalysis], 1, mockGenerationInput);
          case 1:
            section = _context6.v;
            expect(section).toMatchObject({
              id: 'section_intro_1',
              type: 'intro',
              title: 'The Latest Chaos',
              content: mockSectionContent,
              order: 1,
              sourceTweets: expect.any(Array),
              terryisms: expect.any(Array)
            });
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it('should extract Terry-isms from content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var terryContent, section;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            terryContent = 'This is properly mental (of course it is) and brilliant chaos.';
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: terryContent
                }
              }]
            });
            _context7.n = 1;
            return generator.generateSection('analysis', [mockContentAnalysis], 1, mockGenerationInput);
          case 1:
            section = _context7.v;
            expect(section.terryisms).toContain('(of course it is)');
            expect(section.terryisms).toContain('properly');
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
    it('should handle different section types', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var sectionTypes, _i, _sectionTypes, type, section;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            sectionTypes = ['intro', 'main', 'context', 'analysis', 'conclusion'];
            _i = 0, _sectionTypes = sectionTypes;
          case 1:
            if (!(_i < _sectionTypes.length)) {
              _context8.n = 4;
              break;
            }
            type = _sectionTypes[_i];
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: mockSectionContent
                }
              }]
            });
            _context8.n = 2;
            return generator.generateSection(type, [mockContentAnalysis], 1, mockGenerationInput);
          case 2:
            section = _context8.v;
            expect(section.type).toBe(type);
            expect(section.title).toBeDefined();
          case 3:
            _i++;
            _context8.n = 1;
            break;
          case 4:
            return _context8.a(2);
        }
      }, _callee8);
    })));
  });
  describe('Terry system prompts', function () {
    it('should generate appropriate system prompts for different sections', function () {
      var introPrompt = generator.getTerrySystemPrompt('intro');
      var analysisPrompt = generator.getTerrySystemPrompt('analysis');
      expect(introPrompt).toContain('INTRO SECTION');
      expect(introPrompt).toContain('Hook readers immediately');
      expect(analysisPrompt).toContain('ANALYSIS SECTION');
      expect(analysisPrompt).toContain('pure Terry');
    });
    it('should include Terry voice characteristics in all prompts', function () {
      var prompt = generator.getTerrySystemPrompt('main');
      expect(prompt).toContain('acerbic');
      expect(prompt).toContain('parenthetical asides');
      expect(prompt).toContain('weaponised irritation');
      expect(prompt).toContain('emotional intelligence');
    });
  });
  describe('section requirements', function () {
    it('should provide word count requirements for each section', function () {
      var introReq = generator.getSectionRequirements('intro');
      var mainReq = generator.getSectionRequirements('main');
      var conclusionReq = generator.getSectionRequirements('conclusion');
      expect(introReq).toContain('150-200 words');
      expect(mainReq).toContain('300-400 words');
      expect(conclusionReq).toContain('100-150 words');
    });
    it('should provide different token limits for sections', function () {
      var introLimit = generator.getSectionTokenLimit('intro');
      var mainLimit = generator.getSectionTokenLimit('main');
      expect(introLimit).toBe(300);
      expect(mainLimit).toBe(500);
      expect(mainLimit).toBeGreaterThan(introLimit);
    });
  });
  describe('metadata generation', function () {
    it('should generate complete metadata', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var sections, metadata;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockMetadataResponse)
                }
              }]
            });
            sections = [{
              id: 'section_intro_1',
              type: 'intro',
              title: 'The Latest Chaos',
              content: mockSectionContent,
              order: 1,
              sourceTweets: ['tweet_1'],
              terryisms: ['(of course)', 'properly mental']
            }];
            _context9.n = 1;
            return generator.generateMetadata(sections, mockGenerationInput);
          case 1:
            metadata = _context9.v;
            expect(metadata).toMatchObject({
              title: expect.any(String),
              slug: expect.any(String),
              summary: expect.any(String),
              metaDescription: expect.any(String),
              tags: expect.any(Array)
            });
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
    it('should handle missing metadata fields gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var incompleteMetadata, metadata;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            incompleteMetadata = {
              title: 'Test Title',
              summary: 'Test summary'
            };
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(incompleteMetadata)
                }
              }]
            });
            _context0.n = 1;
            return generator.generateMetadata([], mockGenerationInput);
          case 1:
            metadata = _context0.v;
            expect(metadata.title).toBe('Test Title');
            expect(metadata.slug).toBe('test-title');
            expect(metadata.tags).toEqual([]);
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it('should handle metadata generation errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: null
                }
              }]
            });
            _context1.n = 1;
            return expect(generator.generateMetadata([], mockGenerationInput)).rejects.toThrow('No metadata generated');
          case 1:
            return _context1.a(2);
        }
      }, _callee1);
    })));
  });
  describe('Terry-ism extraction', function () {
    it('should extract parenthetical asides', function () {
      var content = 'This is mental (which it absolutely is) and chaotic (somehow).';
      var terryisms = generator.extractTerryisms(content);
      expect(terryisms).toContain('(which it absolutely is)');
      expect(terryisms).toContain('(somehow)');
    });
    it('should extract Terry phrases', function () {
      var content = 'Of course this happened, apparently it was brilliant, somehow.';
      var terryisms = generator.extractTerryisms(content);
      expect(terryisms).toContain('of course');
      expect(terryisms).toContain('apparently');
      expect(terryisms).toContain('somehow');
      expect(terryisms).toContain('brilliant');
    });
    it('should deduplicate Terry-isms', function () {
      var content = 'Of course this happened, of course it did.';
      var terryisms = generator.extractTerryisms(content);
      expect(terryisms.filter(function (t) {
        return t === 'of course';
      })).toHaveLength(1);
    });
  });
  describe('quality metrics calculation', function () {
    it('should calculate realistic quality metrics', function () {
      var sections = [{
        content: 'Test content with good length and structure.',
        terryisms: ['(of course)', 'brilliant']
      }];
      var metrics = generator.calculateQualityMetrics(sections);
      expect(metrics.coherence).toBeGreaterThanOrEqual(0);
      expect(metrics.coherence).toBeLessThanOrEqual(100);
      expect(metrics.factualAccuracy).toBeGreaterThanOrEqual(0);
      expect(metrics.factualAccuracy).toBeLessThanOrEqual(100);
      expect(metrics.brandVoice).toBeGreaterThanOrEqual(0);
      expect(metrics.brandVoice).toBeLessThanOrEqual(100);
      expect(metrics.readability).toBeGreaterThanOrEqual(0);
      expect(metrics.readability).toBeLessThanOrEqual(100);
    });
    it('should calculate Terry score based on content', function () {
      var sections = [{
        content: 'This is brilliant and of course it happened (properly mental).',
        terryisms: ['(properly mental)', 'of course', 'brilliant']
      }];
      var terryScore = generator.calculateTerryScore(sections);
      expect(terryScore).toBeGreaterThan(0);
      expect(terryScore).toBeLessThanOrEqual(100);
    });
    it('should calculate overall quality from metrics', function () {
      var metrics = {
        coherence: 85,
        factualAccuracy: 90,
        brandVoice: 80,
        readability: 75
      };
      var overallQuality = generator.calculateOverallQuality(metrics, 80);
      expect(overallQuality).toBeGreaterThan(70);
      expect(overallQuality).toBeLessThanOrEqual(100);
    });
  });
  describe('configuration validation', function () {
    it('should validate API configuration successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: 'Test response'
                }
              }]
            });
            _context10.n = 1;
            return generator.validateConfiguration();
          case 1:
            result = _context10.v;
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
    it('should handle API configuration errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error('Invalid API key'));
            _context11.n = 1;
            return generator.validateConfiguration();
          case 1:
            result = _context11.v;
            expect(result.valid).toBe(false);
            expect(result.error).toContain('Terry-enhanced');
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
  });
  describe('edge cases and error handling', function () {
    it('should handle empty tweet analyses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            _context12.n = 1;
            return expect(generator.generateArticle(_objectSpread(_objectSpread({}, mockGenerationInput), {}, {
              tweetAnalyses: []
            }))).rejects.toThrow();
          case 1:
            return _context12.a(2);
        }
      }, _callee12);
    })));
    it('should handle very short content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var shortContent, i, content, result;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            setupMocksForGeneration(4);
            shortContent = 'Brief.';
            mockOpenAI.chat.completions.create.mockClear();

            // Mock short responses for all sections
            for (i = 0; i < 5; i++) {
              content = i < 4 ? shortContent : JSON.stringify(mockMetadataResponse);
              mockOpenAI.chat.completions.create.mockResolvedValueOnce({
                choices: [{
                  message: {
                    content: content
                  }
                }]
              });
            }
            _context13.n = 1;
            return generator.generateArticle(mockGenerationInput);
          case 1:
            result = _context13.v;
            expect(result.content.wordCount).toBeGreaterThan(0);
            expect(result.content.sections).toHaveLength(4);
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
    it('should handle different briefing types', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var briefingTypes, _i2, _briefingTypes, briefingType, result;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            briefingTypes = ['MORNING', 'AFTERNOON', 'EVENING', 'WEEKEND', 'SPECIAL'];
            _i2 = 0, _briefingTypes = briefingTypes;
          case 1:
            if (!(_i2 < _briefingTypes.length)) {
              _context14.n = 4;
              break;
            }
            briefingType = _briefingTypes[_i2];
            setupMocksForGeneration(4);
            _context14.n = 2;
            return generator.generateArticle(_objectSpread(_objectSpread({}, mockGenerationInput), {}, {
              briefingType: briefingType
            }));
          case 2:
            result = _context14.v;
            expect(result.briefingType).toBe(briefingType);
          case 3:
            _i2++;
            _context14.n = 1;
            break;
          case 4:
            return _context14.a(2);
        }
      }, _callee14);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,