72c9e00b63dd42bde355d1a245cb292f
/* istanbul ignore next */
function cov_2lq8p0nv4q() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/monitoring/dashboard/route.ts";
  var hash = "ca6bb7f3b3603c8ed841426c9ee25a0bae1ebf4e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/monitoring/dashboard/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 31
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "1": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "2": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 168,
          column: 3
        }
      },
      "3": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 49
        }
      },
      "4": {
        start: {
          line: 33,
          column: 19
        },
        end: {
          line: 37,
          column: 6
        }
      },
      "5": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 68
        }
      },
      "6": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 67
        }
      },
      "7": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 74
        }
      },
      "8": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "9": {
        start: {
          line: 110,
          column: 63
        },
        end: {
          line: 117,
          column: 7
        }
      },
      "10": {
        start: {
          line: 120,
          column: 75
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "11": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 154,
          column: 5
        }
      },
      "12": {
        start: {
          line: 150,
          column: 6
        },
        end: {
          line: 153,
          column: 8
        }
      },
      "13": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 156,
          column: 39
        }
      },
      "14": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "15": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 167,
          column: 6
        }
      },
      "16": {
        start: {
          line: 176,
          column: 2
        },
        end: {
          line: 225,
          column: 3
        }
      },
      "17": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 177,
          column: 52
        }
      },
      "18": {
        start: {
          line: 180,
          column: 21
        },
        end: {
          line: 186,
          column: 14
        }
      },
      "19": {
        start: {
          line: 187,
          column: 25
        },
        end: {
          line: 189,
          column: 5
        }
      },
      "20": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 188,
          column: 76
        }
      },
      "21": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 196,
          column: 7
        }
      },
      "22": {
        start: {
          line: 191,
          column: 57
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "23": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 206,
          column: 20
        }
      },
      "24": {
        start: {
          line: 199,
          column: 13
        },
        end: {
          line: 199,
          column: 71
        }
      },
      "25": {
        start: {
          line: 203,
          column: 19
        },
        end: {
          line: 203,
          column: 76
        }
      },
      "26": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 213,
          column: 7
        }
      },
      "27": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 54
        }
      },
      "28": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 224,
          column: 6
        }
      },
      "29": {
        start: {
          line: 236,
          column: 2
        },
        end: {
          line: 242,
          column: 3
        }
      },
      "30": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 241,
          column: 6
        }
      },
      "31": {
        start: {
          line: 244,
          column: 23
        },
        end: {
          line: 246,
          column: 10
        }
      },
      "32": {
        start: {
          line: 245,
          column: 15
        },
        end: {
          line: 245,
          column: 41
        }
      },
      "33": {
        start: {
          line: 247,
          column: 25
        },
        end: {
          line: 249,
          column: 10
        }
      },
      "34": {
        start: {
          line: 248,
          column: 15
        },
        end: {
          line: 248,
          column: 43
        }
      },
      "35": {
        start: {
          line: 250,
          column: 24
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "36": {
        start: {
          line: 251,
          column: 15
        },
        end: {
          line: 251,
          column: 42
        }
      },
      "37": {
        start: {
          line: 257,
          column: 2
        },
        end: {
          line: 266,
          column: 3
        }
      },
      "38": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 258,
          column: 26
        }
      },
      "39": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 259,
          column: 82
        }
      },
      "40": {
        start: {
          line: 260,
          column: 9
        },
        end: {
          line: 266,
          column: 3
        }
      },
      "41": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 25
        }
      },
      "42": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 78
        }
      },
      "43": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 264,
          column: 24
        }
      },
      "44": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 53
        }
      },
      "45": {
        start: {
          line: 268,
          column: 2
        },
        end: {
          line: 272,
          column: 4
        }
      },
      "46": {
        start: {
          line: 285,
          column: 22
        },
        end: {
          line: 289,
          column: 3
        }
      },
      "47": {
        start: {
          line: 291,
          column: 23
        },
        end: {
          line: 291,
          column: 67
        }
      },
      "48": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 295,
          column: 17
        }
      },
      "49": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 299,
          column: 17
        }
      },
      "50": {
        start: {
          line: 304,
          column: 2
        },
        end: {
          line: 315,
          column: 3
        }
      },
      "51": {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 309,
          column: 24
        }
      },
      "52": {
        start: {
          line: 310,
          column: 9
        },
        end: {
          line: 315,
          column: 3
        }
      },
      "53": {
        start: {
          line: 312,
          column: 4
        },
        end: {
          line: 312,
          column: 24
        }
      },
      "54": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 24
        }
      },
      "55": {
        start: {
          line: 317,
          column: 2
        },
        end: {
          line: 322,
          column: 4
        }
      },
      "56": {
        start: {
          line: 330,
          column: 2
        },
        end: {
          line: 375,
          column: 3
        }
      },
      "57": {
        start: {
          line: 331,
          column: 29
        },
        end: {
          line: 331,
          column: 49
        }
      },
      "58": {
        start: {
          line: 332,
          column: 19
        },
        end: {
          line: 338,
          column: 6
        }
      },
      "59": {
        start: {
          line: 342,
          column: 19
        },
        end: {
          line: 359,
          column: 5
        }
      },
      "60": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 366,
          column: 7
        }
      },
      "61": {
        start: {
          line: 368,
          column: 4
        },
        end: {
          line: 374,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 30,
            column: 22
          },
          end: {
            line: 30,
            column: 25
          }
        },
        loc: {
          start: {
            line: 30,
            column: 48
          },
          end: {
            line: 169,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 52
          }
        },
        loc: {
          start: {
            line: 110,
            column: 63
          },
          end: {
            line: 117,
            column: 7
          }
        },
        line: 110
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 120,
            column: 59
          },
          end: {
            line: 120,
            column: 60
          }
        },
        loc: {
          start: {
            line: 120,
            column: 75
          },
          end: {
            line: 129,
            column: 7
          }
        },
        line: 120
      },
      "3": {
        name: "POST",
        decl: {
          start: {
            line: 175,
            column: 22
          },
          end: {
            line: 175,
            column: 26
          }
        },
        loc: {
          start: {
            line: 175,
            column: 49
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 175
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 188,
            column: 19
          },
          end: {
            line: 188,
            column: 20
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 76
          }
        },
        line: 188
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 191,
            column: 37
          },
          end: {
            line: 191,
            column: 38
          }
        },
        loc: {
          start: {
            line: 191,
            column: 57
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 191
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 199,
            column: 6
          },
          end: {
            line: 199,
            column: 7
          }
        },
        loc: {
          start: {
            line: 199,
            column: 13
          },
          end: {
            line: 199,
            column: 71
          }
        },
        line: 199
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        loc: {
          start: {
            line: 203,
            column: 19
          },
          end: {
            line: 203,
            column: 76
          }
        },
        line: 203
      },
      "8": {
        name: "calculateSystemStatus",
        decl: {
          start: {
            line: 231,
            column: 9
          },
          end: {
            line: 231,
            column: 30
          }
        },
        loc: {
          start: {
            line: 235,
            column: 2
          },
          end: {
            line: 273,
            column: 1
          }
        },
        line: 235
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        loc: {
          start: {
            line: 245,
            column: 15
          },
          end: {
            line: 245,
            column: 41
          }
        },
        line: 245
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        loc: {
          start: {
            line: 248,
            column: 15
          },
          end: {
            line: 248,
            column: 43
          }
        },
        line: 248
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 251,
            column: 5
          }
        },
        loc: {
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 42
          }
        },
        line: 251
      },
      "12": {
        name: "calculateSLAStatus",
        decl: {
          start: {
            line: 278,
            column: 9
          },
          end: {
            line: 278,
            column: 27
          }
        },
        loc: {
          start: {
            line: 283,
            column: 2
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 283
      },
      "13": {
        name: "alertsEndpoint",
        decl: {
          start: {
            line: 329,
            column: 22
          },
          end: {
            line: 329,
            column: 36
          }
        },
        loc: {
          start: {
            line: 329,
            column: 59
          },
          end: {
            line: 376,
            column: 1
          }
        },
        line: 329
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 125,
            column: 18
          },
          end: {
            line: 125,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 39
          },
          end: {
            line: 125,
            column: 64
          }
        }, {
          start: {
            line: 125,
            column: 67
          },
          end: {
            line: 125,
            column: 79
          }
        }],
        line: 125
      },
      "1": {
        loc: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "2": {
        loc: {
          start: {
            line: 163,
            column: 17
          },
          end: {
            line: 163,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 163,
            column: 55
          }
        }, {
          start: {
            line: 163,
            column: 58
          },
          end: {
            line: 163,
            column: 73
          }
        }],
        line: 163
      },
      "3": {
        loc: {
          start: {
            line: 193,
            column: 14
          },
          end: {
            line: 193,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 46
          },
          end: {
            line: 193,
            column: 57
          }
        }, {
          start: {
            line: 193,
            column: 60
          },
          end: {
            line: 193,
            column: 68
          }
        }],
        line: 193
      },
      "4": {
        loc: {
          start: {
            line: 194,
            column: 14
          },
          end: {
            line: 194,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 46
          },
          end: {
            line: 194,
            column: 58
          }
        }, {
          start: {
            line: 194,
            column: 61
          },
          end: {
            line: 194,
            column: 65
          }
        }],
        line: 194
      },
      "5": {
        loc: {
          start: {
            line: 195,
            column: 13
          },
          end: {
            line: 195,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 44
          },
          end: {
            line: 195,
            column: 66
          }
        }, {
          start: {
            line: 195,
            column: 69
          },
          end: {
            line: 195,
            column: 73
          }
        }],
        line: 195
      },
      "6": {
        loc: {
          start: {
            line: 198,
            column: 26
          },
          end: {
            line: 206,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 201,
            column: 17
          }
        }, {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 20
          }
        }],
        line: 198
      },
      "7": {
        loc: {
          start: {
            line: 199,
            column: 13
          },
          end: {
            line: 199,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 13
          },
          end: {
            line: 199,
            column: 37
          }
        }, {
          start: {
            line: 199,
            column: 41
          },
          end: {
            line: 199,
            column: 71
          }
        }],
        line: 199
      },
      "8": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 206,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 205,
            column: 10
          },
          end: {
            line: 205,
            column: 21
          }
        }, {
          start: {
            line: 206,
            column: 10
          },
          end: {
            line: 206,
            column: 20
          }
        }],
        line: 202
      },
      "9": {
        loc: {
          start: {
            line: 203,
            column: 19
          },
          end: {
            line: 203,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 19
          },
          end: {
            line: 203,
            column: 51
          }
        }, {
          start: {
            line: 203,
            column: 55
          },
          end: {
            line: 203,
            column: 76
          }
        }],
        line: 203
      },
      "10": {
        loc: {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 220,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 42
          },
          end: {
            line: 220,
            column: 55
          }
        }, {
          start: {
            line: 220,
            column: 58
          },
          end: {
            line: 220,
            column: 73
          }
        }],
        line: 220
      },
      "11": {
        loc: {
          start: {
            line: 236,
            column: 2
          },
          end: {
            line: 242,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 2
          },
          end: {
            line: 242,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "12": {
        loc: {
          start: {
            line: 257,
            column: 2
          },
          end: {
            line: 266,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 2
          },
          end: {
            line: 266,
            column: 3
          }
        }, {
          start: {
            line: 260,
            column: 9
          },
          end: {
            line: 266,
            column: 3
          }
        }],
        line: 257
      },
      "13": {
        loc: {
          start: {
            line: 260,
            column: 9
          },
          end: {
            line: 266,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 9
          },
          end: {
            line: 266,
            column: 3
          }
        }, {
          start: {
            line: 263,
            column: 9
          },
          end: {
            line: 266,
            column: 3
          }
        }],
        line: 260
      },
      "14": {
        loc: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 295,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 294,
            column: 17
          }
        }, {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 295,
            column: 17
          }
        }],
        line: 293
      },
      "15": {
        loc: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 299,
            column: 17
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 8
          },
          end: {
            line: 298,
            column: 17
          }
        }, {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 299,
            column: 17
          }
        }],
        line: 297
      },
      "16": {
        loc: {
          start: {
            line: 304,
            column: 2
          },
          end: {
            line: 315,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 2
          },
          end: {
            line: 315,
            column: 3
          }
        }, {
          start: {
            line: 310,
            column: 9
          },
          end: {
            line: 315,
            column: 3
          }
        }],
        line: 304
      },
      "17": {
        loc: {
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 307,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 4
          },
          end: {
            line: 305,
            column: 51
          }
        }, {
          start: {
            line: 306,
            column: 4
          },
          end: {
            line: 306,
            column: 63
          }
        }, {
          start: {
            line: 307,
            column: 4
          },
          end: {
            line: 307,
            column: 58
          }
        }],
        line: 305
      },
      "18": {
        loc: {
          start: {
            line: 310,
            column: 9
          },
          end: {
            line: 315,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 9
          },
          end: {
            line: 315,
            column: 3
          }
        }, {
          start: {
            line: 313,
            column: 9
          },
          end: {
            line: 315,
            column: 3
          }
        }],
        line: 310
      },
      "19": {
        loc: {
          start: {
            line: 334,
            column: 13
          },
          end: {
            line: 336,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 10
          },
          end: {
            line: 335,
            column: 46
          }
        }, {
          start: {
            line: 336,
            column: 10
          },
          end: {
            line: 336,
            column: 19
          }
        }],
        line: 334
      },
      "20": {
        loc: {
          start: {
            line: 371,
            column: 17
          },
          end: {
            line: 371,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 371,
            column: 42
          },
          end: {
            line: 371,
            column: 55
          }
        }, {
          start: {
            line: 371,
            column: 58
          },
          end: {
            line: 371,
            column: 73
          }
        }],
        line: 371
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ca6bb7f3b3603c8ed841426c9ee25a0bae1ebf4e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2lq8p0nv4q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2lq8p0nv4q();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Pipeline Monitoring Dashboard API
 * Real-time metrics and health status for the Transfer Juice pipeline
 */

import { NextResponse } from "next/server";
import { metricsCollector } from "@/lib/monitoring/pipelineMetrics";
import { CONFIG } from "@/config/pipeline";
import { z } from "zod";

// Request validation schemas
var DashboardRequestSchema =
/* istanbul ignore next */
(cov_2lq8p0nv4q().s[0]++, z.object({
  timeRange: z[
  /* istanbul ignore next */
  "enum"](["1h", "6h", "24h", "7d", "30d"]).optional()[
  /* istanbul ignore next */
  "default"]("24h"),
  services: z.array(z[
  /* istanbul ignore next */
  "enum"](["database", "ai", "twitter", "websocket", "cache"])).optional(),
  includeHistorical: z[
  /* istanbul ignore next */
  "boolean"]().optional()[
  /* istanbul ignore next */
  "default"](true)
}));
var AlertsRequestSchema =
/* istanbul ignore next */
(cov_2lq8p0nv4q().s[1]++, z.object({
  severity: z[
  /* istanbul ignore next */
  "enum"](["low", "medium", "high", "critical"]).optional(),
  limit: z.number().min(1).max(100).optional()[
  /* istanbul ignore next */
  "default"](50),
  since: z.string().datetime().optional()
}));

/**
 * GET /api/monitoring/dashboard
 * Returns comprehensive dashboard data including metrics, health checks, and trends
 */
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}

/**
 * POST /api/monitoring/dashboard/health-check
 * Trigger manual health check for all services
 */
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var _searchParams$get, _ref, searchParams, params, dashboardData, systemStatus, response, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_2lq8p0nv4q().f[0]++;
          cov_2lq8p0nv4q().s[2]++;
          _context.p = 1;
          _ref = (cov_2lq8p0nv4q().s[3]++, new URL(request.url)), searchParams = _ref.searchParams;
          params = (cov_2lq8p0nv4q().s[4]++, DashboardRequestSchema.parse({
            timeRange: searchParams.get("timeRange"),
            services:
            /* istanbul ignore next */
            (_searchParams$get = searchParams.get("services")) === null || _searchParams$get === void 0 ? void 0 :
            /* istanbul ignore next */
            _searchParams$get.split(","),
            includeHistorical: searchParams.get("includeHistorical") === "true"
          }));
          cov_2lq8p0nv4q().s[5]++;
          console.log("📊 Dashboard data requested with params:", params);

          // Get comprehensive dashboard data
          cov_2lq8p0nv4q().s[6]++;
          _context.n = 2;
          return metricsCollector.getDashboardData();
        case 2:
          dashboardData = _context.v;
          // Calculate system status
          systemStatus = (cov_2lq8p0nv4q().s[7]++, calculateSystemStatus(dashboardData.healthChecks)); // Prepare response
          response = (cov_2lq8p0nv4q().s[8]++, {
            timestamp: new Date().toISOString(),
            systemStatus: systemStatus,
            // Current metrics
            metrics: {
              pipeline: {
                averageProcessingTime: dashboardData.currentMetrics.averageProcessingTime,
                successRate: (dashboardData.currentMetrics.successRate * 100).toFixed(2) + "%",
                errorRate: (dashboardData.currentMetrics.errorRate * 100).toFixed(2) + "%",
                throughput: dashboardData.currentMetrics.throughput
              },
              quality: {
                averageScore: dashboardData.currentMetrics.averageQualityScore.toFixed(1),
                passRate: (dashboardData.currentMetrics.qualityPassRate * 100).toFixed(2) + "%",
                humanReviewRate: (dashboardData.currentMetrics.humanReviewRate * 100).toFixed(2) + "%"
              },
              performance: {
                memoryUsage: dashboardData.currentMetrics.memoryUsage.toFixed(1) + "%",
                cpuUsage: dashboardData.currentMetrics.cpuUsage.toFixed(1) + "%",
                cacheHitRate: (dashboardData.currentMetrics.cacheHitRate * 100).toFixed(2) + "%"
              },
              external: {
                databaseResponseTime: dashboardData.currentMetrics.databaseResponseTime + "ms",
                aiServiceResponseTime: dashboardData.currentMetrics.aiServiceResponseTime + "ms",
                twitterApiResponseTime: dashboardData.currentMetrics.twitterApiResponseTime + "ms"
              },
              userExperience: {
                websocketConnections: dashboardData.currentMetrics.websocketConnections,
                feedUpdateLatency: dashboardData.currentMetrics.feedUpdateLatency.toFixed(2) + "s"
              },
              content: {
                totalFeedItems: dashboardData.currentMetrics.totalFeedItems,
                partnerContentRatio: (dashboardData.currentMetrics.partnerContentRatio * 100).toFixed(1) + "%",
                uniqueTagsUsed: dashboardData.currentMetrics.uniqueTagsUsed
              }
            },
            // Health status for each service
            healthChecks: dashboardData.healthChecks.map(function (check) {
              /* istanbul ignore next */
              cov_2lq8p0nv4q().f[1]++;
              cov_2lq8p0nv4q().s[9]++;
              return {
                service: check.service,
                status: check.status,
                responseTime: check.responseTime + "ms",
                lastChecked: check.timestamp.toISOString(),
                details: check.details,
                error: check.error
              };
            }),
            // Active pipeline executions
            activeExecutions: dashboardData.activeExecutions.map(function (execution) {
              /* istanbul ignore next */
              cov_2lq8p0nv4q().f[2]++;
              cov_2lq8p0nv4q().s[10]++;
              return {
                id: execution.executionId,
                stage: execution.stage,
                status: execution.status,
                startTime: execution.startTime.toISOString(),
                duration: execution.duration ?
                /* istanbul ignore next */
                (cov_2lq8p0nv4q().b[0][0]++, execution.duration + "ms") :
                /* istanbul ignore next */
                (cov_2lq8p0nv4q().b[0][1]++, "Running..."),
                itemsProcessed: execution.itemsProcessed,
                itemsSuccessful: execution.itemsSuccessful,
                itemsFailed: execution.itemsFailed
              };
            }),
            // Recent alerts
            alerts: dashboardData.recentAlerts,
            // Configuration status
            configuration: {
              environment: CONFIG.env.NODE_ENV,
              terryVoiceThreshold: CONFIG.quality.thresholds.terryVoice,
              qualityThreshold: CONFIG.quality.autoPublishThreshold,
              processingTimeout: CONFIG.performance.maxProcessingTime + "ms",
              cacheEnabled: CONFIG.performance.cacheEnabled,
              websocketHeartbeat: CONFIG.performance.websocketHeartbeat + "ms"
            },
            // SLA status
            slaStatus: calculateSLAStatus(dashboardData.currentMetrics)
          }); // Include historical trends if requested
          cov_2lq8p0nv4q().s[11]++;
          if (params.includeHistorical) {
            /* istanbul ignore next */
            cov_2lq8p0nv4q().b[1][0]++;
            cov_2lq8p0nv4q().s[12]++;
            response.historical = {
              trends: dashboardData.historicalTrends,
              timeRange: params.timeRange
            };
          } else
          /* istanbul ignore next */
          {
            cov_2lq8p0nv4q().b[1][1]++;
          }
          cov_2lq8p0nv4q().s[13]++;
          return _context.a(2, NextResponse.json(response));
        case 3:
          _context.p = 3;
          _t = _context.v;
          cov_2lq8p0nv4q().s[14]++;
          console.error("❌ Dashboard API error:",
          /* istanbul ignore next */
          _t);
          cov_2lq8p0nv4q().s[15]++;
          return _context.a(2, NextResponse.json({
            error: "Failed to fetch dashboard data",
            details:
            /* istanbul ignore next */
            _t instanceof Error ?
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[2][0]++,
            /* istanbul ignore next */
            _t.message) :
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[2][1]++, "Unknown error"),
            timestamp: new Date().toISOString()
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 3]]);
  }));
  return _GET.apply(this, arguments);
}
export
/* istanbul ignore next */
function POST(_x2) {
  return _POST.apply(this, arguments);
}

/**
 * Calculate overall system status based on health checks
 */
/* istanbul ignore next */
function _POST() {
  _POST = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(request)
  /* istanbul ignore next */
  {
    var services, healthChecks, results, overallStatus, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_2lq8p0nv4q().f[3]++;
          cov_2lq8p0nv4q().s[16]++;
          _context2.p = 1;
          cov_2lq8p0nv4q().s[17]++;
          console.log("🔄 Manual health check triggered");

          // Trigger health checks for all services
          services = (cov_2lq8p0nv4q().s[18]++, ["database", "ai", "twitter", "websocket", "cache"]);
          cov_2lq8p0nv4q().s[19]++;
          _context2.n = 2;
          return Promise.allSettled(services.map(function (service) {
            /* istanbul ignore next */
            cov_2lq8p0nv4q().f[4]++;
            cov_2lq8p0nv4q().s[20]++;
            return metricsCollector.checkServiceHealth(service);
          }));
        case 2:
          healthChecks = _context2.v;
          results = (cov_2lq8p0nv4q().s[21]++, healthChecks.map(function (result, index) {
            /* istanbul ignore next */
            var _result$reason;
            cov_2lq8p0nv4q().f[5]++;
            cov_2lq8p0nv4q().s[22]++;
            return {
              service: services[index],
              status: result.status === "fulfilled" ?
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[3][0]++, "completed") :
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[3][1]++, "failed"),
              result: result.status === "fulfilled" ?
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[4][0]++, result.value) :
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[4][1]++, null),
              error: result.status === "rejected" ?
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[5][0]++, (_result$reason = result.reason) === null || _result$reason === void 0 ? void 0 :
              /* istanbul ignore next */
              _result$reason.message) :
              /* istanbul ignore next */
              (cov_2lq8p0nv4q().b[5][1]++, null)
            };
          }));
          overallStatus = (cov_2lq8p0nv4q().s[23]++, results.every(function (r) {
            /* istanbul ignore next */
            var _r$result;
            cov_2lq8p0nv4q().f[6]++;
            cov_2lq8p0nv4q().s[24]++;
            return /* istanbul ignore next */(cov_2lq8p0nv4q().b[7][0]++, r.status === "completed") &&
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[7][1]++,
            /* istanbul ignore next */
            ((_r$result = r.result) === null || _r$result === void 0 ? void 0 :
            /* istanbul ignore next */
            _r$result.status) === "healthy");
          }) ?
          /* istanbul ignore next */
          (cov_2lq8p0nv4q().b[6][0]++, "healthy") :
          /* istanbul ignore next */
          (cov_2lq8p0nv4q().b[6][1]++, results.some(function (r) {
            /* istanbul ignore next */
            var _r$result2;
            cov_2lq8p0nv4q().f[7]++;
            cov_2lq8p0nv4q().s[25]++;
            return /* istanbul ignore next */(cov_2lq8p0nv4q().b[9][0]++,
            /* istanbul ignore next */
            ((_r$result2 = r.result) === null || _r$result2 === void 0 ? void 0 :
            /* istanbul ignore next */
            _r$result2.status) === "unhealthy") ||
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[9][1]++, r.status === "failed");
          }) ?
          /* istanbul ignore next */
          (cov_2lq8p0nv4q().b[8][0]++, "unhealthy") :
          /* istanbul ignore next */
          (cov_2lq8p0nv4q().b[8][1]++, "degraded")));
          cov_2lq8p0nv4q().s[26]++;
          return _context2.a(2, NextResponse.json({
            timestamp: new Date().toISOString(),
            overallStatus: overallStatus,
            results: results,
            message: "Health check completed"
          }));
        case 3:
          _context2.p = 3;
          _t2 = _context2.v;
          cov_2lq8p0nv4q().s[27]++;
          console.error("❌ Health check API error:",
          /* istanbul ignore next */
          _t2);
          cov_2lq8p0nv4q().s[28]++;
          return _context2.a(2, NextResponse.json({
            error: "Health check failed",
            details:
            /* istanbul ignore next */
            _t2 instanceof Error ?
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[10][0]++,
            /* istanbul ignore next */
            _t2.message) :
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[10][1]++, "Unknown error"),
            timestamp: new Date().toISOString()
          }, {
            status: 500
          }));
      }
    }, _callee2, null, [[1, 3]]);
  }));
  return _POST.apply(this, arguments);
}
function calculateSystemStatus(healthChecks) {
  /* istanbul ignore next */
  cov_2lq8p0nv4q().f[8]++;
  cov_2lq8p0nv4q().s[29]++;
  if (healthChecks.length === 0) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().b[11][0]++;
    cov_2lq8p0nv4q().s[30]++;
    return {
      overall: "unhealthy",
      summary: "No health check data available",
      criticalIssues: 1
    };
  } else
  /* istanbul ignore next */
  {
    cov_2lq8p0nv4q().b[11][1]++;
  }
  var healthyCount =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[31]++, healthChecks.filter(function (check) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().f[9]++;
    cov_2lq8p0nv4q().s[32]++;
    return check.status === "healthy";
  }).length);
  var unhealthyCount =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[33]++, healthChecks.filter(function (check) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().f[10]++;
    cov_2lq8p0nv4q().s[34]++;
    return check.status === "unhealthy";
  }).length);
  var degradedCount =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[35]++, healthChecks.filter(function (check) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().f[11]++;
    cov_2lq8p0nv4q().s[36]++;
    return check.status === "degraded";
  }).length);
  var overall;
  var summary;
  /* istanbul ignore next */
  cov_2lq8p0nv4q().s[37]++;
  if (unhealthyCount > 0) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().b[12][0]++;
    cov_2lq8p0nv4q().s[38]++;
    overall = "unhealthy";
    /* istanbul ignore next */
    cov_2lq8p0nv4q().s[39]++;
    summary =
    /* istanbul ignore next */
    "".concat(unhealthyCount, " service(s) unhealthy, ").concat(degradedCount, " degraded");
  } else {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().b[12][1]++;
    cov_2lq8p0nv4q().s[40]++;
    if (degradedCount > 0) {
      /* istanbul ignore next */
      cov_2lq8p0nv4q().b[13][0]++;
      cov_2lq8p0nv4q().s[41]++;
      overall = "degraded";
      /* istanbul ignore next */
      cov_2lq8p0nv4q().s[42]++;
      summary =
      /* istanbul ignore next */
      "".concat(degradedCount, " service(s) degraded, ").concat(healthyCount, " healthy");
    } else {
      /* istanbul ignore next */
      cov_2lq8p0nv4q().b[13][1]++;
      cov_2lq8p0nv4q().s[43]++;
      overall = "healthy";
      /* istanbul ignore next */
      cov_2lq8p0nv4q().s[44]++;
      summary =
      /* istanbul ignore next */
      "All ".concat(healthyCount, " services healthy");
    }
  }
  /* istanbul ignore next */
  cov_2lq8p0nv4q().s[45]++;
  return {
    overall: overall,
    summary: summary,
    criticalIssues: unhealthyCount
  };
}

/**
 * Calculate SLA compliance status
 */
function calculateSLAStatus(metrics) {
  /* istanbul ignore next */
  cov_2lq8p0nv4q().f[12]++;
  // SLA targets
  var SLA_TARGETS =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[46]++, {
    availability: 0.999,
    // 99.9%
    avgResponseTime: 200,
    // 200ms
    qualityPassRate: 0.85 // 85%
  });
  var availability =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[47]++, (metrics.successRate * 100).toFixed(2) + "%");
  var performance =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[48]++, metrics.averageProcessingTime < SLA_TARGETS.avgResponseTime ?
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[14][0]++, "Meeting") :
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[14][1]++, "At Risk"));
  var quality =
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().s[49]++, metrics.qualityPassRate >= SLA_TARGETS.qualityPassRate ?
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[15][0]++, "Meeting") :
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[15][1]++, "At Risk"));

  // Determine overall SLA status
  var overall;
  /* istanbul ignore next */
  cov_2lq8p0nv4q().s[50]++;
  if (
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[17][0]++, metrics.successRate >= SLA_TARGETS.availability) &&
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[17][1]++, metrics.averageProcessingTime < SLA_TARGETS.avgResponseTime) &&
  /* istanbul ignore next */
  (cov_2lq8p0nv4q().b[17][2]++, metrics.qualityPassRate >= SLA_TARGETS.qualityPassRate)) {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().b[16][0]++;
    cov_2lq8p0nv4q().s[51]++;
    overall = "meeting";
  } else {
    /* istanbul ignore next */
    cov_2lq8p0nv4q().b[16][1]++;
    cov_2lq8p0nv4q().s[52]++;
    if (metrics.successRate >= 0.995) {
      /* istanbul ignore next */
      cov_2lq8p0nv4q().b[18][0]++;
      cov_2lq8p0nv4q().s[53]++;
      // Still above 99.5%
      overall = "at_risk";
    } else {
      /* istanbul ignore next */
      cov_2lq8p0nv4q().b[18][1]++;
      cov_2lq8p0nv4q().s[54]++;
      overall = "failing";
    }
  }
  /* istanbul ignore next */
  cov_2lq8p0nv4q().s[55]++;
  return {
    availability: availability,
    performance: performance,
    quality: quality,
    overall: overall
  };
}

/**
 * GET /api/monitoring/dashboard/alerts
 * Get recent alerts with filtering
 */
export
/* istanbul ignore next */
function alertsEndpoint(_x3) {
  return _alertsEndpoint.apply(this, arguments);
}
/* istanbul ignore next */
function _alertsEndpoint() {
  _alertsEndpoint = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(request)
  /* istanbul ignore next */
  {
    var _ref2, searchParams, params, alerts, _t3;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_2lq8p0nv4q().f[13]++;
          cov_2lq8p0nv4q().s[56]++;
          _context3.p = 1;
          _ref2 = (cov_2lq8p0nv4q().s[57]++, new URL(request.url)), searchParams = _ref2.searchParams;
          params = (cov_2lq8p0nv4q().s[58]++, AlertsRequestSchema.parse({
            severity: searchParams.get("severity"),
            limit: searchParams.get("limit") ?
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[19][0]++, parseInt(searchParams.get("limit"))) :
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[19][1]++, undefined),
            since: searchParams.get("since")
          })); // This would query your alerts database
          // For now, returning mock data
          alerts = (cov_2lq8p0nv4q().s[59]++, [{
            id: "alert_1",
            severity: "high",
            message: "Pipeline processing time exceeded threshold",
            timestamp: new Date().toISOString(),
            service: "pipeline",
            resolved: false
          }, {
            id: "alert_2",
            severity: "medium",
            message: "Quality score below 85% threshold",
            timestamp: new Date(Date.now() - 300000).toISOString(),
            // 5 minutes ago
            service: "ai",
            resolved: true
          }]);
          cov_2lq8p0nv4q().s[60]++;
          return _context3.a(2, NextResponse.json({
            alerts: alerts.slice(0, params.limit),
            total: alerts.length,
            params: params,
            timestamp: new Date().toISOString()
          }));
        case 2:
          _context3.p = 2;
          _t3 = _context3.v;
          cov_2lq8p0nv4q().s[61]++;
          return _context3.a(2, NextResponse.json({
            error: "Failed to fetch alerts",
            details:
            /* istanbul ignore next */
            _t3 instanceof Error ?
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[20][0]++,
            /* istanbul ignore next */
            _t3.message) :
            /* istanbul ignore next */
            (cov_2lq8p0nv4q().b[20][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee3, null, [[1, 2]]);
  }));
  return _alertsEndpoint.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,