10a72fe368f9f0089107490878541bb1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationResultSchema = exports.QualityCheckSchema = exports.ContentQualityValidator = void 0;
var _openai = _interopRequireDefault(require("openai"));
var _zod = require("zod");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Content Quality Validator
 * Multi-layered validation system for AI-generated content with human review triggers
 */ // TODO: Fix circular dependency with terry-style
// import { applyTerryStyle } from '@/lib/terry-style';
// Quality validation schemas
var QualityCheckSchema = exports.QualityCheckSchema = _zod.z.object({
  category: _zod.z["enum"](["factual_accuracy", "brand_voice", "content_safety", "legal_compliance", "editorial_quality", "accessibility"]),
  score: _zod.z.number().min(0).max(100),
  passed: _zod.z["boolean"](),
  issues: _zod.z.array(_zod.z.object({
    severity: _zod.z["enum"](["low", "medium", "high", "critical"]),
    type: _zod.z.string(),
    description: _zod.z.string(),
    line: _zod.z.number().optional(),
    suggestion: _zod.z.string().optional()
  })),
  checkedAt: _zod.z.date(),
  checker: _zod.z["enum"](["ai", "human", "automated"])
});
var ValidationResultSchema = exports.ValidationResultSchema = _zod.z.object({
  overallScore: _zod.z.number().min(0).max(100),
  passed: _zod.z["boolean"](),
  requiresHumanReview: _zod.z["boolean"](),
  blockers: _zod.z.array(_zod.z.string()),
  // Critical issues preventing publication
  warnings: _zod.z.array(_zod.z.string()),
  // Non-blocking issues
  checks: _zod.z.array(QualityCheckSchema),
  recommendations: _zod.z.array(_zod.z.object({
    type: _zod.z["enum"](["improvement", "fix_required", "suggestion"]),
    description: _zod.z.string(),
    priority: _zod.z["enum"](["low", "medium", "high"])
  })),
  validatedAt: _zod.z.date(),
  validationTime: _zod.z.number()
});
var ContentQualityValidator = exports.ContentQualityValidator = /*#__PURE__*/function () {
  function ContentQualityValidator(config) {
    _classCallCheck(this, ContentQualityValidator);
    // Quality thresholds
    _defineProperty(this, "QUALITY_THRESHOLDS", {
      factualAccuracy: {
        min: 85,
        human: 75
      },
      brandVoice: {
        min: 80,
        human: 70
      },
      contentSafety: {
        min: 95,
        human: 90
      },
      legalCompliance: {
        min: 90,
        human: 85
      },
      editorialQuality: {
        min: 80,
        human: 70
      },
      accessibility: {
        min: 85,
        human: 80
      }
    });
    // Content safety patterns to check
    _defineProperty(this, "SAFETY_PATTERNS", [{
      pattern: /\b(libel|defamation|slander)\b/i,
      severity: "critical",
      description: "Potential legal issues"
    }, {
      pattern: /\b(racist|sexist|homophobic)\b/i,
      severity: "critical",
      description: "Discriminatory language"
    }, {
      pattern: /\b(fuck|shit|cunt)\b/i,
      severity: "medium",
      description: "Profanity detected"
    }, {
      pattern: /\$\d+/g,
      severity: "low",
      description: "Consider using £ for UK audience"
    }]);
    this.config = _objectSpread({
      model: "gpt-4.1",
      strictMode: false,
      autoReviewThreshold: 85,
      terryMinimumScore: 75
    }, config);
    this.openai = new _openai["default"]({
      apiKey: this.config.openaiApiKey
    });
  }

  /**
   * Perform comprehensive content validation
   */
  return _createClass(ContentQualityValidator, [{
    key: "validateContent",
    value: (function () {
      var _validateContent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(article) {
        var startTime, _yield$Promise$all, _yield$Promise$all2, factualCheck, brandVoiceCheck, safetyCheck, legalCheck, editorialCheck, accessibilityCheck, checks, overallScore, passed, requiresHumanReview, _this$categorizeIssue, blockers, warnings, recommendations, result, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              startTime = Date.now();
              _context.p = 1;
              _context.n = 2;
              return Promise.all([this.checkFactualAccuracy(article), this.checkBrandVoice(article), this.checkContentSafety(article), this.checkLegalCompliance(article), this.checkEditorialQuality(article), this.checkAccessibility(article)]);
            case 2:
              _yield$Promise$all = _context.v;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 6);
              factualCheck = _yield$Promise$all2[0];
              brandVoiceCheck = _yield$Promise$all2[1];
              safetyCheck = _yield$Promise$all2[2];
              legalCheck = _yield$Promise$all2[3];
              editorialCheck = _yield$Promise$all2[4];
              accessibilityCheck = _yield$Promise$all2[5];
              checks = [factualCheck, brandVoiceCheck, safetyCheck, legalCheck, editorialCheck, accessibilityCheck]; // Calculate overall score
              overallScore = this.calculateOverallScore(checks); // Determine if content passes validation
              passed = this.determinePassStatus(checks, overallScore); // Check if human review is required
              requiresHumanReview = this.requiresHumanReview(checks, overallScore); // Extract blockers and warnings
              _this$categorizeIssue = this.categorizeIssues(checks), blockers = _this$categorizeIssue.blockers, warnings = _this$categorizeIssue.warnings; // Generate recommendations
              recommendations = this.generateRecommendations(checks, article);
              result = {
                overallScore: overallScore,
                passed: passed,
                requiresHumanReview: requiresHumanReview,
                blockers: blockers,
                warnings: warnings,
                checks: checks,
                recommendations: recommendations,
                validatedAt: new Date(),
                validationTime: Date.now() - startTime
              };
              return _context.a(2, ValidationResultSchema.parse(result));
            case 3:
              _context.p = 3;
              _t = _context.v;
              throw new Error("Content validation failed: ".concat(_t instanceof Error ? _t.message : "Unknown error"));
            case 4:
              return _context.a(2);
          }
        }, _callee, this, [[1, 3]]);
      }));
      function validateContent(_x) {
        return _validateContent.apply(this, arguments);
      }
      return validateContent;
    }()
    /**
     * Check factual accuracy using AI
     */
    )
  }, {
    key: "checkFactualAccuracy",
    value: (function () {
      var _checkFactualAccuracy = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(article) {
        var _response$choices$;
        var content, response, result;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              content = article.content.sections.map(function (s) {
                return s.content;
              }).join("\n\n");
              _context2.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "You are a fact-checking expert for football transfer news. Check content for factual accuracy.\n\nReturn JSON with:\n- score: 0-100 (factual accuracy)\n- issues: array of {severity, type, description, suggestion}\n\nFocus on:\n- Transfer fee accuracy\n- Player/club name accuracy  \n- Timeline consistency\n- Contradictory statements\n- Unverifiable claims"
                }, {
                  role: "user",
                  content: "Check this transfer article for factual accuracy:\n\n".concat(content)
                }],
                max_tokens: 800,
                temperature: 0.2,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context2.v;
              result = JSON.parse(((_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 || (_response$choices$ = _response$choices$.message) === null || _response$choices$ === void 0 ? void 0 : _response$choices$.content) || "{}");
              return _context2.a(2, {
                category: "factual_accuracy",
                score: result.score || 0,
                passed: (result.score || 0) >= this.QUALITY_THRESHOLDS.factualAccuracy.min,
                issues: result.issues || [],
                checkedAt: new Date(),
                checker: "ai"
              });
          }
        }, _callee2, this);
      }));
      function checkFactualAccuracy(_x2) {
        return _checkFactualAccuracy.apply(this, arguments);
      }
      return checkFactualAccuracy;
    }()
    /**
     * Check brand voice consistency
     */
    )
  }, {
    key: "checkBrandVoice",
    value: (function () {
      var _checkBrandVoice = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(article) {
        var _response$choices$2;
        var content, response, result;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              content = article.content.sections.map(function (s) {
                return s.content;
              }).join("\n\n");
              _context3.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "You are evaluating content for Terry/Joel Golby brand voice consistency.\n\nTerry's voice characteristics:\n- Acerbic, witty, emotionally intelligent\n- Parenthetical asides\n- Specific, absurd details\n- Weaponised irritation with empathy\n- Balance of chaos and competence\n\nReturn JSON with:\n- score: 0-100 (brand voice consistency)\n- issues: array of issues where voice is off-brand"
                }, {
                  role: "user",
                  content: "Evaluate this content for Terry brand voice:\n\n".concat(content)
                }],
                max_tokens: 600,
                temperature: 0.3,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context3.v;
              result = JSON.parse(((_response$choices$2 = response.choices[0]) === null || _response$choices$2 === void 0 || (_response$choices$2 = _response$choices$2.message) === null || _response$choices$2 === void 0 ? void 0 : _response$choices$2.content) || "{}");
              return _context3.a(2, {
                category: "brand_voice",
                score: Math.max(result.score || 0, article.content.terryScore),
                passed: (result.score || 0) >= this.QUALITY_THRESHOLDS.brandVoice.min,
                issues: result.issues || [],
                checkedAt: new Date(),
                checker: "ai"
              });
          }
        }, _callee3, this);
      }));
      function checkBrandVoice(_x3) {
        return _checkBrandVoice.apply(this, arguments);
      }
      return checkBrandVoice;
    }()
    /**
     * Check content safety
     */
    )
  }, {
    key: "checkContentSafety",
    value: (function () {
      var _checkContentSafety = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(article) {
        var _response$choices$3;
        var content, issues, _iterator, _step, safety, matches, response, aiResult, score;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              content = article.content.sections.map(function (s) {
                return s.content;
              }).join("\n\n");
              issues = []; // Run pattern-based safety checks
              _iterator = _createForOfIteratorHelper(this.SAFETY_PATTERNS);
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  safety = _step.value;
                  matches = content.match(safety.pattern);
                  if (matches) {
                    issues.push({
                      severity: safety.severity,
                      type: "safety_pattern",
                      description: safety.description,
                      suggestion: "Review and modify flagged content"
                    });
                  }
                }

                // AI-based safety check
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              _context4.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "Check content for safety issues. Return JSON with:\n- score: 0-100 (safety rating)\n- issues: array of safety concerns\n\nCheck for:\n- Discriminatory language\n- Potential legal issues  \n- Inappropriate content\n- Harmful misinformation"
                }, {
                  role: "user",
                  content: "Safety check this content:\n\n".concat(content)
                }],
                max_tokens: 400,
                temperature: 0.1,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context4.v;
              aiResult = JSON.parse(((_response$choices$3 = response.choices[0]) === null || _response$choices$3 === void 0 || (_response$choices$3 = _response$choices$3.message) === null || _response$choices$3 === void 0 ? void 0 : _response$choices$3.content) || "{}");
              issues.push.apply(issues, _toConsumableArray(aiResult.issues || []));
              score = Math.min(aiResult.score || 100, issues.length === 0 ? 100 : 90);
              return _context4.a(2, {
                category: "content_safety",
                score: score,
                passed: score >= this.QUALITY_THRESHOLDS.contentSafety.min,
                issues: issues,
                checkedAt: new Date(),
                checker: "ai"
              });
          }
        }, _callee4, this);
      }));
      function checkContentSafety(_x4) {
        return _checkContentSafety.apply(this, arguments);
      }
      return checkContentSafety;
    }()
    /**
     * Check legal compliance
     */
    )
  }, {
    key: "checkLegalCompliance",
    value: (function () {
      var _checkLegalCompliance = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(article) {
        var _response$choices$4;
        var content, response, result;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              content = article.content.sections.map(function (s) {
                return s.content;
              }).join("\n\n");
              _context5.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "Check content for legal compliance issues. Return JSON with:\n- score: 0-100 (legal safety)\n- issues: array of potential legal issues\n\nFocus on:\n- Potential libel/defamation\n- Unsubstantiated claims about individuals\n- Copyright concerns\n- Privacy violations\n- Misleading statements"
                }, {
                  role: "user",
                  content: "Legal compliance check:\n\n".concat(content)
                }],
                max_tokens: 500,
                temperature: 0.1,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context5.v;
              result = JSON.parse(((_response$choices$4 = response.choices[0]) === null || _response$choices$4 === void 0 || (_response$choices$4 = _response$choices$4.message) === null || _response$choices$4 === void 0 ? void 0 : _response$choices$4.content) || "{}");
              return _context5.a(2, {
                category: "legal_compliance",
                score: result.score || 0,
                passed: (result.score || 0) >= this.QUALITY_THRESHOLDS.legalCompliance.min,
                issues: result.issues || [],
                checkedAt: new Date(),
                checker: "ai"
              });
          }
        }, _callee5, this);
      }));
      function checkLegalCompliance(_x5) {
        return _checkLegalCompliance.apply(this, arguments);
      }
      return checkLegalCompliance;
    }()
    /**
     * Check editorial quality
     */
    )
  }, {
    key: "checkEditorialQuality",
    value: (function () {
      var _checkEditorialQuality = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(article) {
        var issues, score, sectionLengths, imbalanced;
        return _regenerator().w(function (_context6) {
          while (1) switch (_context6.n) {
            case 0:
              issues = [];
              score = 100; // Basic quality checks
              if (article.content.wordCount < 300) {
                issues.push({
                  severity: "medium",
                  type: "length",
                  description: "Article may be too short for substantive coverage",
                  suggestion: "Consider adding more detail or context"
                });
                score -= 15;
              }
              if (article.content.wordCount > 1500) {
                issues.push({
                  severity: "low",
                  type: "length",
                  description: "Article may be too long for target audience",
                  suggestion: "Consider breaking into multiple pieces"
                });
                score -= 5;
              }

              // Check section balance
              sectionLengths = article.content.sections.map(function (s) {
                return s.content.length;
              });
              imbalanced = Math.max.apply(Math, _toConsumableArray(sectionLengths)) > Math.min.apply(Math, _toConsumableArray(sectionLengths)) * 3;
              if (imbalanced) {
                issues.push({
                  severity: "low",
                  type: "structure",
                  description: "Sections appear unbalanced in length",
                  suggestion: "Redistribute content more evenly"
                });
                score -= 10;
              }
              return _context6.a(2, {
                category: "editorial_quality",
                score: Math.max(score, 0),
                passed: score >= this.QUALITY_THRESHOLDS.editorialQuality.min,
                issues: issues,
                checkedAt: new Date(),
                checker: "automated"
              });
          }
        }, _callee6, this);
      }));
      function checkEditorialQuality(_x6) {
        return _checkEditorialQuality.apply(this, arguments);
      }
      return checkEditorialQuality;
    }()
    /**
     * Check accessibility
     */
    )
  }, {
    key: "checkAccessibility",
    value: (function () {
      var _checkAccessibility = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(article) {
        var issues, score, avgWordsPerSentence;
        return _regenerator().w(function (_context7) {
          while (1) switch (_context7.n) {
            case 0:
              issues = [];
              score = 100; // Check readability
              avgWordsPerSentence = this.calculateAverageWordsPerSentence(article);
              if (avgWordsPerSentence > 25) {
                issues.push({
                  severity: "medium",
                  type: "readability",
                  description: "Sentences may be too long for accessibility",
                  suggestion: "Break up longer sentences"
                });
                score -= 15;
              }

              // Check for clear section structure
              if (article.content.sections.length < 3) {
                issues.push({
                  severity: "low",
                  type: "structure",
                  description: "Article could benefit from clearer section structure",
                  suggestion: "Consider adding subheadings"
                });
                score -= 10;
              }
              return _context7.a(2, {
                category: "accessibility",
                score: Math.max(score, 0),
                passed: score >= this.QUALITY_THRESHOLDS.accessibility.min,
                issues: issues,
                checkedAt: new Date(),
                checker: "automated"
              });
          }
        }, _callee7, this);
      }));
      function checkAccessibility(_x7) {
        return _checkAccessibility.apply(this, arguments);
      }
      return checkAccessibility;
    }()
    /**
     * Calculate overall quality score
     */
    )
  }, {
    key: "calculateOverallScore",
    value: function calculateOverallScore(checks) {
      var weights = {
        factual_accuracy: 0.25,
        brand_voice: 0.2,
        content_safety: 0.25,
        legal_compliance: 0.15,
        editorial_quality: 0.1,
        accessibility: 0.05
      };
      var totalScore = 0;
      var totalWeight = 0;
      var _iterator2 = _createForOfIteratorHelper(checks),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var check = _step2.value;
          var weight = weights[check.category];
          totalScore += check.score * weight;
          totalWeight += weight;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return Math.round(totalScore / totalWeight);
    }

    /**
     * Determine if content passes validation
     */
  }, {
    key: "determinePassStatus",
    value: function determinePassStatus(checks, overallScore) {
      // Must pass all critical checks
      var hasCriticalFailures = checks.some(function (check) {
        return !check.passed && check.issues.some(function (issue) {
          return issue.severity === "critical";
        });
      });
      if (hasCriticalFailures) return false;

      // Must meet overall score threshold
      var threshold = this.config.strictMode ? 85 : 75;
      return overallScore >= threshold;
    }

    /**
     * Check if human review is required
     */
  }, {
    key: "requiresHumanReview",
    value: function requiresHumanReview(checks, overallScore) {
      // Always require human review for critical issues
      var hasCriticalIssues = checks.some(function (check) {
        return check.issues.some(function (issue) {
          return issue.severity === "critical";
        });
      });
      if (hasCriticalIssues) return true;

      // Require review if below auto-review threshold
      return overallScore < this.config.autoReviewThreshold;
    }

    /**
     * Categorize issues into blockers and warnings
     */
  }, {
    key: "categorizeIssues",
    value: function categorizeIssues(checks) {
      var blockers = [];
      var warnings = [];
      var _iterator3 = _createForOfIteratorHelper(checks),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var check = _step3.value;
          var _iterator4 = _createForOfIteratorHelper(check.issues),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var issue = _step4.value;
              var message = "".concat(check.category, ": ").concat(issue.description);
              if (issue.severity === "critical" || issue.severity === "high") {
                blockers.push(message);
              } else {
                warnings.push(message);
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return {
        blockers: blockers,
        warnings: warnings
      };
    }

    /**
     * Generate improvement recommendations
     */
  }, {
    key: "generateRecommendations",
    value: function generateRecommendations(checks, article) {
      var recommendations = [];

      // Add recommendations based on check results
      var _iterator5 = _createForOfIteratorHelper(checks),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var check = _step5.value;
          if (!check.passed) {
            recommendations.push({
              type: "fix_required",
              description: "Improve ".concat(check.category.replace("_", " "), " score (currently ").concat(check.score, "/100)"),
              priority: "high"
            });
          }
        }

        // Terry-specific recommendations
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (article.content.terryScore < this.config.terryMinimumScore) {
        recommendations.push({
          type: "improvement",
          description: "Enhance Terry voice with more parenthetical asides and specific observations",
          priority: "medium"
        });
      }

      // Quality improvements
      if (article.qualityScore < 90) {
        recommendations.push({
          type: "suggestion",
          description: "Consider adding more specific details and context to improve overall quality",
          priority: "low"
        });
      }
      return recommendations;
    }

    /**
     * Calculate average words per sentence
     */
  }, {
    key: "calculateAverageWordsPerSentence",
    value: function calculateAverageWordsPerSentence(article) {
      var allText = article.content.sections.map(function (s) {
        return s.content;
      }).join(" ");
      var sentences = allText.split(/[.!?]+/).filter(function (s) {
        return s.trim().length > 0;
      });
      var words = allText.split(/\s+/).filter(function (w) {
        return w.length > 0;
      });
      return sentences.length > 0 ? words.length / sentences.length : 0;
    }

    /**
     * Validate configuration
     */
  }, {
    key: "validateConfiguration",
    value: (function () {
      var _validateConfiguration = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
        var response, _t2;
        return _regenerator().w(function (_context8) {
          while (1) switch (_context8.n) {
            case 0:
              _context8.p = 0;
              _context8.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "user",
                  content: "Test"
                }],
                max_tokens: 5
              });
            case 1:
              response = _context8.v;
              return _context8.a(2, {
                valid: true
              });
            case 2:
              _context8.p = 2;
              _t2 = _context8.v;
              return _context8.a(2, {
                valid: false,
                error: "Quality validator validation failed: ".concat(_t2 instanceof Error ? _t2.message : "Unknown error")
              });
          }
        }, _callee8, this, [[0, 2]]);
      }));
      function validateConfiguration() {
        return _validateConfiguration.apply(this, arguments);
      }
      return validateConfiguration;
    }())
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,