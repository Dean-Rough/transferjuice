ae2ad946e625cdab21233acf1276cdbe
/* istanbul ignore next */ function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function cov_1pjb6jsvof() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/monitoring/hourlyMonitor.ts";
  var hash = "ffea42c70968a09329ebdc4746ff4197eb1d6417";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/monitoring/hourlyMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 56
        }
      },
      "1": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "2": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 59,
          column: 6
        }
      },
      "3": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 56
        }
      },
      "4": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 68
        }
      },
      "5": {
        start: {
          line: 68,
          column: 25
        },
        end: {
          line: 68,
          column: 65
        }
      },
      "6": {
        start: {
          line: 71,
          column: 25
        },
        end: {
          line: 71,
          column: 60
        }
      },
      "7": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 45
        }
      },
      "8": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 87
        }
      },
      "9": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 24
        }
      },
      "10": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 53
        }
      },
      "11": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 16
        }
      },
      "12": {
        start: {
          line: 89,
          column: 21
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "13": {
        start: {
          line: 91,
          column: 2
        },
        end: {
          line: 123,
          column: 3
        }
      },
      "14": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "15": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 57
        }
      },
      "16": {
        start: {
          line: 97,
          column: 24
        },
        end: {
          line: 100,
          column: 8
        }
      },
      "17": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 31
        }
      },
      "18": {
        start: {
          line: 104,
          column: 6
        },
        end: {
          line: 113,
          column: 7
        }
      },
      "19": {
        start: {
          line: 105,
          column: 31
        },
        end: {
          line: 105,
          column: 72
        }
      },
      "20": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "21": {
        start: {
          line: 107,
          column: 10
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "22": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 115,
          column: 41
        }
      },
      "23": {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 55
        }
      },
      "24": {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 121,
          column: 73
        }
      },
      "25": {
        start: {
          line: 125,
          column: 2
        },
        end: {
          line: 125,
          column: 20
        }
      },
      "26": {
        start: {
          line: 132,
          column: 18
        },
        end: {
          line: 132,
          column: 20
        }
      },
      "27": {
        start: {
          line: 134,
          column: 2
        },
        end: {
          line: 167,
          column: 3
        }
      },
      "28": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "29": {
        start: {
          line: 137,
          column: 30
        },
        end: {
          line: 141,
          column: 7
        }
      },
      "30": {
        start: {
          line: 144,
          column: 19
        },
        end: {
          line: 144,
          column: 62
        }
      },
      "31": {
        start: {
          line: 147,
          column: 44
        },
        end: {
          line: 160,
          column: 7
        }
      },
      "32": {
        start: {
          line: 162,
          column: 6
        },
        end: {
          line: 162,
          column: 27
        }
      },
      "33": {
        start: {
          line: 165,
          column: 6
        },
        end: {
          line: 165,
          column: 62
        }
      },
      "34": {
        start: {
          line: 169,
          column: 2
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "35": {
        start: {
          line: 177,
          column: 2
        },
        end: {
          line: 179,
          column: 3
        }
      },
      "36": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "37": {
        start: {
          line: 181,
          column: 2
        },
        end: {
          line: 216,
          column: 3
        }
      },
      "38": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 186,
          column: 6
        }
      },
      "39": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 212,
          column: 5
        }
      },
      "40": {
        start: {
          line: 190,
          column: 30
        },
        end: {
          line: 194,
          column: 7
        }
      },
      "41": {
        start: {
          line: 196,
          column: 51
        },
        end: {
          line: 209,
          column: 7
        }
      },
      "42": {
        start: {
          line: 211,
          column: 6
        },
        end: {
          line: 211,
          column: 34
        }
      },
      "43": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 59
        }
      },
      "44": {
        start: {
          line: 218,
          column: 2
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "45": {
        start: {
          line: 225,
          column: 27
        },
        end: {
          line: 225,
          column: 29
        }
      },
      "46": {
        start: {
          line: 227,
          column: 2
        },
        end: {
          line: 249,
          column: 3
        }
      },
      "47": {
        start: {
          line: 228,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      "48": {
        start: {
          line: 230,
          column: 21
        },
        end: {
          line: 233,
          column: 7
        }
      },
      "49": {
        start: {
          line: 236,
          column: 40
        },
        end: {
          line: 239,
          column: 7
        }
      },
      "50": {
        start: {
          line: 242,
          column: 6
        },
        end: {
          line: 242,
          column: 46
        }
      },
      "51": {
        start: {
          line: 244,
          column: 6
        },
        end: {
          line: 244,
          column: 41
        }
      },
      "52": {
        start: {
          line: 247,
          column: 6
        },
        end: {
          line: 247,
          column: 57
        }
      },
      "53": {
        start: {
          line: 251,
          column: 2
        },
        end: {
          line: 251,
          column: 26
        }
      },
      "54": {
        start: {
          line: 258,
          column: 2
        },
        end: {
          line: 260,
          column: 3
        }
      },
      "55": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 259,
          column: 49
        }
      },
      "56": {
        start: {
          line: 267,
          column: 15
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "57": {
        start: {
          line: 270,
          column: 22
        },
        end: {
          line: 270,
          column: 50
        }
      },
      "58": {
        start: {
          line: 271,
          column: 2
        },
        end: {
          line: 273,
          column: 3
        }
      },
      "59": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 272,
          column: 54
        }
      },
      "60": {
        start: {
          line: 276,
          column: 24
        },
        end: {
          line: 276,
          column: 52
        }
      },
      "61": {
        start: {
          line: 277,
          column: 2
        },
        end: {
          line: 279,
          column: 3
        }
      },
      "62": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 278,
          column: 56
        }
      },
      "63": {
        start: {
          line: 282,
          column: 2
        },
        end: {
          line: 290,
          column: 3
        }
      },
      "64": {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 289,
          column: 5
        }
      },
      "65": {
        start: {
          line: 284,
          column: 6
        },
        end: {
          line: 288,
          column: 7
        }
      },
      "66": {
        start: {
          line: 284,
          column: 28
        },
        end: {
          line: 284,
          column: 82
        }
      },
      "67": {
        start: {
          line: 286,
          column: 21
        },
        end: {
          line: 286,
          column: 46
        }
      },
      "68": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 43
        }
      },
      "69": {
        start: {
          line: 292,
          column: 2
        },
        end: {
          line: 292,
          column: 14
        }
      },
      "70": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 81
        }
      },
      "71": {
        start: {
          line: 300,
          column: 18
        },
        end: {
          line: 300,
          column: 70
        }
      },
      "72": {
        start: {
          line: 302,
          column: 2
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "73": {
        start: {
          line: 302,
          column: 25
        },
        end: {
          line: 302,
          column: 61
        }
      },
      "74": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 303,
          column: 18
        }
      },
      "75": {
        start: {
          line: 305,
          column: 2
        },
        end: {
          line: 307,
          column: 3
        }
      },
      "76": {
        start: {
          line: 305,
          column: 29
        },
        end: {
          line: 305,
          column: 67
        }
      },
      "77": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 20
        }
      },
      "78": {
        start: {
          line: 308,
          column: 2
        },
        end: {
          line: 308,
          column: 18
        }
      },
      "79": {
        start: {
          line: 315,
          column: 2
        },
        end: {
          line: 315,
          column: 58
        }
      },
      "80": {
        start: {
          line: 315,
          column: 40
        },
        end: {
          line: 315,
          column: 58
        }
      },
      "81": {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 316,
          column: 54
        }
      },
      "82": {
        start: {
          line: 316,
          column: 40
        },
        end: {
          line: 316,
          column: 54
        }
      },
      "83": {
        start: {
          line: 317,
          column: 2
        },
        end: {
          line: 317,
          column: 55
        }
      },
      "84": {
        start: {
          line: 317,
          column: 39
        },
        end: {
          line: 317,
          column: 55
        }
      },
      "85": {
        start: {
          line: 318,
          column: 2
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "86": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 328,
          column: 4
        }
      },
      "87": {
        start: {
          line: 330,
          column: 2
        },
        end: {
          line: 330,
          column: 76
        }
      },
      "88": {
        start: {
          line: 337,
          column: 2
        },
        end: {
          line: 342,
          column: 5
        }
      },
      "89": {
        start: {
          line: 350,
          column: 19
        },
        end: {
          line: 361,
          column: 4
        }
      },
      "90": {
        start: {
          line: 364,
          column: 2
        },
        end: {
          line: 377,
          column: 3
        }
      },
      "91": {
        start: {
          line: 365,
          column: 22
        },
        end: {
          line: 369,
          column: 6
        }
      },
      "92": {
        start: {
          line: 371,
          column: 4
        },
        end: {
          line: 376,
          column: 7
        }
      },
      "93": {
        start: {
          line: 380,
          column: 2
        },
        end: {
          line: 389,
          column: 3
        }
      },
      "94": {
        start: {
          line: 381,
          column: 4
        },
        end: {
          line: 388,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "runHourlyMonitor",
        decl: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 51,
            column: 38
          }
        },
        loc: {
          start: {
            line: 51,
            column: 66
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 51
      },
      "1": {
        name: "checkAllSources",
        decl: {
          start: {
            line: 88,
            column: 15
          },
          end: {
            line: 88,
            column: 30
          }
        },
        loc: {
          start: {
            line: 88,
            column: 63
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 88
      },
      "2": {
        name: "processTransferContent",
        decl: {
          start: {
            line: 131,
            column: 15
          },
          end: {
            line: 131,
            column: 37
          }
        },
        loc: {
          start: {
            line: 131,
            column: 88
          },
          end: {
            line: 170,
            column: 1
          }
        },
        line: 131
      },
      "3": {
        name: "addContentPadding",
        decl: {
          start: {
            line: 175,
            column: 15
          },
          end: {
            line: 175,
            column: 32
          }
        },
        loc: {
          start: {
            line: 175,
            column: 101
          },
          end: {
            line: 219,
            column: 1
          }
        },
        line: 175
      },
      "4": {
        name: "finalizeUpdates",
        decl: {
          start: {
            line: 224,
            column: 15
          },
          end: {
            line: 224,
            column: 30
          }
        },
        loc: {
          start: {
            line: 224,
            column: 90
          },
          end: {
            line: 252,
            column: 1
          }
        },
        line: 224
      },
      "5": {
        name: "broadcastLiveUpdates",
        decl: {
          start: {
            line: 257,
            column: 15
          },
          end: {
            line: 257,
            column: 35
          }
        },
        loc: {
          start: {
            line: 257,
            column: 76
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 257
      },
      "6": {
        name: "extractTags",
        decl: {
          start: {
            line: 266,
            column: 9
          },
          end: {
            line: 266,
            column: 20
          }
        },
        loc: {
          start: {
            line: 266,
            column: 118
          },
          end: {
            line: 293,
            column: 1
          }
        },
        line: 266
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 284,
            column: 21
          },
          end: {
            line: 284,
            column: 22
          }
        },
        loc: {
          start: {
            line: 284,
            column: 28
          },
          end: {
            line: 284,
            column: 82
          }
        },
        line: 284
      },
      "8": {
        name: "determineTagType",
        decl: {
          start: {
            line: 298,
            column: 9
          },
          end: {
            line: 298,
            column: 25
          }
        },
        loc: {
          start: {
            line: 298,
            column: 73
          },
          end: {
            line: 309,
            column: 1
          }
        },
        line: 298
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 302,
            column: 17
          },
          end: {
            line: 302,
            column: 18
          }
        },
        loc: {
          start: {
            line: 302,
            column: 25
          },
          end: {
            line: 302,
            column: 61
          }
        },
        line: 302
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 305,
            column: 19
          },
          end: {
            line: 305,
            column: 20
          }
        },
        loc: {
          start: {
            line: 305,
            column: 29
          },
          end: {
            line: 305,
            column: 67
          }
        },
        line: 305
      },
      "11": {
        name: "determinePriority",
        decl: {
          start: {
            line: 314,
            column: 9
          },
          end: {
            line: 314,
            column: 26
          }
        },
        loc: {
          start: {
            line: 314,
            column: 88
          },
          end: {
            line: 319,
            column: 1
          }
        },
        line: 314
      },
      "12": {
        name: "getLastCheckTime",
        decl: {
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 31
          }
        },
        loc: {
          start: {
            line: 324,
            column: 65
          },
          end: {
            line: 331,
            column: 1
          }
        },
        line: 324
      },
      "13": {
        name: "updateLastCheckTime",
        decl: {
          start: {
            line: 336,
            column: 15
          },
          end: {
            line: 336,
            column: 34
          }
        },
        loc: {
          start: {
            line: 336,
            column: 85
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 336
      },
      "14": {
        name: "saveUpdateToDatabase",
        decl: {
          start: {
            line: 348,
            column: 15
          },
          end: {
            line: 348,
            column: 35
          }
        },
        loc: {
          start: {
            line: 348,
            column: 73
          },
          end: {
            line: 390,
            column: 1
          }
        },
        line: 348
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "1": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 44
          }
        }, {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 106,
            column: 79
          }
        }],
        line: 106
      },
      "2": {
        loc: {
          start: {
            line: 177,
            column: 2
          },
          end: {
            line: 179,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 2
          },
          end: {
            line: 179,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "3": {
        loc: {
          start: {
            line: 201,
            column: 14
          },
          end: {
            line: 201,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 14
          },
          end: {
            line: 201,
            column: 24
          }
        }, {
          start: {
            line: 201,
            column: 28
          },
          end: {
            line: 201,
            column: 30
          }
        }],
        line: 201
      },
      "4": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 238,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 238,
            column: 22
          }
        }, {
          start: {
            line: 238,
            column: 26
          },
          end: {
            line: 238,
            column: 28
          }
        }],
        line: 238
      },
      "5": {
        loc: {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 44
          }
        }, {
          start: {
            line: 270,
            column: 48
          },
          end: {
            line: 270,
            column: 50
          }
        }],
        line: 270
      },
      "6": {
        loc: {
          start: {
            line: 276,
            column: 24
          },
          end: {
            line: 276,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 24
          },
          end: {
            line: 276,
            column: 46
          }
        }, {
          start: {
            line: 276,
            column: 50
          },
          end: {
            line: 276,
            column: 52
          }
        }],
        line: 276
      },
      "7": {
        loc: {
          start: {
            line: 282,
            column: 2
          },
          end: {
            line: 290,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 2
          },
          end: {
            line: 290,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "8": {
        loc: {
          start: {
            line: 284,
            column: 6
          },
          end: {
            line: 288,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 6
          },
          end: {
            line: 288,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "9": {
        loc: {
          start: {
            line: 302,
            column: 2
          },
          end: {
            line: 304,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 2
          },
          end: {
            line: 304,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "10": {
        loc: {
          start: {
            line: 305,
            column: 2
          },
          end: {
            line: 307,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 2
          },
          end: {
            line: 307,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "11": {
        loc: {
          start: {
            line: 315,
            column: 2
          },
          end: {
            line: 315,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 2
          },
          end: {
            line: 315,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "12": {
        loc: {
          start: {
            line: 316,
            column: 2
          },
          end: {
            line: 316,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 2
          },
          end: {
            line: 316,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "13": {
        loc: {
          start: {
            line: 317,
            column: 2
          },
          end: {
            line: 317,
            column: 55
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 2
          },
          end: {
            line: 317,
            column: 55
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "14": {
        loc: {
          start: {
            line: 330,
            column: 9
          },
          end: {
            line: 330,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 9
          },
          end: {
            line: 330,
            column: 29
          }
        }, {
          start: {
            line: 330,
            column: 33
          },
          end: {
            line: 330,
            column: 75
          }
        }],
        line: 330
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ffea42c70968a09329ebdc4746ff4197eb1d6417"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pjb6jsvof = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pjb6jsvof();
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Hourly Transfer Monitoring System
 * 
 * This system runs every hour to:
 * 1. Check all ITK accounts for new tweets/updates
 * 2. Generate engaging Terry-style updates
 * 3. Search for relevant images
 * 4. Mix in funny stories from partner sources during quiet periods
 */

import { prisma } from '@/lib/prisma';
import { twitterClient } from '@/lib/twitter/client';
import { classifyTransferContent } from '@/lib/twitter/transferClassifier';
import { generateTerryCommentary } from '@/lib/ai/terryCommentarySystem';
import { searchRelevantImages } from '@/lib/media/imageSearch';
import { getEngagingStories } from '@/lib/partnerships/storyMixer';
import { broadcastUpdate } from '@/lib/realtime/broadcaster';
/**
 * Main hourly monitoring function
 * Called by cron job every hour
 */
export
/* istanbul ignore next */
function runHourlyMonitor() {
  return _runHourlyMonitor.apply(this, arguments);
}

/**
 * Check all ITK sources for new content since last check
 */
/* istanbul ignore next */
function _runHourlyMonitor() {
  _runHourlyMonitor = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee()
  /* istanbul ignore next */
  {
    var itkSources, newContent, transferUpdates, mixedContent, finalUpdates, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1pjb6jsvof().f[0]++;
          cov_1pjb6jsvof().s[0]++;
          console.log('🔄 Starting hourly transfer monitor...');
          cov_1pjb6jsvof().s[1]++;
          _context.p = 1;
          cov_1pjb6jsvof().s[2]++;
          _context.n = 2;
          return prisma.itkSource.findMany({
            where: {
              isActive: true
            },
            orderBy: {
              reliability: 'desc'
            }
          });
        case 2:
          itkSources = _context.v;
          cov_1pjb6jsvof().s[3]++;
          _context.n = 3;
          return checkAllSources(itkSources);
        case 3:
          newContent = _context.v;
          cov_1pjb6jsvof().s[4]++;
          _context.n = 4;
          return processTransferContent(newContent);
        case 4:
          transferUpdates = _context.v;
          cov_1pjb6jsvof().s[5]++;
          _context.n = 5;
          return addContentPadding(transferUpdates);
        case 5:
          mixedContent = _context.v;
          cov_1pjb6jsvof().s[6]++;
          _context.n = 6;
          return finalizeUpdates(mixedContent);
        case 6:
          finalUpdates = _context.v;
          cov_1pjb6jsvof().s[7]++;
          _context.n = 7;
          return broadcastLiveUpdates(finalUpdates);
        case 7:
          cov_1pjb6jsvof().s[8]++;
          console.log(
          /* istanbul ignore next */
          "\u2705 Hourly monitor complete: ".concat(finalUpdates.length, " updates generated"));
          cov_1pjb6jsvof().s[9]++;
          return _context.a(2, finalUpdates);
        case 8:
          _context.p = 8;
          _t = _context.v;
          cov_1pjb6jsvof().s[10]++;
          console.error('❌ Hourly monitor failed:',
          /* istanbul ignore next */
          _t);
          cov_1pjb6jsvof().s[11]++;
          throw _t;
        case 9:
          return _context.a(2);
      }
    }, _callee, null, [[1, 8]]);
  }));
  return _runHourlyMonitor.apply(this, arguments);
}
/* istanbul ignore next */
function checkAllSources(_x) {
  return _checkAllSources.apply(this, arguments);
}
/**
 * Process transfer content into engaging updates
 */
/* istanbul ignore next */
function _checkAllSources() {
  _checkAllSources = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(sources)
  /* istanbul ignore next */
  {
    var newContent, _iterator4, _step4, source, lastCheck, newTweets, relevantTweets, _iterator5, _step5, tweet, classification, _t2, _t3, _t4;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_1pjb6jsvof().f[1]++;
          newContent = (cov_1pjb6jsvof().s[12]++, []);
          cov_1pjb6jsvof().s[13]++;
          _iterator4 = _createForOfIteratorHelper(sources);
          _context2.p = 1;
          _iterator4.s();
        case 2:
          if ((_step4 = _iterator4.n()).done) {
            _context2.n = 17;
            break;
          }
          source = _step4.value;
          cov_1pjb6jsvof().s[14]++;
          _context2.p = 3;
          cov_1pjb6jsvof().s[15]++;
          _context2.n = 4;
          return getLastCheckTime(source.id);
        case 4:
          lastCheck = _context2.v;
          cov_1pjb6jsvof().s[16]++;
          _context2.n = 5;
          return twitterClient.getUserTimeline(source.username, {
            since: lastCheck,
            maxResults: 20
          });
        case 5:
          newTweets = _context2.v;
          // Filter for transfer relevance
          relevantTweets = (cov_1pjb6jsvof().s[17]++, []);
          cov_1pjb6jsvof().s[18]++;
          _iterator5 = _createForOfIteratorHelper(newTweets);
          _context2.p = 6;
          _iterator5.s();
        case 7:
          if ((_step5 = _iterator5.n()).done) {
            _context2.n = 10;
            break;
          }
          tweet = _step5.value;
          cov_1pjb6jsvof().s[19]++;
          _context2.n = 8;
          return classifyTransferContent(tweet.text);
        case 8:
          classification = _context2.v;
          cov_1pjb6jsvof().s[20]++;
          if (
          /* istanbul ignore next */
          (cov_1pjb6jsvof().b[1][0]++, classification.isTransferRelated) &&
          /* istanbul ignore next */
          (cov_1pjb6jsvof().b[1][1]++, classification.confidence > 0.7)) {
            /* istanbul ignore next */
            cov_1pjb6jsvof().b[0][0]++;
            cov_1pjb6jsvof().s[21]++;
            relevantTweets.push(
            /* istanbul ignore next */
            _objectSpread(_objectSpread({}, tweet), {}, {
              source: source,
              classification: classification
            }));
          } else
          /* istanbul ignore next */
          {
            cov_1pjb6jsvof().b[0][1]++;
          }
        case 9:
          _context2.n = 7;
          break;
        case 10:
          _context2.n = 12;
          break;
        case 11:
          _context2.p = 11;
          _t2 = _context2.v;
          _iterator5.e(_t2);
        case 12:
          _context2.p = 12;
          _iterator5.f();
          return _context2.f(12);
        case 13:
          cov_1pjb6jsvof().s[22]++;
          /* istanbul ignore next */
          newContent.push.apply(newContent, relevantTweets);

          // Update last check time
          cov_1pjb6jsvof().s[23]++;
          _context2.n = 14;
          return updateLastCheckTime(source.id, new Date());
        case 14:
          _context2.n = 16;
          break;
        case 15:
          _context2.p = 15;
          _t3 = _context2.v;
          cov_1pjb6jsvof().s[24]++;
          console.error(
          /* istanbul ignore next */
          "Failed to check source ".concat(source.username, ":"),
          /* istanbul ignore next */
          _t3);
        case 16:
          _context2.n = 2;
          break;
        case 17:
          _context2.n = 19;
          break;
        case 18:
          _context2.p = 18;
          _t4 = _context2.v;
          _iterator4.e(_t4);
        case 19:
          _context2.p = 19;
          _iterator4.f();
          return _context2.f(19);
        case 20:
          cov_1pjb6jsvof().s[25]++;
          return _context2.a(2, newContent);
      }
    }, _callee2, null, [[6, 11, 12, 13], [3, 15], [1, 18, 19, 20]]);
  }));
  return _checkAllSources.apply(this, arguments);
}
/* istanbul ignore next */
function processTransferContent(_x2) {
  return _processTransferContent.apply(this, arguments);
}
/**
 * Add engaging stories during quiet periods
 */
/* istanbul ignore next */
function _processTransferContent() {
  _processTransferContent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(content)
  /* istanbul ignore next */
  {
    var updates, _iterator6, _step6, item, terryCommentary, tags, update, _t5, _t6;
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_1pjb6jsvof().f[2]++;
          updates = (cov_1pjb6jsvof().s[26]++, []);
          cov_1pjb6jsvof().s[27]++;
          _iterator6 = _createForOfIteratorHelper(content);
          _context3.p = 1;
          _iterator6.s();
        case 2:
          if ((_step6 = _iterator6.n()).done) {
            _context3.n = 7;
            break;
          }
          item = _step6.value;
          cov_1pjb6jsvof().s[28]++;
          _context3.p = 3;
          cov_1pjb6jsvof().s[29]++;
          _context3.n = 4;
          return generateTerryCommentary(item.text, item.classification, item.source);
        case 4:
          terryCommentary = _context3.v;
          // Extract tags from content
          tags = (cov_1pjb6jsvof().s[30]++, extractTags(item.text, item.classification)); // Create update object
          update = (cov_1pjb6jsvof().s[31]++, {
            id:
            /* istanbul ignore next */
            "update_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
            type: 'transfer_update',
            content: item.text,
            terryCommentary: terryCommentary,
            tags: tags,
            originalSource: {
              name: item.source.name,
              username: item.source.username,
              url:
              /* istanbul ignore next */
              "https://twitter.com/".concat(item.source.username, "/status/").concat(item.id)
            },
            timestamp: new Date(item.created_at),
            priority: determinePriority(item.classification)
          });
          cov_1pjb6jsvof().s[32]++;
          updates.push(update);
          _context3.n = 6;
          break;
        case 5:
          _context3.p = 5;
          _t5 = _context3.v;
          cov_1pjb6jsvof().s[33]++;
          console.error('Failed to process content item:',
          /* istanbul ignore next */
          _t5);
        case 6:
          _context3.n = 2;
          break;
        case 7:
          _context3.n = 9;
          break;
        case 8:
          _context3.p = 8;
          _t6 = _context3.v;
          _iterator6.e(_t6);
        case 9:
          _context3.p = 9;
          _iterator6.f();
          return _context3.f(9);
        case 10:
          cov_1pjb6jsvof().s[34]++;
          return _context3.a(2, updates);
      }
    }, _callee3, null, [[3, 5], [1, 8, 9, 10]]);
  }));
  return _processTransferContent.apply(this, arguments);
}
/* istanbul ignore next */
function addContentPadding(_x3) {
  return _addContentPadding.apply(this, arguments);
}
/**
 * Finalize updates with images and save to database
 */
/* istanbul ignore next */
function _addContentPadding() {
  _addContentPadding = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4(updates)
  /* istanbul ignore next */
  {
    var stories, _iterator7, _step7, story, terryCommentary, paddingUpdate, _t7, _t8;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          cov_1pjb6jsvof().f[3]++;
          cov_1pjb6jsvof().s[35]++;
          if (!(updates.length >= 3)) {
            _context4.n = 1;
            break;
          }
          cov_1pjb6jsvof().b[2][0]++;
          cov_1pjb6jsvof().s[36]++;
          return _context4.a(2, updates);
        case 1:
          cov_1pjb6jsvof().b[2][1]++;
        case 2:
          cov_1pjb6jsvof().s[37]++;
          _context4.p = 3;
          cov_1pjb6jsvof().s[38]++;
          _context4.n = 4;
          return getEngagingStories({
            minRequired: 3 - updates.length,
            sources: ['theupshot', 'fourfourtwo', 'footballramble', 'theathletic']
          });
        case 4:
          stories = _context4.v;
          cov_1pjb6jsvof().s[39]++;
          // Convert stories to updates with Terry commentary
          _iterator7 = _createForOfIteratorHelper(stories);
          _context4.p = 5;
          _iterator7.s();
        case 6:
          if ((_step7 = _iterator7.n()).done) {
            _context4.n = 9;
            break;
          }
          story = _step7.value;
          cov_1pjb6jsvof().s[40]++;
          _context4.n = 7;
          return generateTerryCommentary(story.content, {
            isTransferRelated: false,
            isFootballStory: true
          }, story.source);
        case 7:
          terryCommentary = _context4.v;
          paddingUpdate = (cov_1pjb6jsvof().s[41]++, {
            id:
            /* istanbul ignore next */
            "story_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9)),
            type: 'story_mix',
            content: story.content,
            terryCommentary: terryCommentary,
            tags:
            /* istanbul ignore next */
            (cov_1pjb6jsvof().b[3][0]++, story.tags) ||
            /* istanbul ignore next */
            (cov_1pjb6jsvof().b[3][1]++, []),
            partnerAttribution: {
              source: story.source.name,
              url: story.url,
              attribution: story.attribution
            },
            timestamp: new Date(),
            priority: 'medium'
          });
          cov_1pjb6jsvof().s[42]++;
          updates.push(paddingUpdate);
        case 8:
          _context4.n = 6;
          break;
        case 9:
          _context4.n = 11;
          break;
        case 10:
          _context4.p = 10;
          _t7 = _context4.v;
          _iterator7.e(_t7);
        case 11:
          _context4.p = 11;
          _iterator7.f();
          return _context4.f(11);
        case 12:
          _context4.n = 14;
          break;
        case 13:
          _context4.p = 13;
          _t8 = _context4.v;
          cov_1pjb6jsvof().s[43]++;
          console.error('Failed to add content padding:',
          /* istanbul ignore next */
          _t8);
        case 14:
          cov_1pjb6jsvof().s[44]++;
          return _context4.a(2, updates);
      }
    }, _callee4, null, [[5, 10, 11, 12], [3, 13]]);
  }));
  return _addContentPadding.apply(this, arguments);
}
/* istanbul ignore next */
function finalizeUpdates(_x4) {
  return _finalizeUpdates.apply(this, arguments);
}
/**
 * Broadcast updates to live feed clients
 */
/* istanbul ignore next */
function _finalizeUpdates() {
  _finalizeUpdates = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee5(updates)
  /* istanbul ignore next */
  {
    var finalizedUpdates, _iterator8, _step8, update, images, finalUpdate, _t9, _t0;
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          cov_1pjb6jsvof().f[4]++;
          finalizedUpdates = (cov_1pjb6jsvof().s[45]++, []);
          cov_1pjb6jsvof().s[46]++;
          _iterator8 = _createForOfIteratorHelper(updates);
          _context5.p = 1;
          _iterator8.s();
        case 2:
          if ((_step8 = _iterator8.n()).done) {
            _context5.n = 8;
            break;
          }
          update = _step8.value;
          cov_1pjb6jsvof().s[47]++;
          _context5.p = 3;
          cov_1pjb6jsvof().s[48]++;
          _context5.n = 4;
          return searchRelevantImages(update.content + ' ' + update.terryCommentary, update.tags);
        case 4:
          images = _context5.v;
          // Complete the update object
          finalUpdate = (cov_1pjb6jsvof().s[49]++, _objectSpread(_objectSpread({}, update), {}, {
            images:
            /* istanbul ignore next */
            (cov_1pjb6jsvof().b[4][0]++, images) ||
            /* istanbul ignore next */
            (cov_1pjb6jsvof().b[4][1]++, [])
          })); // Save to database
          cov_1pjb6jsvof().s[50]++;
          _context5.n = 5;
          return saveUpdateToDatabase(finalUpdate);
        case 5:
          cov_1pjb6jsvof().s[51]++;
          finalizedUpdates.push(finalUpdate);
          _context5.n = 7;
          break;
        case 6:
          _context5.p = 6;
          _t9 = _context5.v;
          cov_1pjb6jsvof().s[52]++;
          console.error('Failed to finalize update:',
          /* istanbul ignore next */
          _t9);
        case 7:
          _context5.n = 2;
          break;
        case 8:
          _context5.n = 10;
          break;
        case 9:
          _context5.p = 9;
          _t0 = _context5.v;
          _iterator8.e(_t0);
        case 10:
          _context5.p = 10;
          _iterator8.f();
          return _context5.f(10);
        case 11:
          cov_1pjb6jsvof().s[53]++;
          return _context5.a(2, finalizedUpdates);
      }
    }, _callee5, null, [[3, 6], [1, 9, 10, 11]]);
  }));
  return _finalizeUpdates.apply(this, arguments);
}
/* istanbul ignore next */
function broadcastLiveUpdates(_x5) {
  return _broadcastLiveUpdates.apply(this, arguments);
}
/**
 * Extract tags from content and classification
 */
/* istanbul ignore next */
function _broadcastLiveUpdates() {
  _broadcastLiveUpdates = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee6(updates)
  /* istanbul ignore next */
  {
    var _iterator9, _step9, update, _t1;
    return _regenerator().w(function (_context6) {
      while (1) switch (_context6.n) {
        case 0:
          cov_1pjb6jsvof().f[5]++;
          cov_1pjb6jsvof().s[54]++;
          _iterator9 = _createForOfIteratorHelper(updates);
          _context6.p = 1;
          _iterator9.s();
        case 2:
          if ((_step9 = _iterator9.n()).done) {
            _context6.n = 4;
            break;
          }
          update = _step9.value;
          cov_1pjb6jsvof().s[55]++;
          _context6.n = 3;
          return broadcastUpdate('feed-update', update);
        case 3:
          _context6.n = 2;
          break;
        case 4:
          _context6.n = 6;
          break;
        case 5:
          _context6.p = 5;
          _t1 = _context6.v;
          _iterator9.e(_t1);
        case 6:
          _context6.p = 6;
          _iterator9.f();
          return _context6.f(6);
        case 7:
          return _context6.a(2);
      }
    }, _callee6, null, [[1, 5, 6, 7]]);
  }));
  return _broadcastLiveUpdates.apply(this, arguments);
}
function extractTags(content, classification) {
  /* istanbul ignore next */
  cov_1pjb6jsvof().f[6]++;
  var tags =
  /* istanbul ignore next */
  (cov_1pjb6jsvof().s[56]++, []);

  // Extract club tags
  var clubMatches =
  /* istanbul ignore next */
  (cov_1pjb6jsvof().s[57]++,
  /* istanbul ignore next */
  (cov_1pjb6jsvof().b[5][0]++, content.match(/#\w+/g)) ||
  /* istanbul ignore next */
  (cov_1pjb6jsvof().b[5][1]++, []));
  /* istanbul ignore next */
  cov_1pjb6jsvof().s[58]++;
  var _iterator = _createForOfIteratorHelper(clubMatches),
    _step;
  /* istanbul ignore next */
  try {
    for (
    /* istanbul ignore next */
    _iterator.s();
    /* istanbul ignore next */
    !(_step = _iterator.n()).done;) {
      /* istanbul ignore next */
      var match = _step.value;
      /* istanbul ignore next */
      cov_1pjb6jsvof().s[59]++;
      tags.push({
        name: match,
        type: 'club'
      });
    }

    // Extract player tags
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var playerMatches =
  /* istanbul ignore next */
  (cov_1pjb6jsvof().s[60]++,
  /* istanbul ignore next */
  (cov_1pjb6jsvof().b[6][0]++, content.match(/@\w+/g)) ||
  /* istanbul ignore next */
  (cov_1pjb6jsvof().b[6][1]++, []));
  /* istanbul ignore next */
  cov_1pjb6jsvof().s[61]++;
  var _iterator2 = _createForOfIteratorHelper(playerMatches),
    _step2;
  /* istanbul ignore next */
  try {
    for (
    /* istanbul ignore next */
    _iterator2.s();
    /* istanbul ignore next */
    !(_step2 = _iterator2.n()).done;) {
      /* istanbul ignore next */
      var _match = _step2.value;
      /* istanbul ignore next */
      cov_1pjb6jsvof().s[62]++;
      tags.push({
        name: _match,
        type: 'player'
      });
    }

    // Add classification-based tags
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  /* istanbul ignore next */
  cov_1pjb6jsvof().s[63]++;
  if (classification.keywords) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[7][0]++;
    cov_1pjb6jsvof().s[64]++;
    var _iterator3 = _createForOfIteratorHelper(classification.keywords),
      _step3;
    /* istanbul ignore next */
    try {
      var _loop = function _loop() {
        /* istanbul ignore next */
        var keyword = _step3.value;
        /* istanbul ignore next */
        cov_1pjb6jsvof().s[65]++;
        if (!tags.some(function (tag) {
          /* istanbul ignore next */
          cov_1pjb6jsvof().f[7]++;
          cov_1pjb6jsvof().s[66]++;
          return tag.name.toLowerCase().includes(keyword.toLowerCase());
        })) {
          /* istanbul ignore next */
          cov_1pjb6jsvof().b[8][0]++;
          // Determine tag type based on keyword
          var type =
          /* istanbul ignore next */
          (cov_1pjb6jsvof().s[67]++, determineTagType(keyword));
          /* istanbul ignore next */
          cov_1pjb6jsvof().s[68]++;
          tags.push({
            name: keyword,
            type: type
          });
        } else
        /* istanbul ignore next */
        {
          cov_1pjb6jsvof().b[8][1]++;
        }
      };
      for (
      /* istanbul ignore next */
      _iterator3.s();
      /* istanbul ignore next */
      !(_step3 = _iterator3.n()).done;)
      /* istanbul ignore next */
      {
        _loop();
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[7][1]++;
  }
  cov_1pjb6jsvof().s[69]++;
  return tags;
}

/**
 * Determine tag type from keyword
 */
function determineTagType(keyword) {
  /* istanbul ignore next */
  cov_1pjb6jsvof().f[8]++;
  var clubs =
  /* istanbul ignore next */
  (cov_1pjb6jsvof().s[70]++, ['arsenal', 'chelsea', 'liverpool', 'madrid', 'barcelona', 'psg']);
  var players =
  /* istanbul ignore next */
  (cov_1pjb6jsvof().s[71]++, ['haaland', 'mbappe', 'bellingham', 'kane', 'messi']);
  /* istanbul ignore next */
  cov_1pjb6jsvof().s[72]++;
  if (clubs.some(function (club) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().f[9]++;
    cov_1pjb6jsvof().s[73]++;
    return keyword.toLowerCase().includes(club);
  })) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[9][0]++;
    cov_1pjb6jsvof().s[74]++;
    return 'club';
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[9][1]++;
  }
  cov_1pjb6jsvof().s[75]++;
  if (players.some(function (player) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().f[10]++;
    cov_1pjb6jsvof().s[76]++;
    return keyword.toLowerCase().includes(player);
  })) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[10][0]++;
    cov_1pjb6jsvof().s[77]++;
    return 'player';
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[10][1]++;
  }
  cov_1pjb6jsvof().s[78]++;
  return 'source';
}

/**
 * Determine priority based on classification
 */
function determinePriority(classification) {
  /* istanbul ignore next */
  cov_1pjb6jsvof().f[11]++;
  cov_1pjb6jsvof().s[79]++;
  if (classification.confidence > 0.95) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[11][0]++;
    cov_1pjb6jsvof().s[80]++;
    return 'breaking';
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[11][1]++;
  }
  cov_1pjb6jsvof().s[81]++;
  if (classification.confidence > 0.85) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[12][0]++;
    cov_1pjb6jsvof().s[82]++;
    return 'high';
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[12][1]++;
  }
  cov_1pjb6jsvof().s[83]++;
  if (classification.confidence > 0.7) {
    /* istanbul ignore next */
    cov_1pjb6jsvof().b[13][0]++;
    cov_1pjb6jsvof().s[84]++;
    return 'medium';
  } else
  /* istanbul ignore next */
  {
    cov_1pjb6jsvof().b[13][1]++;
  }
  cov_1pjb6jsvof().s[85]++;
  return 'low';
}

/**
 * Get last check time for a source
 */
/* istanbul ignore next */
function getLastCheckTime(_x6) {
  return _getLastCheckTime.apply(this, arguments);
}
/**
 * Update last check time for a source
 */
/* istanbul ignore next */
function _getLastCheckTime() {
  _getLastCheckTime = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee7(sourceId)
  /* istanbul ignore next */
  {
    var lastCheck;
    return _regenerator().w(function (_context7) {
      while (1) switch (_context7.n) {
        case 0:
          cov_1pjb6jsvof().f[12]++;
          cov_1pjb6jsvof().s[86]++;
          _context7.n = 1;
          return prisma.sourceCheckLog.findFirst({
            where: {
              sourceId: sourceId
            },
            orderBy: {
              checkedAt: 'desc'
            }
          });
        case 1:
          lastCheck = _context7.v;
          cov_1pjb6jsvof().s[87]++;
          return _context7.a(2,
          /* istanbul ignore next */
          (cov_1pjb6jsvof().b[14][0]++, lastCheck === null || lastCheck === void 0 ? void 0 : lastCheck.checkedAt) ||
          /* istanbul ignore next */
          (cov_1pjb6jsvof().b[14][1]++, new Date(Date.now() - 24 * 60 * 60 * 1000)));
      }
    }, _callee7);
  }));
  return _getLastCheckTime.apply(this, arguments);
}
/* istanbul ignore next */
function updateLastCheckTime(_x7, _x8) {
  return _updateLastCheckTime.apply(this, arguments);
}
/**
 * Save update to database
 */
/* istanbul ignore next */
function _updateLastCheckTime() {
  _updateLastCheckTime = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee8(sourceId, timestamp)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context8) {
      while (1) switch (_context8.n) {
        case 0:
          cov_1pjb6jsvof().f[13]++;
          cov_1pjb6jsvof().s[88]++;
          _context8.n = 1;
          return prisma.sourceCheckLog.create({
            data: {
              sourceId: sourceId,
              checkedAt: timestamp
            }
          });
        case 1:
          return _context8.a(2);
      }
    }, _callee8);
  }));
  return _updateLastCheckTime.apply(this, arguments);
}
/* istanbul ignore next */
function saveUpdateToDatabase(_x9) {
  return _saveUpdateToDatabase.apply(this, arguments);
}
/* istanbul ignore next */
function _saveUpdateToDatabase() {
  _saveUpdateToDatabase = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee9(update)
  /* istanbul ignore next */
  {
    var _update$originalSourc, _update$originalSourc2;
    var feedItem, _iterator0, _step0, tag, tagRecord, _iterator1, _step1, image, _t10, _t11;
    return _regenerator().w(function (_context9) {
      while (1) switch (_context9.n) {
        case 0:
          cov_1pjb6jsvof().f[14]++;
          cov_1pjb6jsvof().s[89]++;
          _context9.n = 1;
          return prisma.feedItem.create({
            data: {
              type: update.type,
              content: update.content,
              terryCommentary: update.terryCommentary,
              sourceId:
              /* istanbul ignore next */
              (_update$originalSourc = update.originalSource) === null || _update$originalSourc === void 0 ? void 0 :
              /* istanbul ignore next */
              _update$originalSourc.username,
              originalUrl:
              /* istanbul ignore next */
              (_update$originalSourc2 = update.originalSource) === null || _update$originalSourc2 === void 0 ? void 0 :
              /* istanbul ignore next */
              _update$originalSourc2.url,
              priority: update.priority.toUpperCase(),
              publishedAt: update.timestamp,
              isPublished: true
            }
          });
        case 1:
          feedItem = _context9.v;
          cov_1pjb6jsvof().s[90]++;
          // Save tags
          _iterator0 = _createForOfIteratorHelper(update.tags);
          _context9.p = 2;
          _iterator0.s();
        case 3:
          if ((_step0 = _iterator0.n()).done) {
            _context9.n = 6;
            break;
          }
          tag = _step0.value;
          cov_1pjb6jsvof().s[91]++;
          _context9.n = 4;
          return prisma.tag.upsert({
            where: {
              name: tag.name
            },
            update: {},
            create: {
              name: tag.name,
              type: tag.type.toUpperCase()
            }
          });
        case 4:
          tagRecord = _context9.v;
          cov_1pjb6jsvof().s[92]++;
          _context9.n = 5;
          return prisma.feedItemTag.create({
            data: {
              feedItemId: feedItem.id,
              tagId: tagRecord.id
            }
          });
        case 5:
          _context9.n = 3;
          break;
        case 6:
          _context9.n = 8;
          break;
        case 7:
          _context9.p = 7;
          _t10 = _context9.v;
          _iterator0.e(_t10);
        case 8:
          _context9.p = 8;
          _iterator0.f();
          return _context9.f(8);
        case 9:
          cov_1pjb6jsvof().s[93]++;
          // Save images
          _iterator1 = _createForOfIteratorHelper(update.images);
          _context9.p = 10;
          _iterator1.s();
        case 11:
          if ((_step1 = _iterator1.n()).done) {
            _context9.n = 13;
            break;
          }
          image = _step1.value;
          cov_1pjb6jsvof().s[94]++;
          _context9.n = 12;
          return prisma.feedItemMedia.create({
            data: {
              feedItemId: feedItem.id,
              type: image.type.toUpperCase(),
              url: image.url,
              altText: image.altText
            }
          });
        case 12:
          _context9.n = 11;
          break;
        case 13:
          _context9.n = 15;
          break;
        case 14:
          _context9.p = 14;
          _t11 = _context9.v;
          _iterator1.e(_t11);
        case 15:
          _context9.p = 15;
          _iterator1.f();
          return _context9.f(15);
        case 16:
          return _context9.a(2);
      }
    }, _callee9, null, [[10, 14, 15, 16], [2, 7, 8, 9]]);
  }));
  return _saveUpdateToDatabase.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,