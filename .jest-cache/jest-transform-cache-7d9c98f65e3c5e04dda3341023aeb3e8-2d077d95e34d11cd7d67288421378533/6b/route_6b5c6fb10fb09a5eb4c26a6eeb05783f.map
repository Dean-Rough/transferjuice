{"version":3,"names":["cov_2g9tszq9pm","actualCoverage","_regenerator","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","NextResponse","z","generateBriefing","generateRequestSchema","s","object","force","optional","testMode","isAuthorized","request","authHeader","headers","get","apiKey","validApiKey","process","env","BRIEFING_GENERATION_API_KEY","b","startsWith","token","substring","BRIEFING_GENERATION_TOKEN","POST","_x","_POST","_callee","body","_ref","now","currentHour","timestamp","briefing","errorDetails","_t","_t2","_context","NODE_ENV","json","error","status","parse","Date","getFullYear","getMonth","getDate","getHours","String","padStart","join","console","log","concat","id","success","slug","title","metadata","wordCount","estimatedReadTime","terryScore","sectionsCount","sections","playerMentions","flatMap","generatedAt","toISOString","Error","message","stack","undefined","details","ZodError","errors","GET","_x2","_GET","_callee2","mockHistory","_t3","_context2","Array","from","_","date","setHours","createdAt","Math","floor","random","generationHistory","nextGenerationTime","systemStatus"],"sources":["route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { generateBriefing } from \"@/lib/briefings/generator\";\nimport { verifyApiAuth } from \"@/lib/auth/apiAuth\";\n\n// Request body schema for manual generation\nconst generateRequestSchema = z.object({\n  force: z.boolean().optional().default(false),\n  testMode: z.boolean().optional().default(false),\n});\n\n// API authentication check\nconst isAuthorized = (request: NextRequest): boolean => {\n  // TODO: Implement proper API authentication\n  // For now, check for a secret header or API key\n  const authHeader = request.headers.get(\"Authorization\");\n  const apiKey = request.headers.get(\"X-API-Key\");\n\n  // In production, verify against environment variable\n  const validApiKey = process.env.BRIEFING_GENERATION_API_KEY;\n\n  if (validApiKey && apiKey === validApiKey) {\n    return true;\n  }\n\n  if (authHeader && authHeader.startsWith(\"Bearer \")) {\n    const token = authHeader.substring(7);\n    // TODO: Verify JWT or other token mechanism\n    return token === process.env.BRIEFING_GENERATION_TOKEN;\n  }\n\n  return false;\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication for production security\n    if (process.env.NODE_ENV === \"production\" && !isAuthorized(request)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Parse request body\n    const body = await request.json();\n    const { force, testMode } = generateRequestSchema.parse(body);\n\n    // Check if a briefing was already generated for this hour\n    const now = new Date();\n    const currentHour = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      now.getHours()\n    );\n\n    const timestamp = [\n      currentHour.getFullYear(),\n      String(currentHour.getMonth() + 1).padStart(2, \"0\"),\n      String(currentHour.getDate()).padStart(2, \"0\"),\n      String(currentHour.getHours()).padStart(2, \"0\"),\n    ].join(\"-\");\n\n    // TODO: Check if briefing already exists\n    // const existingBriefing = await prisma.briefing.findUnique({\n    //   where: { slug: timestamp },\n    // });\n\n    // if (existingBriefing && !force) {\n    //   return NextResponse.json(\n    //     {\n    //       error: 'Briefing already exists for this hour',\n    //       briefingId: existingBriefing.id,\n    //       timestamp,\n    //     },\n    //     { status: 409 }\n    //   );\n    // }\n\n    // Generate the briefing\n    console.log(`Starting briefing generation for ${timestamp}`);\n\n    try {\n      const briefing = await generateBriefing({\n        timestamp,\n        testMode,\n      });\n\n      console.log(`Briefing generated successfully: ${briefing.id}`);\n\n      // Return generated briefing metadata\n      return NextResponse.json(\n        {\n          success: true,\n          briefing: {\n            id: briefing.id,\n            slug: briefing.slug,\n            timestamp: briefing.timestamp,\n            title: briefing.title,\n            metadata: {\n              wordCount: briefing.metadata.wordCount,\n              estimatedReadTime: briefing.metadata.estimatedReadTime,\n              terryScore: briefing.metadata.terryScore,\n              sectionsCount: briefing.sections.length,\n              playerMentions: briefing.sections.flatMap(\n                (s) => s.playerMentions || []\n              ).length,\n            },\n          },\n          generatedAt: new Date().toISOString(),\n        },\n        { status: 201 }\n      );\n    } catch (generationError) {\n      console.error(\"Briefing generation failed:\", generationError);\n\n      // Log detailed error for monitoring\n      const errorDetails = {\n        timestamp,\n        error:\n          generationError instanceof Error\n            ? generationError.message\n            : \"Unknown error\",\n        stack:\n          generationError instanceof Error ? generationError.stack : undefined,\n        testMode,\n      };\n\n      // TODO: Send to monitoring service\n      // await logToMonitoring('briefing.generation.failed', errorDetails);\n\n      return NextResponse.json(\n        {\n          error: \"Briefing generation failed\",\n          details:\n            process.env.NODE_ENV === \"development\" ? errorDetails : undefined,\n        },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        {\n          error: \"Invalid request body\",\n          details: error.errors,\n        },\n        { status: 400 }\n      );\n    }\n\n    console.error(\"Unexpected error in briefing generation:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\n// GET endpoint for checking generation status\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authorization\n    if (process.env.NODE_ENV === \"production\" && !isAuthorized(request)) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n    }\n\n    // Get recent generation history\n    // TODO: Replace with actual database query\n    // const recentGenerations = await prisma.briefing.findMany({\n    //   orderBy: { createdAt: 'desc' },\n    //   take: 24, // Last 24 hours\n    //   select: {\n    //     id: true,\n    //     slug: true,\n    //     timestamp: true,\n    //     createdAt: true,\n    //     status: true,\n    //     metadata: {\n    //       select: {\n    //         terryScore: true,\n    //         wordCount: true,\n    //       },\n    //     },\n    //   },\n    // });\n\n    const mockHistory = Array.from({ length: 24 }, (_, i) => {\n      const date = new Date();\n      date.setHours(date.getHours() - i);\n\n      const timestamp = [\n        date.getFullYear(),\n        String(date.getMonth() + 1).padStart(2, \"0\"),\n        String(date.getDate()).padStart(2, \"0\"),\n        String(date.getHours()).padStart(2, \"0\"),\n      ].join(\"-\");\n\n      return {\n        id: `briefing-${timestamp}`,\n        slug: timestamp,\n        timestamp: date.toISOString(),\n        createdAt: date.toISOString(),\n        status: i === 0 ? \"generating\" : \"published\",\n        metadata: {\n          terryScore: 85 + Math.floor(Math.random() * 15),\n          wordCount: 1200 + Math.floor(Math.random() * 300),\n        },\n      };\n    });\n\n    return NextResponse.json({\n      generationHistory: mockHistory,\n      nextGenerationTime: new Date(\n        new Date().setHours(new Date().getHours() + 1, 0, 0, 0)\n      ).toISOString(),\n      systemStatus: \"operational\",\n    });\n  } catch (error) {\n    console.error(\"Error checking generation status:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}