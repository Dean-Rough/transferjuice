2251bf99ef16474adff33db7ec27aac2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValidationError = exports.ImageUploadSchema = exports.FileUploadSchema = exports.CommonSchemas = exports.AdvancedEmailSchema = void 0;
exports.createDateRangeSchema = createDateRangeSchema;
exports.createEnumSchema = createEnumSchema;
exports.createPaginationSchema = createPaginationSchema;
exports.createSortSchema = createSortSchema;
exports.createStrictValidator = createStrictValidator;
exports.createUrlSchema = createUrlSchema;
exports.createValidator = createValidator;
exports.formatValidationErrors = formatValidationErrors;
exports.getValidationErrorMessage = getValidationErrorMessage;
exports.isValidationError = isValidationError;
exports.removeUndefined = removeUndefined;
exports.transformFormData = transformFormData;
exports.transformQueryParams = transformQueryParams;
exports.validateAndOmit = validateAndOmit;
exports.validateAndPick = validateAndPick;
exports.validateEnvironmentVariables = validateEnvironmentVariables;
exports.validateOrError = validateOrError;
exports.validateQueryParams = validateQueryParams;
exports.validateRequestBody = validateRequestBody;
var _zod = require("zod");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Validation Utilities
 * Common utilities for working with Zod schemas across the application
 */

/**
 * Creates a safe validator function that returns validation results
 */
function createValidator(schema) {
  return function (data) {
    return schema.safeParse(data);
  };
}

/**
 * Creates a validator that throws on validation failure
 */
function createStrictValidator(schema) {
  return function (data) {
    return schema.parse(data);
  };
}

/**
 * Formats Zod validation errors into user-friendly messages
 */
function formatValidationErrors(error) {
  return error.issues.map(function (issue) {
    var path = issue.path.join(".");
    var pathStr = path ? "".concat(path, ": ") : "";
    return "".concat(pathStr).concat(issue.message);
  });
}

/**
 * Creates a formatted error message from validation result
 */
function getValidationErrorMessage(result) {
  if (result.success) {
    return null;
  }
  var errors = formatValidationErrors(result.error);
  return errors.length === 1 ? errors[0] : errors.join("; ");
}

/**
 * Validates data and returns either the parsed result or formatted error
 */
function validateOrError(schema, data) {
  var result = schema.safeParse(data);
  if (result.success) {
    return {
      success: true,
      data: result.data
    };
  }
  var errorMessage = getValidationErrorMessage(result);
  return {
    success: false,
    error: errorMessage || "Validation failed"
  };
}

/**
 * Middleware helper for validating API request bodies
 */
function validateRequestBody(schema) {
  return function (data) {
    try {
      return schema.parse(data);
    } catch (error) {
      if (error instanceof _zod.z.ZodError) {
        var formattedErrors = formatValidationErrors(error);
        throw new ValidationError("Request validation failed", formattedErrors);
      }
      throw error;
    }
  };
}

/**
 * Middleware helper for validating query parameters
 */
function validateQueryParams(schema) {
  return function (params) {
    try {
      return schema.parse(params);
    } catch (error) {
      if (error instanceof _zod.z.ZodError) {
        var formattedErrors = formatValidationErrors(error);
        throw new ValidationError("Query parameter validation failed", formattedErrors);
      }
      throw error;
    }
  };
}

/**
 * Custom validation error class (Terry-approved)
 */
var ValidationError = exports.ValidationError = /*#__PURE__*/function (_Error) {
  function ValidationError(message) {
    var _this;
    var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _classCallCheck(this, ValidationError);
    // Add some Terry flair to error messages
    var terryMessage = message.includes("validation") ? "".concat(message, " (The Terry suggests checking your input, because something has gone magnificently wrong)") : message;
    _this = _callSuper(this, ValidationError, [terryMessage]);
    _defineProperty(_this, "code", "VALIDATION_ERROR");
    _defineProperty(_this, "statusCode", 400);
    _this.name = "ValidationError";
    _this.errors = errors.map(function (error) {
      return error.includes("required") ? "".concat(error, " - apparently this field is more important than we thought") : error.includes("invalid") ? "".concat(error, " - which is the digital equivalent of bringing a spoon to a knife fight") : error;
    });
    return _this;
  }
  _inherits(ValidationError, _Error);
  return _createClass(ValidationError, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        name: this.name,
        message: this.message,
        code: this.code,
        statusCode: this.statusCode,
        errors: this.errors
      };
    }
  }]);
}(/*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Type guard to check if an error is a ValidationError
 */
function isValidationError(error) {
  return error instanceof ValidationError;
}

/**
 * Transforms raw form data into properly typed objects
 */
function transformFormData(formData) {
  var data = {};
  var _iterator = _createForOfIteratorHelper(formData.entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      if (key.endsWith("[]")) {
        // Handle array fields
        var arrayKey = key.slice(0, -2);
        if (!data[arrayKey]) {
          data[arrayKey] = [];
        }
        data[arrayKey].push(value);
      } else if (data[key]) {
        // Convert single value to array if key already exists
        if (!Array.isArray(data[key])) {
          data[key] = [data[key]];
        }
        data[key].push(value);
      } else {
        data[key] = value;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return data;
}

/**
 * Transforms query string parameters to proper types
 */
function transformQueryParams(params) {
  var data = {};
  var _iterator2 = _createForOfIteratorHelper(params.entries()),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
        key = _step2$value[0],
        value = _step2$value[1];
      if (data[key]) {
        // Convert to array if key already exists
        if (!Array.isArray(data[key])) {
          data[key] = [data[key]];
        }
        data[key].push(value);
      } else {
        data[key] = value;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return data;
}

/**
 * Recursively removes undefined values from objects
 */
function removeUndefined(obj) {
  if (obj === null || _typeof(obj) !== "object") {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map(removeUndefined);
  }
  var cleaned = {};
  for (var _i = 0, _Object$entries = Object.entries(obj); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      key = _Object$entries$_i[0],
      value = _Object$entries$_i[1];
    if (value !== undefined) {
      cleaned[key] = removeUndefined(value);
    }
  }
  return cleaned;
}

/**
 * Validates environment variables at startup
 */
function validateEnvironmentVariables(schema) {
  var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env;
  var result = schema.safeParse(env);
  if (!result.success) {
    console.error("❌ Environment validation failed:");
    console.error("");
    var errors = formatValidationErrors(result.error);
    errors.forEach(function (error) {
      return console.error("  ".concat(error));
    });
    console.error("");
    console.error("Please check your environment variables and try again.");
    process.exit(1);
  }
  return result.data;
}

/**
 * Creates a schema for API pagination
 */
function createPaginationSchema() {
  var maxLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  return _zod.z.object({
    page: _zod.z.coerce.number().min(1)["default"](1),
    limit: _zod.z.coerce.number().min(1).max(maxLimit)["default"](10),
    offset: _zod.z.coerce.number().min(0).optional()
  });
}

/**
 * Creates a schema for API sorting
 */
function createSortSchema(fields) {
  return _zod.z.object({
    field: _zod.z["enum"](fields),
    order: _zod.z["enum"](["asc", "desc"])["default"]("desc")
  });
}

/**
 * Creates a schema for date range queries
 */
function createDateRangeSchema() {
  return _zod.z.object({
    from: _zod.z.string().datetime().optional(),
    to: _zod.z.string().datetime().optional()
  }).refine(function (data) {
    if (data.from && data.to) {
      return new Date(data.from) <= new Date(data.to);
    }
    return true;
  }, {
    message: "End date must be after start date",
    path: ["to"]
  });
}

/**
 * Type-safe object pick utility with validation
 */
function validateAndPick(schema, obj, keys) {
  var validated = schema.parse(obj);
  var picked = {};
  var _iterator3 = _createForOfIteratorHelper(keys),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var key = _step3.value;
      if (key in validated) {
        picked[key] = validated[key];
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return picked;
}

/**
 * Type-safe object omit utility with validation
 */
function validateAndOmit(schema, obj, keys) {
  var validated = schema.parse(obj);
  var result = _objectSpread({}, validated);
  var _iterator4 = _createForOfIteratorHelper(keys),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var key = _step4.value;
      delete result[key];
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return result;
}

/**
 * Schema for validating file uploads
 */
var FileUploadSchema = exports.FileUploadSchema = _zod.z.object({
  name: _zod.z.string().min(1).max(255),
  size: _zod.z.number().min(1).max(10 * 1024 * 1024),
  // 10MB max
  type: _zod.z.string().min(1),
  lastModified: _zod.z.number().min(0)
});

/**
 * Schema for validating image uploads specifically
 */
var ImageUploadSchema = exports.ImageUploadSchema = FileUploadSchema.extend({
  type: _zod.z.string().regex(/^image\/(jpeg|jpg|png|gif|webp)$/i, "Must be a valid image format"),
  size: _zod.z.number().min(1).max(5 * 1024 * 1024) // 5MB max for images
});

/**
 * Schema for validating URLs with specific protocols
 */
function createUrlSchema() {
  var protocols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ["http", "https"];
  return _zod.z.string().url().refine(function (url) {
    return protocols.some(function (protocol) {
      return url.startsWith("".concat(protocol, "://"));
    });
  }, {
    message: "URL must use one of these protocols: ".concat(protocols.join(", "))
  });
}

/**
 * Utility to create enum schemas from arrays
 */
function createEnumSchema(values) {
  return _zod.z["enum"](values);
}

/**
 * Advanced email validation schema
 */
var AdvancedEmailSchema = exports.AdvancedEmailSchema = _zod.z.string().email().min(5).max(254).transform(function (email) {
  return email.toLowerCase().trim();
}).refine(function (email) {
  // Additional validation rules
  var localPart = email.split("@")[0];
  var domainPart = email.split("@")[1];

  // Check local part isn't too long
  if (localPart.length > 64) return false;

  // Check for valid domain structure
  if (!domainPart.includes(".")) return false;

  // Check domain parts
  var domainParts = domainPart.split(".");
  var _iterator5 = _createForOfIteratorHelper(domainParts),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var part = _step5.value;
      if (part.length === 0 || part.length > 63) return false;
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  return true;
}, {
  message: "Invalid email format"
});

// Export commonly used schema combinations
var CommonSchemas = exports.CommonSchemas = {
  id: _zod.z.string().min(1),
  slug: _zod.z.string().min(1).regex(/^[a-z0-9-]+$/, "Slug can only contain lowercase letters, numbers, and hyphens"),
  url: createUrlSchema(),
  email: AdvancedEmailSchema,
  phoneNumber: _zod.z.string().regex(/^\+?[1-9]\d{1,14}$/, "Invalid phone number format"),
  timestamp: _zod.z.string().datetime(),
  uuid: _zod.z.string().uuid(),
  pagination: createPaginationSchema(),
  dateRange: createDateRangeSchema()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,