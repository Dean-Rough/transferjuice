generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Simple source tracking - just name and handle
model Source {
  id        String   @id @default(cuid())
  name      String   @unique
  handle    String   @unique
  createdAt DateTime @default(now())
  tweets    Tweet[]
  
  @@map("sources")
}

// Raw tweets scraped from sources
model Tweet {
  id         String   @id @default(cuid())
  tweetId    String   @unique
  sourceId   String
  content    String
  url        String
  scrapedAt  DateTime @default(now())
  source     Source   @relation(fields: [sourceId], references: [id])
  stories    Story[]
  
  @@index([sourceId, scrapedAt])
  @@map("tweets")
}

// Stories with Terry commentary for briefings
model Story {
  id            String    @id @default(cuid())
  tweetId       String
  terryComment  String
  metadata      Json?     // Store enhanced briefing data
  createdAt     DateTime  @default(now())
  tweet         Tweet     @relation(fields: [tweetId], references: [id])
  briefings     BriefingStory[]
  
  @@map("stories")
}

// Simple briefings - just a collection of stories
model Briefing {
  id          String    @id @default(cuid())
  title       String
  publishedAt DateTime  @default(now())
  stories     BriefingStory[]
  
  @@index([publishedAt])
  @@map("briefings")
}

// Many-to-many relation for briefing stories
model BriefingStory {
  id         String   @id @default(cuid())
  briefingId String
  storyId    String
  position   Int
  briefing   Briefing @relation(fields: [briefingId], references: [id], onDelete: Cascade)
  story      Story    @relation(fields: [storyId], references: [id])
  
  @@unique([briefingId, storyId])
  @@map("briefing_stories")
}

// Simple user for future email functionality
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  isActive      Boolean   @default(true)
  subscribedAt  DateTime  @default(now())
  
  @@map("users")
}