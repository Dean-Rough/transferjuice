{"version":3,"names":["cov_1w0wwvhrsq","actualCoverage","_typeof","o","Symbol","iterator","constructor","prototype","_createForOfIteratorHelper","r","e","t","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","a","u","call","next","_arrayLikeToArray","toString","slice","name","from","test","_regenerator","toStringTag","i","c","Generator","Object","create","_regeneratorDefine2","p","y","G","v","d","bind","l","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","String","Number","sharp","createCanvas","loadImage","registerFont","promises","fs","path","findPlayerImage","getFallbackImage","PolaroidFrameGenerator","_generatePlayerFrame","_callee","playerName","options","finalOptions","cacheKey","cachedFrame","playerImage","imageUrl","source","frameBuffer","savedFrame","_args","_t","_context","undefined","b","DEFAULT_OPTIONS","rotation","Math","random","generateCacheKey","getCachedFrame","ensureFontRegistered","url","createPolaroidFrame","saveFrameToCache","console","error","generatePlayerFrame","_x","_createPolaroidFrame","_callee2","imageBuffer","response","imageMetadata","originalWidth","originalHeight","_ref","frameWidth","frameHeight","imageWidth","imageHeight","resizedImageBuffer","canvas","ctx","resizedImage","imageX","imageY","_t2","_t3","_t4","_context2","startsWith","fetch","ok","Error","Buffer","arrayBuffer","readFile","join","process","cwd","metadata","width","height","calculateDimensions","resize","fit","position","jpeg","quality","toBuffer","getContext","fillStyle","fillRect","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","getBottomSpaceHeight","drawImage","addHandwrittenText","_x2","_x3","_x4","_addHandwrittenText","_callee3","textRotation","bottomSpaceHeight","textY","textX","_context3","font","concat","textOptions","fontSize","fontFamily","color","textAlign","textBaseline","save","translate","rotate","fillText","restore","_x5","_x6","_x7","_x8","_x9","style","aspectRatio","targetWidth","min","maxWidth","targetHeight","maxHeight","borderLeft","borderPercent","left","borderRight","right","borderTop","top","borderBottom","bottom","round","_ensureFontRegistered","_callee4","_t5","_context4","fontRegistered","access","FONT_PATH","family","warn","optionsHash","JSON","stringify","nameHash","toLowerCase","replace","_getCachedFrame","_callee5","framePath","_t6","_t7","_context5","CACHE_DIR","mkdir","recursive","localPath","cached","_x0","_x1","_saveFrameToCache","_callee6","_context6","writeFile","_x10","_x11","_x12","_x13","_x14","_cleanupCache","_callee7","maxAge","files","deletedCount","_iterator","_step","file","filePath","stats","_args7","_t8","_t9","_context7","readdir","endsWith","stat","Date","now","mtime","getTime","unlink","cleanupCache","_getCacheStats","_callee8","jpgFiles","totalSize","oldestTime","newestTime","_iterator2","_step2","_t0","_t1","_context8","size","max","totalFrames","oldestFrame","newestFrame","getCacheStats","cleanupFrameCache","getFrameCacheStats"],"sources":["frameGenerator.ts"],"sourcesContent":["/**\n * Dynamic Polaroid Frame Generator\n * Creates polaroid-style frames with handwritten text using Wikipedia images\n */\n\nimport sharp from \"sharp\";\nimport { createCanvas, loadImage, registerFont } from \"canvas\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { findPlayerImage, getFallbackImage } from \"./wikipediaService\";\n\nexport interface FrameOptions {\n  style: \"polaroid\" | \"trading-card\";\n  maxWidth: number;\n  maxHeight: number;\n  borderPercent: {\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n  };\n  textOptions: {\n    fontFamily: string;\n    fontSize: number;\n    color: string;\n    position: \"bottom-center\" | \"bottom-left\" | \"bottom-right\";\n  };\n  rotation: number; // degrees\n}\n\nexport interface GeneratedFrame {\n  url: string;\n  localPath: string;\n  width: number;\n  height: number;\n  playerName: string;\n  cached: boolean;\n  source: \"wikipedia\" | \"fallback\";\n}\n\nexport class PolaroidFrameGenerator {\n  private static readonly CACHE_DIR = path.join(\n    process.cwd(),\n    \"public\",\n    \"generated-frames\"\n  );\n  private static readonly FONT_PATH = path.join(\n    process.cwd(),\n    \"public\",\n    \"fonts\",\n    \"Diary-Notes.otf\"\n  );\n  private static fontRegistered = false;\n\n  private static readonly DEFAULT_OPTIONS: FrameOptions = {\n    style: \"polaroid\",\n    maxWidth: 300,\n    maxHeight: 400,\n    borderPercent: {\n      top: 5,\n      left: 5,\n      right: 5,\n      bottom: 20, // Extra space for handwritten text\n    },\n    textOptions: {\n      fontFamily: \"Diary-Notes\",\n      fontSize: 16,\n      color: \"#2c2c2c\",\n      position: \"bottom-center\",\n    },\n    rotation: 0, // Will be set randomly\n  };\n\n  /**\n   * Generate a polaroid frame for a player\n   */\n  static async generatePlayerFrame(\n    playerName: string,\n    options: Partial<FrameOptions> = {}\n  ): Promise<GeneratedFrame | null> {\n    try {\n      const finalOptions = { ...this.DEFAULT_OPTIONS, ...options };\n\n      // Generate random rotation if not specified\n      if (finalOptions.rotation === 0) {\n        finalOptions.rotation = (Math.random() - 0.5) * 16; // Â±8 degrees\n      }\n\n      // Check if frame already exists in cache\n      const cacheKey = this.generateCacheKey(playerName, finalOptions);\n      const cachedFrame = await this.getCachedFrame(cacheKey, playerName);\n\n      if (cachedFrame) {\n        return cachedFrame;\n      }\n\n      // Ensure font is registered\n      await this.ensureFontRegistered();\n\n      // Get player image\n      const playerImage = await findPlayerImage(playerName);\n      const imageUrl = playerImage?.url || getFallbackImage();\n      const source = playerImage?.source || \"fallback\";\n\n      // Generate the frame\n      const frameBuffer = await this.createPolaroidFrame(\n        imageUrl,\n        playerName,\n        finalOptions\n      );\n\n      // Save to cache\n      const savedFrame = await this.saveFrameToCache(\n        cacheKey,\n        frameBuffer,\n        playerName,\n        finalOptions,\n        source\n      );\n\n      return savedFrame;\n    } catch (error) {\n      console.error(\"Error generating player frame:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Create the actual polaroid frame with image and text\n   */\n  private static async createPolaroidFrame(\n    imageUrl: string,\n    playerName: string,\n    options: FrameOptions\n  ): Promise<Buffer> {\n    try {\n      // Load the source image\n      let imageBuffer: Buffer;\n\n      if (imageUrl.startsWith(\"http\")) {\n        const response = await fetch(imageUrl);\n        if (!response.ok) throw new Error(\"Failed to fetch image\");\n        imageBuffer = Buffer.from(await response.arrayBuffer());\n      } else {\n        // Local fallback image\n        imageBuffer = await fs.readFile(\n          path.join(process.cwd(), \"public\", imageUrl)\n        );\n      }\n\n      // Get image metadata\n      const imageMetadata = await sharp(imageBuffer).metadata();\n      const originalWidth = imageMetadata.width!;\n      const originalHeight = imageMetadata.height!;\n\n      // Calculate final frame dimensions\n      const { frameWidth, frameHeight, imageWidth, imageHeight } =\n        this.calculateDimensions(originalWidth, originalHeight, options);\n\n      // Resize the image to fit within the content area\n      const resizedImageBuffer = await sharp(imageBuffer)\n        .resize(imageWidth, imageHeight, {\n          fit: \"cover\",\n          position: \"center\",\n        })\n        .jpeg({ quality: 90 })\n        .toBuffer();\n\n      // Create canvas for the frame\n      const canvas = createCanvas(frameWidth, frameHeight);\n      const ctx = canvas.getContext(\"2d\");\n\n      // Fill with white background (polaroid frame)\n      ctx.fillStyle = \"#ffffff\";\n      ctx.fillRect(0, 0, frameWidth, frameHeight);\n\n      // Add subtle shadow/depth to the frame\n      ctx.shadowColor = \"rgba(0, 0, 0, 0.1)\";\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetX = 1;\n      ctx.shadowOffsetY = 1;\n\n      // Load and draw the resized image\n      const resizedImage = await loadImage(resizedImageBuffer);\n      const imageX = (frameWidth - imageWidth) / 2;\n      const imageY =\n        (frameHeight -\n          imageHeight -\n          this.getBottomSpaceHeight(frameHeight, options)) /\n        2;\n\n      ctx.drawImage(resizedImage, imageX, imageY, imageWidth, imageHeight);\n\n      // Reset shadow for text\n      ctx.shadowColor = \"transparent\";\n\n      // Add handwritten player name\n      await this.addHandwrittenText(\n        ctx,\n        playerName,\n        frameWidth,\n        frameHeight,\n        options\n      );\n\n      // Convert canvas to buffer\n      return canvas.toBuffer(\"image/jpeg\", { quality: 0.9 });\n    } catch (error) {\n      console.error(\"Error creating polaroid frame:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add handwritten text to the frame\n   */\n  private static async addHandwrittenText(\n    ctx: CanvasRenderingContext2D,\n    playerName: string,\n    frameWidth: number,\n    frameHeight: number,\n    options: FrameOptions\n  ): Promise<void> {\n    // Set font properties\n    ctx.font = `${options.textOptions.fontSize}px \"${options.textOptions.fontFamily}\"`;\n    ctx.fillStyle = options.textOptions.color;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    // Add slight rotation for handwritten effect\n    const textRotation = (Math.random() - 0.5) * 0.1; // Â±3 degrees\n\n    // Calculate text position\n    const bottomSpaceHeight = this.getBottomSpaceHeight(frameHeight, options);\n    const textY = frameHeight - bottomSpaceHeight / 2;\n\n    // Position variations based on style\n    let textX = frameWidth / 2;\n    if (options.textOptions.position === \"bottom-left\") {\n      textX = frameWidth * 0.25;\n      ctx.textAlign = \"left\";\n    } else if (options.textOptions.position === \"bottom-right\") {\n      textX = frameWidth * 0.75;\n      ctx.textAlign = \"right\";\n    }\n\n    // Apply rotation and draw text\n    ctx.save();\n    ctx.translate(textX, textY);\n    ctx.rotate(textRotation);\n\n    // Add text shadow for depth\n    ctx.shadowColor = \"rgba(0, 0, 0, 0.1)\";\n    ctx.shadowBlur = 1;\n    ctx.shadowOffsetX = 0.5;\n    ctx.shadowOffsetY = 0.5;\n\n    ctx.fillText(playerName, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Calculate frame and image dimensions\n   */\n  private static calculateDimensions(\n    originalWidth: number,\n    originalHeight: number,\n    options: FrameOptions\n  ): {\n    frameWidth: number;\n    frameHeight: number;\n    imageWidth: number;\n    imageHeight: number;\n  } {\n    // For polaroid style, maintain aspect ratio but fit within max constraints\n    if (options.style === \"polaroid\") {\n      const aspectRatio = originalWidth / originalHeight;\n\n      let targetWidth = Math.min(originalWidth, options.maxWidth);\n      let targetHeight = targetWidth / aspectRatio;\n\n      if (targetHeight > options.maxHeight) {\n        targetHeight = options.maxHeight;\n        targetWidth = targetHeight * aspectRatio;\n      }\n\n      // Calculate frame dimensions with borders\n      const borderLeft = targetWidth * (options.borderPercent.left / 100);\n      const borderRight = targetWidth * (options.borderPercent.right / 100);\n      const borderTop = targetHeight * (options.borderPercent.top / 100);\n      const borderBottom = targetHeight * (options.borderPercent.bottom / 100);\n\n      const frameWidth = targetWidth + borderLeft + borderRight;\n      const frameHeight = targetHeight + borderTop + borderBottom;\n\n      return {\n        frameWidth: Math.round(frameWidth),\n        frameHeight: Math.round(frameHeight),\n        imageWidth: Math.round(targetWidth),\n        imageHeight: Math.round(targetHeight),\n      };\n    } else {\n      // Trading card style - fixed dimensions\n      const frameWidth = options.maxWidth;\n      const frameHeight = options.maxHeight;\n\n      // Calculate image area within frame\n      const borderLeft = frameWidth * (options.borderPercent.left / 100);\n      const borderRight = frameWidth * (options.borderPercent.right / 100);\n      const borderTop = frameHeight * (options.borderPercent.top / 100);\n      const borderBottom = frameHeight * (options.borderPercent.bottom / 100);\n\n      const imageWidth = frameWidth - borderLeft - borderRight;\n      const imageHeight = frameHeight - borderTop - borderBottom;\n\n      return {\n        frameWidth,\n        frameHeight,\n        imageWidth: Math.round(imageWidth),\n        imageHeight: Math.round(imageHeight),\n      };\n    }\n  }\n\n  /**\n   * Get the height of the bottom space for text\n   */\n  private static getBottomSpaceHeight(\n    frameHeight: number,\n    options: FrameOptions\n  ): number {\n    return frameHeight * (options.borderPercent.bottom / 100);\n  }\n\n  /**\n   * Ensure the Diary-Notes font is registered\n   */\n  private static async ensureFontRegistered(): Promise<void> {\n    if (this.fontRegistered) return;\n\n    try {\n      await fs.access(this.FONT_PATH);\n      registerFont(this.FONT_PATH, { family: \"Diary-Notes\" });\n      this.fontRegistered = true;\n    } catch (error) {\n      console.warn(\"Diary-Notes font not found, using fallback font\");\n      // Fallback to a system font\n      this.DEFAULT_OPTIONS.textOptions.fontFamily = \"Comic Sans MS, cursive\";\n    }\n  }\n\n  /**\n   * Generate cache key for frame\n   */\n  private static generateCacheKey(\n    playerName: string,\n    options: FrameOptions\n  ): string {\n    const optionsHash = Buffer.from(JSON.stringify(options))\n      .toString(\"base64\")\n      .slice(0, 8);\n    const nameHash = playerName.toLowerCase().replace(/[^a-z0-9]/g, \"-\");\n    return `${nameHash}-${optionsHash}`;\n  }\n\n  /**\n   * Check if frame exists in cache\n   */\n  private static async getCachedFrame(\n    cacheKey: string,\n    playerName: string\n  ): Promise<GeneratedFrame | null> {\n    try {\n      await fs.access(this.CACHE_DIR);\n    } catch {\n      await fs.mkdir(this.CACHE_DIR, { recursive: true });\n      return null;\n    }\n\n    const framePath = path.join(this.CACHE_DIR, `${cacheKey}.jpg`);\n\n    try {\n      await fs.access(framePath);\n\n      // Get frame dimensions\n      const metadata = await sharp(framePath).metadata();\n\n      return {\n        url: `/generated-frames/${cacheKey}.jpg`,\n        localPath: framePath,\n        width: metadata.width!,\n        height: metadata.height!,\n        playerName,\n        cached: true,\n        source: \"wikipedia\", // We don't store this info, assume wikipedia\n      };\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Save generated frame to cache\n   */\n  private static async saveFrameToCache(\n    cacheKey: string,\n    frameBuffer: Buffer,\n    playerName: string,\n    options: FrameOptions,\n    source: \"wikipedia\" | \"fallback\"\n  ): Promise<GeneratedFrame> {\n    // Ensure cache directory exists\n    await fs.mkdir(this.CACHE_DIR, { recursive: true });\n\n    const framePath = path.join(this.CACHE_DIR, `${cacheKey}.jpg`);\n    await fs.writeFile(framePath, frameBuffer);\n\n    // Get dimensions\n    const metadata = await sharp(frameBuffer).metadata();\n\n    return {\n      url: `/generated-frames/${cacheKey}.jpg`,\n      localPath: framePath,\n      width: metadata.width!,\n      height: metadata.height!,\n      playerName,\n      cached: false,\n      source,\n    };\n  }\n\n  /**\n   * Clean up old cached frames\n   */\n  static async cleanupCache(\n    maxAge: number = 7 * 24 * 60 * 60 * 1000\n  ): Promise<number> {\n    try {\n      const files = await fs.readdir(this.CACHE_DIR);\n      let deletedCount = 0;\n\n      for (const file of files) {\n        if (!file.endsWith(\".jpg\")) continue;\n\n        const filePath = path.join(this.CACHE_DIR, file);\n        const stats = await fs.stat(filePath);\n\n        if (Date.now() - stats.mtime.getTime() > maxAge) {\n          await fs.unlink(filePath);\n          deletedCount++;\n        }\n      }\n\n      return deletedCount;\n    } catch (error) {\n      console.error(\"Error cleaning up cache:\", error);\n      return 0;\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  static async getCacheStats(): Promise<{\n    totalFrames: number;\n    totalSize: number;\n    oldestFrame: Date | null;\n    newestFrame: Date | null;\n  }> {\n    try {\n      const files = await fs.readdir(this.CACHE_DIR);\n      const jpgFiles = files.filter((f) => f.endsWith(\".jpg\"));\n\n      let totalSize = 0;\n      let oldestTime = Date.now();\n      let newestTime = 0;\n\n      for (const file of jpgFiles) {\n        const filePath = path.join(this.CACHE_DIR, file);\n        const stats = await fs.stat(filePath);\n        totalSize += stats.size;\n        oldestTime = Math.min(oldestTime, stats.mtime.getTime());\n        newestTime = Math.max(newestTime, stats.mtime.getTime());\n      }\n\n      return {\n        totalFrames: jpgFiles.length,\n        totalSize,\n        oldestFrame: jpgFiles.length > 0 ? new Date(oldestTime) : null,\n        newestFrame: jpgFiles.length > 0 ? new Date(newestTime) : null,\n      };\n    } catch (error) {\n      console.error(\"Error getting cache stats:\", error);\n      return {\n        totalFrames: 0,\n        totalSize: 0,\n        oldestFrame: null,\n        newestFrame: null,\n      };\n    }\n  }\n}\n\n// Export convenience functions\nexport const generatePlayerFrame = (\n  playerName: string,\n  options?: Partial<FrameOptions>\n) => PolaroidFrameGenerator.generatePlayerFrame(playerName, options);\n\nexport const cleanupFrameCache = (maxAge?: number) =>\n  PolaroidFrameGenerator.cleanupCache(maxAge);\n\nexport const getFrameCacheStats = () => PolaroidFrameGenerator.getCacheStats();\n"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAA,SAAAE,QAAAC,CAAA,sCAAAD,OAAA,wBAAAE,MAAA,uBAAAA,MAAA,CAAAC,QAAA,aAAAF,CAAA,kBAAAA,CAAA,gBAAAA,CAAA,WAAAA,CAAA,yBAAAC,MAAA,IAAAD,CAAA,CAAAG,WAAA,KAAAF,MAAA,IAAAD,CAAA,KAAAC,MAAA,CAAAG,SAAA,qBAAAJ,CAAA,KAAAD,OAAA,CAAAC,CAAA;AAAA,SAAAK,2BAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,yBAAAP,MAAA,IAAAK,CAAA,CAAAL,MAAA,CAAAC,QAAA,KAAAI,CAAA,qBAAAE,CAAA,QAAAC,KAAA,CAAAC,OAAA,CAAAJ,CAAA,MAAAE,CAAA,GAAAG,2BAAA,CAAAL,CAAA,MAAAC,CAAA,IAAAD,CAAA,uBAAAA,CAAA,CAAAM,MAAA,IAAAJ,CAAA,KAAAF,CAAA,GAAAE,CAAA,OAAAK,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,WAAAH,EAAA,IAAAP,CAAA,CAAAM,MAAA,KAAAK,IAAA,WAAAA,IAAA,MAAAC,KAAA,EAAAZ,CAAA,CAAAO,EAAA,UAAAN,CAAA,WAAAA,EAAAD,CAAA,UAAAA,CAAA,KAAAa,CAAA,EAAAL,CAAA,gBAAAM,SAAA,iJAAApB,CAAA,EAAAqB,CAAA,OAAAC,CAAA,gBAAAP,CAAA,WAAAA,EAAA,IAAAP,CAAA,GAAAA,CAAA,CAAAe,IAAA,CAAAjB,CAAA,MAAAU,CAAA,WAAAA,EAAA,QAAAV,CAAA,GAAAE,CAAA,CAAAgB,IAAA,WAAAH,CAAA,GAAAf,CAAA,CAAAW,IAAA,EAAAX,CAAA,KAAAC,CAAA,WAAAA,EAAAD,CAAA,IAAAgB,CAAA,OAAAtB,CAAA,GAAAM,CAAA,KAAAa,CAAA,WAAAA,EAAA,UAAAE,CAAA,YAAAb,CAAA,cAAAA,CAAA,8BAAAc,CAAA,QAAAtB,CAAA;AAAA,SAAAW,4BAAAL,CAAA,EAAAe,CAAA,QAAAf,CAAA,2BAAAA,CAAA,SAAAmB,iBAAA,CAAAnB,CAAA,EAAAe,CAAA,OAAAb,CAAA,MAAAkB,QAAA,CAAAH,IAAA,CAAAjB,CAAA,EAAAqB,KAAA,6BAAAnB,CAAA,IAAAF,CAAA,CAAAH,WAAA,KAAAK,CAAA,GAAAF,CAAA,CAAAH,WAAA,CAAAyB,IAAA,aAAApB,CAAA,cAAAA,CAAA,GAAAC,KAAA,CAAAoB,IAAA,CAAAvB,CAAA,oBAAAE,CAAA,+CAAAsB,IAAA,CAAAtB,CAAA,IAAAiB,iBAAA,CAAAnB,CAAA,EAAAe,CAAA;AAAA,SAAAI,kBAAAnB,CAAA,EAAAe,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAf,CAAA,CAAAM,MAAA,MAAAS,CAAA,GAAAf,CAAA,CAAAM,MAAA,YAAAL,CAAA,MAAAS,CAAA,GAAAP,KAAA,CAAAY,CAAA,GAAAd,CAAA,GAAAc,CAAA,EAAAd,CAAA,IAAAS,CAAA,CAAAT,CAAA,IAAAD,CAAA,CAAAC,CAAA,UAAAS,CAAA;AAAA,SAAAe,aAAA,IAdZ,uKAAAxB,CAAA,EAAAC,CAAA,EAAAF,CAAA,wBAAAL,MAAA,GAAAA,MAAA,OAAAe,CAAA,GAAAV,CAAA,CAAAJ,QAAA,kBAAAF,CAAA,GAAAM,CAAA,CAAA0B,WAAA,8BAAAC,EAAA3B,CAAA,EAAAU,CAAA,EAAAhB,CAAA,EAAAiC,CAAA,QAAAC,CAAA,GAAAlB,CAAA,IAAAA,CAAA,CAAAZ,SAAA,YAAA+B,SAAA,GAAAnB,CAAA,GAAAmB,SAAA,EAAAb,CAAA,GAAAc,MAAA,CAAAC,MAAA,CAAAH,CAAA,CAAA9B,SAAA,UAAAkC,mBAAA,CAAAhB,CAAA,uBAAAhB,CAAA,EAAAU,CAAA,EAAAhB,CAAA,QAAAiC,CAAA,EAAAC,CAAA,EAAAZ,CAAA,EAAAH,CAAA,MAAAoB,CAAA,GAAAvC,CAAA,QAAAwC,CAAA,OAAAC,CAAA,KAAAF,CAAA,KAAAvB,CAAA,KAAA0B,CAAA,EAAAnC,CAAA,EAAAc,CAAA,EAAAsB,CAAA,EAAAxB,CAAA,EAAAwB,CAAA,CAAAC,IAAA,CAAArC,CAAA,MAAAoC,CAAA,WAAAA,EAAAnC,CAAA,EAAAF,CAAA,WAAA2B,CAAA,GAAAzB,CAAA,EAAA0B,CAAA,MAAAZ,CAAA,GAAAf,CAAA,EAAAkC,CAAA,CAAAzB,CAAA,GAAAV,CAAA,EAAAe,CAAA,gBAAAsB,EAAArC,CAAA,EAAAU,CAAA,SAAAkB,CAAA,GAAA5B,CAAA,EAAAgB,CAAA,GAAAN,CAAA,EAAAR,CAAA,OAAAgC,CAAA,IAAArB,CAAA,KAAAnB,CAAA,IAAAQ,CAAA,GAAA+B,CAAA,CAAA3B,MAAA,EAAAJ,CAAA,UAAAR,CAAA,EAAAiC,CAAA,GAAAM,CAAA,CAAA/B,CAAA,GAAAmC,CAAA,GAAAF,CAAA,CAAAF,CAAA,EAAAM,CAAA,GAAAZ,CAAA,KAAA3B,CAAA,QAAAN,CAAA,GAAA6C,CAAA,KAAA7B,CAAA,MAAAM,CAAA,GAAAW,CAAA,EAAAC,CAAA,GAAAD,CAAA,YAAAC,CAAA,WAAAD,CAAA,MAAAA,CAAA,MAAA1B,CAAA,IAAA0B,CAAA,OAAAU,CAAA,MAAA3C,CAAA,GAAAM,CAAA,QAAAqC,CAAA,GAAAV,CAAA,QAAAC,CAAA,MAAAO,CAAA,CAAAC,CAAA,GAAA1B,CAAA,EAAAyB,CAAA,CAAAzB,CAAA,GAAAiB,CAAA,OAAAU,CAAA,GAAAE,CAAA,KAAA7C,CAAA,GAAAM,CAAA,QAAA2B,CAAA,MAAAjB,CAAA,IAAAA,CAAA,GAAA6B,CAAA,MAAAZ,CAAA,MAAA3B,CAAA,EAAA2B,CAAA,MAAAjB,CAAA,EAAAyB,CAAA,CAAAzB,CAAA,GAAA6B,CAAA,EAAAX,CAAA,cAAAlC,CAAA,IAAAM,CAAA,aAAAe,CAAA,QAAAmB,CAAA,OAAAxB,CAAA,qBAAAhB,CAAA,EAAAuC,CAAA,EAAAM,CAAA,QAAA1B,CAAA,YAAAC,SAAA,uCAAAoB,CAAA,UAAAD,CAAA,IAAAI,CAAA,CAAAJ,CAAA,EAAAM,CAAA,GAAAX,CAAA,GAAAK,CAAA,EAAAjB,CAAA,GAAAuB,CAAA,GAAArC,CAAA,GAAA0B,CAAA,OAAA3B,CAAA,GAAAe,CAAA,MAAAkB,CAAA,KAAAP,CAAA,KAAAC,CAAA,GAAAA,CAAA,QAAAA,CAAA,SAAAO,CAAA,CAAAzB,CAAA,QAAA2B,CAAA,CAAAT,CAAA,EAAAZ,CAAA,KAAAmB,CAAA,CAAAzB,CAAA,GAAAM,CAAA,GAAAmB,CAAA,CAAAC,CAAA,GAAApB,CAAA,aAAAH,CAAA,MAAAc,CAAA,QAAAC,CAAA,KAAAlC,CAAA,YAAAQ,CAAA,GAAAyB,CAAA,CAAAjC,CAAA,WAAAQ,CAAA,GAAAA,CAAA,CAAAe,IAAA,CAAAU,CAAA,EAAAX,CAAA,UAAAF,SAAA,2CAAAZ,CAAA,CAAAS,IAAA,SAAAT,CAAA,EAAAc,CAAA,GAAAd,CAAA,CAAAU,KAAA,EAAAgB,CAAA,SAAAA,CAAA,oBAAAA,CAAA,KAAA1B,CAAA,GAAAyB,CAAA,eAAAzB,CAAA,CAAAe,IAAA,CAAAU,CAAA,GAAAC,CAAA,SAAAZ,CAAA,GAAAF,SAAA,uCAAApB,CAAA,gBAAAkC,CAAA,OAAAD,CAAA,GAAA1B,CAAA,cAAAC,CAAA,IAAAgC,CAAA,GAAAC,CAAA,CAAAzB,CAAA,QAAAM,CAAA,GAAAhB,CAAA,CAAAiB,IAAA,CAAAP,CAAA,EAAAyB,CAAA,OAAApB,CAAA,kBAAAb,CAAA,IAAAyB,CAAA,GAAA1B,CAAA,EAAA2B,CAAA,MAAAZ,CAAA,GAAAd,CAAA,cAAAW,CAAA,mBAAAD,KAAA,EAAAV,CAAA,EAAAS,IAAA,EAAAuB,CAAA,SAAAlC,CAAA,EAAAN,CAAA,EAAAiC,CAAA,QAAAX,CAAA,QAAAD,CAAA,gBAAAc,UAAA,cAAAW,kBAAA,cAAAC,2BAAA,KAAAvC,CAAA,GAAA4B,MAAA,CAAAY,cAAA,MAAAd,CAAA,MAAAlB,CAAA,IAAAR,CAAA,CAAAA,CAAA,IAAAQ,CAAA,SAAAsB,mBAAA,CAAA9B,CAAA,OAAAQ,CAAA,iCAAAR,CAAA,GAAAc,CAAA,GAAAyB,0BAAA,CAAA3C,SAAA,GAAA+B,SAAA,CAAA/B,SAAA,GAAAgC,MAAA,CAAAC,MAAA,CAAAH,CAAA,YAAAf,EAAAZ,CAAA,WAAA6B,MAAA,CAAAa,cAAA,GAAAb,MAAA,CAAAa,cAAA,CAAA1C,CAAA,EAAAwC,0BAAA,KAAAxC,CAAA,CAAA2C,SAAA,GAAAH,0BAAA,EAAAT,mBAAA,CAAA/B,CAAA,EAAAP,CAAA,yBAAAO,CAAA,CAAAH,SAAA,GAAAgC,MAAA,CAAAC,MAAA,CAAAf,CAAA,GAAAf,CAAA,WAAAuC,iBAAA,CAAA1C,SAAA,GAAA2C,0BAAA,EAAAT,mBAAA,CAAAhB,CAAA,iBAAAyB,0BAAA,GAAAT,mBAAA,CAAAS,0BAAA,iBAAAD,iBAAA,GAAAA,iBAAA,CAAAK,WAAA,wBAAAb,mBAAA,CAAAS,0BAAA,EAAA/C,CAAA,wBAAAsC,mBAAA,CAAAhB,CAAA,GAAAgB,mBAAA,CAAAhB,CAAA,EAAAtB,CAAA,gBAAAsC,mBAAA,CAAAhB,CAAA,EAAAN,CAAA,iCAAAsB,mBAAA,CAAAhB,CAAA,8DAAAS,YAAA,YAAAA,aAAA,aAAAqB,CAAA,EAAAnB,CAAA,EAAAoB,CAAA,EAAAlC,CAAA;AAAA,SAAAmB,oBAAA/B,CAAA,EAAAD,CAAA,EAAAU,CAAA,EAAAR,CAAA,QAAAyB,CAAA,GAAAG,MAAA,CAAAkB,cAAA,QAAArB,CAAA,uBAAA1B,CAAA,IAAA0B,CAAA,QAAAK,mBAAA,YAAAiB,mBAAAhD,CAAA,EAAAD,CAAA,EAAAU,CAAA,EAAAR,CAAA,QAAAF,CAAA,EAAA2B,CAAA,GAAAA,CAAA,CAAA1B,CAAA,EAAAD,CAAA,IAAAY,KAAA,EAAAF,CAAA,EAAAwC,UAAA,GAAAhD,CAAA,EAAAiD,YAAA,GAAAjD,CAAA,EAAAkD,QAAA,GAAAlD,CAAA,MAAAD,CAAA,CAAAD,CAAA,IAAAU,CAAA,YAAAhB,CAAA,YAAAA,EAAAM,CAAA,EAAAU,CAAA,IAAAsB,mBAAA,CAAA/B,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAAoD,OAAA,CAAArD,CAAA,EAAAU,CAAA,EAAAT,CAAA,UAAAP,CAAA,aAAAA,CAAA,cAAAA,CAAA,oBAAAsC,mBAAA,CAAA/B,CAAA,EAAAD,CAAA,EAAAU,CAAA,EAAAR,CAAA;AAAA,SAAAoD,QAAArD,CAAA,EAAAD,CAAA,QAAAE,CAAA,GAAA4B,MAAA,CAAAyB,IAAA,CAAAtD,CAAA,OAAA6B,MAAA,CAAA0B,qBAAA,QAAA9D,CAAA,GAAAoC,MAAA,CAAA0B,qBAAA,CAAAvD,CAAA,GAAAD,CAAA,KAAAN,CAAA,GAAAA,CAAA,CAAA+D,MAAA,WAAAzD,CAAA,WAAA8B,MAAA,CAAA4B,wBAAA,CAAAzD,CAAA,EAAAD,CAAA,EAAAkD,UAAA,OAAAhD,CAAA,CAAAyD,IAAA,CAAAC,KAAA,CAAA1D,CAAA,EAAAR,CAAA,YAAAQ,CAAA;AAAA,SAAA2D,cAAA5D,CAAA,aAAAD,CAAA,MAAAA,CAAA,GAAA8D,SAAA,CAAAxD,MAAA,EAAAN,CAAA,UAAAE,CAAA,WAAA4D,SAAA,CAAA9D,CAAA,IAAA8D,SAAA,CAAA9D,CAAA,QAAAA,CAAA,OAAAsD,OAAA,CAAAxB,MAAA,CAAA5B,CAAA,OAAA6D,OAAA,WAAA/D,CAAA,IAAAgE,eAAA,CAAA/D,CAAA,EAAAD,CAAA,EAAAE,CAAA,CAAAF,CAAA,SAAA8B,MAAA,CAAAmC,yBAAA,GAAAnC,MAAA,CAAAoC,gBAAA,CAAAjE,CAAA,EAAA6B,MAAA,CAAAmC,yBAAA,CAAA/D,CAAA,KAAAoD,OAAA,CAAAxB,MAAA,CAAA5B,CAAA,GAAA6D,OAAA,WAAA/D,CAAA,IAAA8B,MAAA,CAAAkB,cAAA,CAAA/C,CAAA,EAAAD,CAAA,EAAA8B,MAAA,CAAA4B,wBAAA,CAAAxD,CAAA,EAAAF,CAAA,iBAAAC,CAAA;AAAA,SAAAkE,mBAAAzD,CAAA,EAAAR,CAAA,EAAAD,CAAA,EAAAD,CAAA,EAAAN,CAAA,EAAAqB,CAAA,EAAAa,CAAA,cAAAD,CAAA,GAAAjB,CAAA,CAAAK,CAAA,EAAAa,CAAA,GAAAZ,CAAA,GAAAW,CAAA,CAAAf,KAAA,WAAAF,CAAA,gBAAAT,CAAA,CAAAS,CAAA,KAAAiB,CAAA,CAAAhB,IAAA,GAAAT,CAAA,CAAAc,CAAA,IAAAoD,OAAA,CAAAC,OAAA,CAAArD,CAAA,EAAAsD,IAAA,CAAAtE,CAAA,EAAAN,CAAA;AAAA,SAAA6E,kBAAA7D,CAAA,6BAAAR,CAAA,SAAAD,CAAA,GAAA6D,SAAA,aAAAM,OAAA,WAAApE,CAAA,EAAAN,CAAA,QAAAqB,CAAA,GAAAL,CAAA,CAAAkD,KAAA,CAAA1D,CAAA,EAAAD,CAAA,YAAAuE,MAAA9D,CAAA,IAAAyD,kBAAA,CAAApD,CAAA,EAAAf,CAAA,EAAAN,CAAA,EAAA8E,KAAA,EAAAC,MAAA,UAAA/D,CAAA,cAAA+D,OAAA/D,CAAA,IAAAyD,kBAAA,CAAApD,CAAA,EAAAf,CAAA,EAAAN,CAAA,EAAA8E,KAAA,EAAAC,MAAA,WAAA/D,CAAA,KAAA8D,KAAA;AAAA,SAAAE,gBAAA3D,CAAA,EAAAL,CAAA,UAAAK,CAAA,YAAAL,CAAA,aAAAI,SAAA;AAAA,SAAA6D,kBAAA1E,CAAA,EAAAD,CAAA,aAAAE,CAAA,MAAAA,CAAA,GAAAF,CAAA,CAAAM,MAAA,EAAAJ,CAAA,UAAAR,CAAA,GAAAM,CAAA,CAAAE,CAAA,GAAAR,CAAA,CAAAwD,UAAA,GAAAxD,CAAA,CAAAwD,UAAA,QAAAxD,CAAA,CAAAyD,YAAA,kBAAAzD,CAAA,KAAAA,CAAA,CAAA0D,QAAA,QAAAtB,MAAA,CAAAkB,cAAA,CAAA/C,CAAA,EAAA2E,cAAA,CAAAlF,CAAA,CAAAmF,GAAA,GAAAnF,CAAA;AAAA,SAAAoF,aAAA7E,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAF,CAAA,IAAA2E,iBAAA,CAAA1E,CAAA,CAAAH,SAAA,EAAAE,CAAA,GAAAE,CAAA,IAAAyE,iBAAA,CAAA1E,CAAA,EAAAC,CAAA,GAAA4B,MAAA,CAAAkB,cAAA,CAAA/C,CAAA,iBAAAmD,QAAA,SAAAnD,CAAA;AAAA,SAAA+D,gBAAA/D,CAAA,EAAAD,CAAA,EAAAE,CAAA,YAAAF,CAAA,GAAA4E,cAAA,CAAA5E,CAAA,MAAAC,CAAA,GAAA6B,MAAA,CAAAkB,cAAA,CAAA/C,CAAA,EAAAD,CAAA,IAAAY,KAAA,EAAAV,CAAA,EAAAgD,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAAnD,CAAA,CAAAD,CAAA,IAAAE,CAAA,EAAAD,CAAA;AAAA,SAAA2E,eAAA1E,CAAA,QAAAyB,CAAA,GAAAoD,YAAA,CAAA7E,CAAA,gCAAAT,OAAA,CAAAkC,CAAA,IAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAoD,aAAA7E,CAAA,EAAAF,CAAA,oBAAAP,OAAA,CAAAS,CAAA,MAAAA,CAAA,SAAAA,CAAA,MAAAD,CAAA,GAAAC,CAAA,CAAAP,MAAA,CAAAqF,WAAA,kBAAA/E,CAAA,QAAA0B,CAAA,GAAA1B,CAAA,CAAAgB,IAAA,CAAAf,CAAA,EAAAF,CAAA,gCAAAP,OAAA,CAAAkC,CAAA,UAAAA,CAAA,YAAAb,SAAA,yEAAAd,CAAA,GAAAiF,MAAA,GAAAC,MAAA,EAAAhF,CAAA;AADA;AACA;AACA;AACA;;AAEA,OAAOiF,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,SAAS,EAAEC,YAAY,QAAQ,QAAQ;AAC9D,SAASC,QAAQ,IAAIC,EAAE,QAAQ,IAAI;AACnC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,oBAAoB;AA+BtE;AAAA;AAAA,IAAaC,sBAAsB;EAAA,SAAAA,uBAAA;IAAAlB,eAAA,OAAAkB,sBAAA;EAAA;EAAA,OAAAd,YAAA,CAAAc,sBAAA;IAAAf,GAAA;IAAAjE,KAAA;IAiCjC;AACF;AACA;IAFE;MAAA,IAAAiF,oBAAA,GAAAtB,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA+C,QACEC,UAAkB;MAAA;MAAA;QAAA,IAAAC,OAAA;UAAAC,YAAA;UAAAC,QAAA;UAAAC,WAAA;UAAAC,WAAA;UAAAC,QAAA;UAAAC,MAAA;UAAAC,WAAA;UAAAC,UAAA;UAAAC,KAAA,GAAA3C,SAAA;UAAA4C,EAAA;QAAA,OAAAjF,YAAA,GAAAqB,CAAA,WAAA6D,QAAA;UAAA,kBAAAA,QAAA,CAAAjG,CAAA;YAAA;cAClBsF,OAA8B,GAAAS,KAAA,CAAAnG,MAAA,QAAAmG,KAAA,QAAAG,SAAA,GAAAH,KAAA,OAAAlH,cAAA,GAAAsH,CAAA,UAAG,CAAC,CAAC;cAAAtH,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAA1E,CAAA;cAG3BgE,YAAY,IAAA1G,cAAA,GAAAkB,CAAA,OAAAoD,aAAA,CAAAA,aAAA,KAAQ,IAAI,CAACiD,eAAe,GAAKd,OAAO,IAE1D;cAAAzG,cAAA,GAAAkB,CAAA;cACA,IAAIwF,YAAY,CAACc,QAAQ,KAAK,CAAC,EAAE;gBAAA;gBAAAxH,cAAA,GAAAsH,CAAA;gBAAAtH,cAAA,GAAAkB,CAAA;gBAC/BwF,YAAY,CAACc,QAAQ,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;cACtD,CAAC;cAAA;cAAA;gBAAA1H,cAAA,GAAAsH,CAAA;cAAA;;cAED;cACMX,QAAQ,IAAA3G,cAAA,GAAAkB,CAAA,OAAG,IAAI,CAACyG,gBAAgB,CAACnB,UAAU,EAAEE,YAAY,CAAC;cAAA1G,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAAjG,CAAA;cAAA,OACtC,IAAI,CAACyG,cAAc,CAACjB,QAAQ,EAAEH,UAAU,CAAC;YAAA;cAA7DI,WAAW,GAAAQ,QAAA,CAAAvE,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,KAEb0F,WAAW;gBAAAQ,QAAA,CAAAjG,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAA,OAAAkG,QAAA,CAAA5F,CAAA,IACNoF,WAAW;YAAA;cAAA5G,cAAA,GAAAsH,CAAA;YAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAAjG,CAAA;cAAA,OAId,IAAI,CAAC0G,oBAAoB,CAAC,CAAC;YAAA;cAAA7H,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAAjG,CAAA;cAAA,OAGPgF,eAAe,CAACK,UAAU,CAAC;YAAA;cAA/CK,WAAW,GAAAO,QAAA,CAAAvE,CAAA;cACXiE,QAAQ,IAAA9G,cAAA,GAAAkB,CAAA;cAAG;cAAA,CAAAlB,cAAA,GAAAsH,CAAA,UAAAT,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEiB,GAAG;cAAA;cAAA,CAAA9H,cAAA,GAAAsH,CAAA,UAAIlB,gBAAgB,CAAC,CAAC;cACjDW,MAAM,IAAA/G,cAAA,GAAAkB,CAAA;cAAG;cAAA,CAAAlB,cAAA,GAAAsH,CAAA,UAAAT,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,MAAM;cAAA;cAAA,CAAA/G,cAAA,GAAAsH,CAAA,UAAI,UAAU,IAEhD;cAAAtH,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAAjG,CAAA;cAAA,OAC0B,IAAI,CAAC4G,mBAAmB,CAChDjB,QAAQ,EACRN,UAAU,EACVE,YACF,CAAC;YAAA;cAJKM,WAAW,GAAAI,QAAA,CAAAvE,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAAkG,QAAA,CAAAjG,CAAA;cAAA,OAOQ,IAAI,CAAC6G,gBAAgB,CAC5CrB,QAAQ,EACRK,WAAW,EACXR,UAAU,EACVE,YAAY,EACZK,MACF,CAAC;YAAA;cANKE,UAAU,GAAAG,QAAA,CAAAvE,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,OAAAkG,QAAA,CAAA5F,CAAA,IAQTyF,UAAU;YAAA;cAAAG,QAAA,CAAA1E,CAAA;cAAAyE,EAAA,GAAAC,QAAA,CAAAvE,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAEjB+G,OAAO,CAACC,KAAK,CAAC,gCAAgC;cAAA;cAAAf,EAAO,CAAC;cAACnH,cAAA,GAAAkB,CAAA;cAAA,OAAAkG,QAAA,CAAA5F,CAAA,IAChD,IAAI;UAAA;QAAA,GAAA+E,OAAA;MAAA,CAEd;MAAA,SAjDY4B,mBAAmBA,CAAAC,EAAA;QAAA,OAAA9B,oBAAA,CAAAjC,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAnB4D,mBAAmB;IAAA;IAmDhC;AACF;AACA;IAFE;EAAA;IAAA7C,GAAA;IAAAjE,KAAA;MAAA,IAAAgH,oBAAA,GAAArD,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA8E,SACExB,QAAgB,EAChBN,UAAkB,EAClBC,OAAqB;MAAA;MAAA;QAAA,IAAA8B,WAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,cAAA,EAAAC,IAAA,EAAAC,UAAA,EAAAC,WAAA,EAAAC,UAAA,EAAAC,WAAA,EAAAC,kBAAA,EAAAC,MAAA,EAAAC,GAAA,EAAAC,YAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAvH,YAAA,GAAAqB,CAAA,WAAAmG,SAAA;UAAA,kBAAAA,SAAA,CAAAvI,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAhH,CAAA;cAGnB;cAAA1C,cAAA,GAAAkB,CAAA;cAAA,KAGI4F,QAAQ,CAAC6C,UAAU,CAAC,MAAM,CAAC;gBAAAD,SAAA,CAAAvI,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OACNyI,KAAK,CAAC9C,QAAQ,CAAC;YAAA;cAAhC0B,QAAQ,GAAAkB,SAAA,CAAA7G,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,IACTsH,QAAQ,CAACqB,EAAE;gBAAAH,SAAA,CAAAvI,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAA,MAAQ,IAAI4I,KAAK,CAAC,uBAAuB,CAAC;YAAA;cAAA9J,cAAA,GAAAsH,CAAA;YAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAqI,GAAA,GAC5CQ,MAAM;cAAAL,SAAA,CAAAvI,CAAA;cAAA,OAAYqH,QAAQ,CAACwB,WAAW,CAAC,CAAC;YAAA;cAAAR,GAAA,GAAAE,SAAA,CAAA7G,CAAA;cAAtD0F,WAAW,GAAAgB,GAAA,CAAUvH,IAAI,CAAAN,IAAA,CAAA6H,GAAA,EAAAC,GAAA;cAAAE,SAAA,CAAAvI,CAAA;cAAA;YAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OAGL8E,EAAE,CAACgE,QAAQ,CAC7B/D,IAAI,CAACgE,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAEtD,QAAQ,CAC7C,CAAC;YAAA;cAFDyB,WAAW,GAAAmB,SAAA,CAAA7G,CAAA;YAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OAMeyE,KAAK,CAAC2C,WAAW,CAAC,CAAC8B,QAAQ,CAAC,CAAC;YAAA;cAAnD5B,aAAa,GAAAiB,SAAA,CAAA7G,CAAA;cACb6F,aAAa,IAAA1I,cAAA,GAAAkB,CAAA,QAAGuH,aAAa,CAAC6B,KAAK;cACnC3B,cAAc,IAAA3I,cAAA,GAAAkB,CAAA,QAAGuH,aAAa,CAAC8B,MAAM,GAE3C;cAAA3B,IAAA,IAAA5I,cAAA,GAAAkB,CAAA,QAEE,IAAI,CAACsJ,mBAAmB,CAAC9B,aAAa,EAAEC,cAAc,EAAElC,OAAO,CAAC,GAD1DoC,UAAU,GAAAD,IAAA,CAAVC,UAAU,EAAEC,WAAW,GAAAF,IAAA,CAAXE,WAAW,EAAEC,UAAU,GAAAH,IAAA,CAAVG,UAAU,EAAEC,WAAW,GAAAJ,IAAA,CAAXI,WAAW,EAGxD;cAAAhJ,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OACiCyE,KAAK,CAAC2C,WAAW,CAAC,CAChDkC,MAAM,CAAC1B,UAAU,EAAEC,WAAW,EAAE;gBAC/B0B,GAAG,EAAE,OAAO;gBACZC,QAAQ,EAAE;cACZ,CAAC,CAAC,CACDC,IAAI,CAAC;gBAAEC,OAAO,EAAE;cAAG,CAAC,CAAC,CACrBC,QAAQ,CAAC,CAAC;YAAA;cANP7B,kBAAkB,GAAAS,SAAA,CAAA7G,CAAA;cAQxB;cACMqG,MAAM,IAAAlJ,cAAA,GAAAkB,CAAA,QAAG2E,YAAY,CAACgD,UAAU,EAAEC,WAAW,CAAC;cAC9CK,GAAG,IAAAnJ,cAAA,GAAAkB,CAAA,QAAGgI,MAAM,CAAC6B,UAAU,CAAC,IAAI,CAAC,GAEnC;cAAA/K,cAAA,GAAAkB,CAAA;cACAiI,GAAG,CAAC6B,SAAS,GAAG,SAAS;cAAChL,cAAA,GAAAkB,CAAA;cAC1BiI,GAAG,CAAC8B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEpC,UAAU,EAAEC,WAAW,CAAC;;cAE3C;cAAA9I,cAAA,GAAAkB,CAAA;cACAiI,GAAG,CAAC+B,WAAW,GAAG,oBAAoB;cAAClL,cAAA,GAAAkB,CAAA;cACvCiI,GAAG,CAACgC,UAAU,GAAG,CAAC;cAACnL,cAAA,GAAAkB,CAAA;cACnBiI,GAAG,CAACiC,aAAa,GAAG,CAAC;cAACpL,cAAA,GAAAkB,CAAA;cACtBiI,GAAG,CAACkC,aAAa,GAAG,CAAC;;cAErB;cAAArL,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OAC2B2E,SAAS,CAACmD,kBAAkB,CAAC;YAAA;cAAlDG,YAAY,GAAAM,SAAA,CAAA7G,CAAA;cACZwG,MAAM,IAAArJ,cAAA,GAAAkB,CAAA,QAAG,CAAC2H,UAAU,GAAGE,UAAU,IAAI,CAAC;cACtCO,MAAM,IAAAtJ,cAAA,GAAAkB,CAAA,QACV,CAAC4H,WAAW,GACVE,WAAW,GACX,IAAI,CAACsC,oBAAoB,CAACxC,WAAW,EAAErC,OAAO,CAAC,IACjD,CAAC;cAAAzG,cAAA,GAAAkB,CAAA;cAEHiI,GAAG,CAACoC,SAAS,CAACnC,YAAY,EAAEC,MAAM,EAAEC,MAAM,EAAEP,UAAU,EAAEC,WAAW,CAAC;;cAEpE;cAAAhJ,cAAA,GAAAkB,CAAA;cACAiI,GAAG,CAAC+B,WAAW,GAAG,aAAa;;cAE/B;cAAAlL,cAAA,GAAAkB,CAAA;cAAAwI,SAAA,CAAAvI,CAAA;cAAA,OACM,IAAI,CAACqK,kBAAkB,CAC3BrC,GAAG,EACH3C,UAAU,EACVqC,UAAU,EACVC,WAAW,EACXrC,OACF,CAAC;YAAA;cAAAzG,cAAA,GAAAkB,CAAA;cAAA,OAAAwI,SAAA,CAAAlI,CAAA,IAGM0H,MAAM,CAAC4B,QAAQ,CAAC,YAAY,EAAE;gBAAED,OAAO,EAAE;cAAI,CAAC,CAAC;YAAA;cAAAnB,SAAA,CAAAhH,CAAA;cAAA+G,GAAA,GAAAC,SAAA,CAAA7G,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAEtD+G,OAAO,CAACC,KAAK,CAAC,gCAAgC;cAAA;cAAAuB,GAAO,CAAC;cAACzJ,cAAA,GAAAkB,CAAA;cAAA,MAAAuI,GAAA;YAAA;cAAA,OAAAC,SAAA,CAAAlI,CAAA;UAAA;QAAA,GAAA8G,QAAA;MAAA,CAG1D;MAAA,SAjFoBP,mBAAmBA,CAAA0D,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAtD,oBAAA,CAAAhE,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAnBwD,mBAAmB;IAAA;IAmFxC;AACF;AACA;IAFE;EAAA;IAAAzC,GAAA;IAAAjE,KAAA;MAAA,IAAAuK,mBAAA,GAAA5G,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAAqI,SACE1C,GAA6B,EAC7B3C,UAAkB,EAClBqC,UAAkB,EAClBC,WAAmB,EACnBrC,OAAqB;MAAA;MAAA;QAAA,IAAAqF,YAAA,EAAAC,iBAAA,EAAAC,KAAA,EAAAC,KAAA;QAAA,OAAA/J,YAAA,GAAAqB,CAAA,WAAA2I,SAAA;UAAA,kBAAAA,SAAA,CAAA/K,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAErB;cACAiI,GAAG,CAACgD,IAAI;cAAA;cAAA,GAAAC,MAAA,CAAM3F,OAAO,CAAC4F,WAAW,CAACC,QAAQ,WAAAF,MAAA,CAAO3F,OAAO,CAAC4F,WAAW,CAACE,UAAU,OAAG;cAACvM,cAAA,GAAAkB,CAAA;cACnFiI,GAAG,CAAC6B,SAAS,GAAGvE,OAAO,CAAC4F,WAAW,CAACG,KAAK;cAACxM,cAAA,GAAAkB,CAAA;cAC1CiI,GAAG,CAACsD,SAAS,GAAG,QAAQ;cAACzM,cAAA,GAAAkB,CAAA;cACzBiI,GAAG,CAACuD,YAAY,GAAG,QAAQ;;cAE3B;cACMZ,YAAY,IAAA9L,cAAA,GAAAkB,CAAA,QAAG,CAACuG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAE;cAElD;cACMqE,iBAAiB,IAAA/L,cAAA,GAAAkB,CAAA,QAAG,IAAI,CAACoK,oBAAoB,CAACxC,WAAW,EAAErC,OAAO,CAAC;cACnEuF,KAAK,IAAAhM,cAAA,GAAAkB,CAAA,QAAG4H,WAAW,GAAGiD,iBAAiB,GAAG,CAAC,GAEjD;cACIE,KAAK,IAAAjM,cAAA,GAAAkB,CAAA,QAAG2H,UAAU,GAAG,CAAC;cAAA7I,cAAA,GAAAkB,CAAA;cAC1B,IAAIuF,OAAO,CAAC4F,WAAW,CAAC1B,QAAQ,KAAK,aAAa,EAAE;gBAAA;gBAAA3K,cAAA,GAAAsH,CAAA;gBAAAtH,cAAA,GAAAkB,CAAA;gBAClD+K,KAAK,GAAGpD,UAAU,GAAG,IAAI;gBAAC;gBAAA7I,cAAA,GAAAkB,CAAA;gBAC1BiI,GAAG,CAACsD,SAAS,GAAG,MAAM;cACxB,CAAC,MAAM;gBAAA;gBAAAzM,cAAA,GAAAsH,CAAA;gBAAAtH,cAAA,GAAAkB,CAAA;gBAAA,IAAIuF,OAAO,CAAC4F,WAAW,CAAC1B,QAAQ,KAAK,cAAc,EAAE;kBAAA;kBAAA3K,cAAA,GAAAsH,CAAA;kBAAAtH,cAAA,GAAAkB,CAAA;kBAC1D+K,KAAK,GAAGpD,UAAU,GAAG,IAAI;kBAAC;kBAAA7I,cAAA,GAAAkB,CAAA;kBAC1BiI,GAAG,CAACsD,SAAS,GAAG,OAAO;gBACzB,CAAC;gBAAA;gBAAA;kBAAAzM,cAAA,GAAAsH,CAAA;gBAAA;cAAD;;cAEA;cAAAtH,cAAA,GAAAkB,CAAA;cACAiI,GAAG,CAACwD,IAAI,CAAC,CAAC;cAAC3M,cAAA,GAAAkB,CAAA;cACXiI,GAAG,CAACyD,SAAS,CAACX,KAAK,EAAED,KAAK,CAAC;cAAChM,cAAA,GAAAkB,CAAA;cAC5BiI,GAAG,CAAC0D,MAAM,CAACf,YAAY,CAAC;;cAExB;cAAA9L,cAAA,GAAAkB,CAAA;cACAiI,GAAG,CAAC+B,WAAW,GAAG,oBAAoB;cAAClL,cAAA,GAAAkB,CAAA;cACvCiI,GAAG,CAACgC,UAAU,GAAG,CAAC;cAACnL,cAAA,GAAAkB,CAAA;cACnBiI,GAAG,CAACiC,aAAa,GAAG,GAAG;cAACpL,cAAA,GAAAkB,CAAA;cACxBiI,GAAG,CAACkC,aAAa,GAAG,GAAG;cAACrL,cAAA,GAAAkB,CAAA;cAExBiI,GAAG,CAAC2D,QAAQ,CAACtG,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;cAACxG,cAAA,GAAAkB,CAAA;cAC/BiI,GAAG,CAAC4D,OAAO,CAAC,CAAC;YAAC;cAAA,OAAAb,SAAA,CAAA1K,CAAA;UAAA;QAAA,GAAAqK,QAAA;MAAA,CACf;MAAA,SA3CoBL,kBAAkBA,CAAAwB,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAxB,mBAAA,CAAAvH,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAlBiH,kBAAkB;IAAA;IA6CvC;AACF;AACA;IAFE;EAAA;IAAAlG,GAAA;IAAAjE,KAAA,EAGA,SAAemJ,mBAAmBA,CAChC9B,aAAqB,EACrBC,cAAsB,EACtBlC,OAAqB,EAMrB;MAAA;MAAAzG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAkB,CAAA;MACA;MACA,IAAIuF,OAAO,CAAC4G,KAAK,KAAK,UAAU,EAAE;QAAA;QAAArN,cAAA,GAAAsH,CAAA;QAChC,IAAMgG,WAAW;QAAA;QAAA,CAAAtN,cAAA,GAAAkB,CAAA,QAAGwH,aAAa,GAAGC,cAAc;QAElD,IAAI4E,WAAW;QAAA;QAAA,CAAAvN,cAAA,GAAAkB,CAAA,QAAGuG,IAAI,CAAC+F,GAAG,CAAC9E,aAAa,EAAEjC,OAAO,CAACgH,QAAQ,CAAC;QAC3D,IAAIC,YAAY;QAAA;QAAA,CAAA1N,cAAA,GAAAkB,CAAA,QAAGqM,WAAW,GAAGD,WAAW;QAAC;QAAAtN,cAAA,GAAAkB,CAAA;QAE7C,IAAIwM,YAAY,GAAGjH,OAAO,CAACkH,SAAS,EAAE;UAAA;UAAA3N,cAAA,GAAAsH,CAAA;UAAAtH,cAAA,GAAAkB,CAAA;UACpCwM,YAAY,GAAGjH,OAAO,CAACkH,SAAS;UAAC;UAAA3N,cAAA,GAAAkB,CAAA;UACjCqM,WAAW,GAAGG,YAAY,GAAGJ,WAAW;QAC1C,CAAC;QAAA;QAAA;UAAAtN,cAAA,GAAAsH,CAAA;QAAA;;QAED;QACA,IAAMsG,UAAU;QAAA;QAAA,CAAA5N,cAAA,GAAAkB,CAAA,QAAGqM,WAAW,IAAI9G,OAAO,CAACoH,aAAa,CAACC,IAAI,GAAG,GAAG,CAAC;QACnE,IAAMC,WAAW;QAAA;QAAA,CAAA/N,cAAA,GAAAkB,CAAA,QAAGqM,WAAW,IAAI9G,OAAO,CAACoH,aAAa,CAACG,KAAK,GAAG,GAAG,CAAC;QACrE,IAAMC,SAAS;QAAA;QAAA,CAAAjO,cAAA,GAAAkB,CAAA,QAAGwM,YAAY,IAAIjH,OAAO,CAACoH,aAAa,CAACK,GAAG,GAAG,GAAG,CAAC;QAClE,IAAMC,YAAY;QAAA;QAAA,CAAAnO,cAAA,GAAAkB,CAAA,QAAGwM,YAAY,IAAIjH,OAAO,CAACoH,aAAa,CAACO,MAAM,GAAG,GAAG,CAAC;QAExE,IAAMvF,UAAU;QAAA;QAAA,CAAA7I,cAAA,GAAAkB,CAAA,QAAGqM,WAAW,GAAGK,UAAU,GAAGG,WAAW;QACzD,IAAMjF,WAAW;QAAA;QAAA,CAAA9I,cAAA,GAAAkB,CAAA,QAAGwM,YAAY,GAAGO,SAAS,GAAGE,YAAY;QAAC;QAAAnO,cAAA,GAAAkB,CAAA;QAE5D,OAAO;UACL2H,UAAU,EAAEpB,IAAI,CAAC4G,KAAK,CAACxF,UAAU,CAAC;UAClCC,WAAW,EAAErB,IAAI,CAAC4G,KAAK,CAACvF,WAAW,CAAC;UACpCC,UAAU,EAAEtB,IAAI,CAAC4G,KAAK,CAACd,WAAW,CAAC;UACnCvE,WAAW,EAAEvB,IAAI,CAAC4G,KAAK,CAACX,YAAY;QACtC,CAAC;MACH,CAAC,MAAM;QAAA;QAAA1N,cAAA,GAAAsH,CAAA;QACL;QACA,IAAMuB,WAAU;QAAA;QAAA,CAAA7I,cAAA,GAAAkB,CAAA,QAAGuF,OAAO,CAACgH,QAAQ;QACnC,IAAM3E,YAAW;QAAA;QAAA,CAAA9I,cAAA,GAAAkB,CAAA,QAAGuF,OAAO,CAACkH,SAAS;;QAErC;QACA,IAAMC,WAAU;QAAA;QAAA,CAAA5N,cAAA,GAAAkB,CAAA,QAAG2H,WAAU,IAAIpC,OAAO,CAACoH,aAAa,CAACC,IAAI,GAAG,GAAG,CAAC;QAClE,IAAMC,YAAW;QAAA;QAAA,CAAA/N,cAAA,GAAAkB,CAAA,QAAG2H,WAAU,IAAIpC,OAAO,CAACoH,aAAa,CAACG,KAAK,GAAG,GAAG,CAAC;QACpE,IAAMC,UAAS;QAAA;QAAA,CAAAjO,cAAA,GAAAkB,CAAA,QAAG4H,YAAW,IAAIrC,OAAO,CAACoH,aAAa,CAACK,GAAG,GAAG,GAAG,CAAC;QACjE,IAAMC,aAAY;QAAA;QAAA,CAAAnO,cAAA,GAAAkB,CAAA,QAAG4H,YAAW,IAAIrC,OAAO,CAACoH,aAAa,CAACO,MAAM,GAAG,GAAG,CAAC;QAEvE,IAAMrF,UAAU;QAAA;QAAA,CAAA/I,cAAA,GAAAkB,CAAA,QAAG2H,WAAU,GAAG+E,WAAU,GAAGG,YAAW;QACxD,IAAM/E,WAAW;QAAA;QAAA,CAAAhJ,cAAA,GAAAkB,CAAA,QAAG4H,YAAW,GAAGmF,UAAS,GAAGE,aAAY;QAAC;QAAAnO,cAAA,GAAAkB,CAAA;QAE3D,OAAO;UACL2H,UAAU,EAAVA,WAAU;UACVC,WAAW,EAAXA,YAAW;UACXC,UAAU,EAAEtB,IAAI,CAAC4G,KAAK,CAACtF,UAAU,CAAC;UAClCC,WAAW,EAAEvB,IAAI,CAAC4G,KAAK,CAACrF,WAAW;QACrC,CAAC;MACH;IACF;;IAEA;AACF;AACA;EAFE;IAAA1D,GAAA;IAAAjE,KAAA,EAGA,SAAeiK,oBAAoBA,CACjCxC,WAAmB,EACnBrC,OAAqB,EACb;MAAA;MAAAzG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAkB,CAAA;MACR,OAAO4H,WAAW,IAAIrC,OAAO,CAACoH,aAAa,CAACO,MAAM,GAAG,GAAG,CAAC;IAC3D;;IAEA;AACF;AACA;EAFE;IAAA9I,GAAA;IAAAjE,KAAA;MAAA,IAAAiN,qBAAA,GAAAtJ,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA+K,SAAA;MAAA;MAAA;QAAA,IAAAC,GAAA;QAAA,OAAAtM,YAAA,GAAAqB,CAAA,WAAAkL,SAAA;UAAA,kBAAAA,SAAA,CAAAtN,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAA,KACM,IAAI,CAACwN,cAAc;gBAAAD,SAAA,CAAAtN,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAA,OAAAuN,SAAA,CAAAjN,CAAA;YAAA;cAAAxB,cAAA,GAAAsH,CAAA;YAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAuN,SAAA,CAAA/L,CAAA;cAAA1C,cAAA,GAAAkB,CAAA;cAAAuN,SAAA,CAAAtN,CAAA;cAAA,OAGf8E,EAAE,CAAC0I,MAAM,CAAC,IAAI,CAACC,SAAS,CAAC;YAAA;cAAA5O,cAAA,GAAAkB,CAAA;cAC/B6E,YAAY,CAAC,IAAI,CAAC6I,SAAS,EAAE;gBAAEC,MAAM,EAAE;cAAc,CAAC,CAAC;cAAC7O,cAAA,GAAAkB,CAAA;cACxD,IAAI,CAACwN,cAAc,GAAG,IAAI;cAACD,SAAA,CAAAtN,CAAA;cAAA;YAAA;cAAAsN,SAAA,CAAA/L,CAAA;cAAA8L,GAAA,GAAAC,SAAA,CAAA5L,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAE3B+G,OAAO,CAAC6G,IAAI,CAAC,iDAAiD,CAAC;cAC/D;cAAA9O,cAAA,GAAAkB,CAAA;cACA,IAAI,CAACqG,eAAe,CAAC8E,WAAW,CAACE,UAAU,GAAG,wBAAwB;YAAC;cAAA,OAAAkC,SAAA,CAAAjN,CAAA;UAAA;QAAA,GAAA+M,QAAA;MAAA,CAE1E;MAAA,SAZoB1G,oBAAoBA,CAAA;QAAA,OAAAyG,qBAAA,CAAAjK,KAAA,OAAAE,SAAA;MAAA;MAAA,OAApBsD,oBAAoB;IAAA;IAczC;AACF;AACA;IAFE;EAAA;IAAAvC,GAAA;IAAAjE,KAAA,EAGA,SAAesG,gBAAgBA,CAC7BnB,UAAkB,EAClBC,OAAqB,EACb;MAAA;MAAAzG,cAAA,GAAAsB,CAAA;MACR,IAAMyN,WAAW;MAAA;MAAA,CAAA/O,cAAA,GAAAkB,CAAA,SAAG6I,MAAM,CAAC/H,IAAI,CAACgN,IAAI,CAACC,SAAS,CAACxI,OAAO,CAAC,CAAC,CACrD5E,QAAQ,CAAC,QAAQ,CAAC,CAClBC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACd,IAAMoN,QAAQ;MAAA;MAAA,CAAAlP,cAAA,GAAAkB,CAAA,SAAGsF,UAAU,CAAC2I,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;MAAC;MAAApP,cAAA,GAAAkB,CAAA;MACrE,oCAAAkL,MAAA,CAAU8C,QAAQ,OAAA9C,MAAA,CAAI2C,WAAW;IACnC;;IAEA;AACF;AACA;EAFE;IAAAzJ,GAAA;IAAAjE,KAAA;MAAA,IAAAgO,eAAA,GAAArK,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA8L,SACE3I,QAAgB,EAChBH,UAAkB;MAAA;MAAA;QAAA,IAAA+I,SAAA,EAAAlF,QAAA,EAAAmF,GAAA,EAAAC,GAAA;QAAA,OAAAvN,YAAA,GAAAqB,CAAA,WAAAmM,SAAA;UAAA,kBAAAA,SAAA,CAAAvO,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAhN,CAAA;cAAA1C,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAvO,CAAA;cAAA,OAGV8E,EAAE,CAAC0I,MAAM,CAAC,IAAI,CAACgB,SAAS,CAAC;YAAA;cAAAD,SAAA,CAAAvO,CAAA;cAAA;YAAA;cAAAuO,SAAA,CAAAhN,CAAA;cAAA8M,GAAA,GAAAE,SAAA,CAAA7M,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAvO,CAAA;cAAA,OAEzB8E,EAAE,CAAC2J,KAAK,CAAC,IAAI,CAACD,SAAS,EAAE;gBAAEE,SAAS,EAAE;cAAK,CAAC,CAAC;YAAA;cAAA7P,cAAA,GAAAkB,CAAA;cAAA,OAAAwO,SAAA,CAAAlO,CAAA,IAC5C,IAAI;YAAA;cAGP+N,SAAS,IAAAvP,cAAA,GAAAkB,CAAA,SAAGgF,IAAI,CAACgE,IAAI,CAAC,IAAI,CAACyF,SAAS;cAAA;cAAA,GAAAvD,MAAA,CAAKzF,QAAQ,SAAM,CAAC;cAAA3G,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAhN,CAAA;cAAA1C,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAvO,CAAA;cAAA,OAGtD8E,EAAE,CAAC0I,MAAM,CAACY,SAAS,CAAC;YAAA;cAAAvP,cAAA,GAAAkB,CAAA;cAAAwO,SAAA,CAAAvO,CAAA;cAAA,OAGHyE,KAAK,CAAC2J,SAAS,CAAC,CAAClF,QAAQ,CAAC,CAAC;YAAA;cAA5CA,QAAQ,GAAAqF,SAAA,CAAA7M,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,OAAAwO,SAAA,CAAAlO,CAAA,IAEP;gBACLsG,GAAG;gBAAA;gBAAA,qBAAAsE,MAAA,CAAuBzF,QAAQ,SAAM;gBACxCmJ,SAAS,EAAEP,SAAS;gBACpBjF,KAAK,EAAED,QAAQ,CAACC,KAAM;gBACtBC,MAAM,EAAEF,QAAQ,CAACE,MAAO;gBACxB/D,UAAU,EAAVA,UAAU;gBACVuJ,MAAM,EAAE,IAAI;gBACZhJ,MAAM,EAAE,WAAW,CAAE;cACvB,CAAC;YAAA;cAAA2I,SAAA,CAAAhN,CAAA;cAAA+M,GAAA,GAAAC,SAAA,CAAA7M,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,OAAAwO,SAAA,CAAAlO,CAAA,IAEM,IAAI;UAAA;QAAA,GAAA8N,QAAA;MAAA,CAEd;MAAA,SA/BoB1H,cAAcA,CAAAoI,GAAA,EAAAC,GAAA;QAAA,OAAAZ,eAAA,CAAAhL,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAdqD,cAAc;IAAA;IAiCnC;AACF;AACA;IAFE;EAAA;IAAAtC,GAAA;IAAAjE,KAAA;MAAA,IAAA6O,iBAAA,GAAAlL,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA2M,SACExJ,QAAgB,EAChBK,WAAmB,EACnBR,UAAkB,EAClBC,OAAqB,EACrBM,MAAgC;MAAA;MAAA;QAAA,IAAAwI,SAAA,EAAAlF,QAAA;QAAA,OAAAnI,YAAA,GAAAqB,CAAA,WAAA6M,SAAA;UAAA,kBAAAA,SAAA,CAAAjP,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAAkP,SAAA,CAAAjP,CAAA;cAAA,OAG1B8E,EAAE,CAAC2J,KAAK,CAAC,IAAI,CAACD,SAAS,EAAE;gBAAEE,SAAS,EAAE;cAAK,CAAC,CAAC;YAAA;cAE7CN,SAAS,IAAAvP,cAAA,GAAAkB,CAAA,SAAGgF,IAAI,CAACgE,IAAI,CAAC,IAAI,CAACyF,SAAS;cAAA;cAAA,GAAAvD,MAAA,CAAKzF,QAAQ,SAAM,CAAC;cAAA3G,cAAA,GAAAkB,CAAA;cAAAkP,SAAA,CAAAjP,CAAA;cAAA,OACxD8E,EAAE,CAACoK,SAAS,CAACd,SAAS,EAAEvI,WAAW,CAAC;YAAA;cAAAhH,cAAA,GAAAkB,CAAA;cAAAkP,SAAA,CAAAjP,CAAA;cAAA,OAGnByE,KAAK,CAACoB,WAAW,CAAC,CAACqD,QAAQ,CAAC,CAAC;YAAA;cAA9CA,QAAQ,GAAA+F,SAAA,CAAAvN,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,OAAAkP,SAAA,CAAA5O,CAAA,IAEP;gBACLsG,GAAG;gBAAA;gBAAA,qBAAAsE,MAAA,CAAuBzF,QAAQ,SAAM;gBACxCmJ,SAAS,EAAEP,SAAS;gBACpBjF,KAAK,EAAED,QAAQ,CAACC,KAAM;gBACtBC,MAAM,EAAEF,QAAQ,CAACE,MAAO;gBACxB/D,UAAU,EAAVA,UAAU;gBACVuJ,MAAM,EAAE,KAAK;gBACbhJ,MAAM,EAANA;cACF,CAAC;UAAA;QAAA,GAAAoJ,QAAA;MAAA,CACF;MAAA,SAzBoBnI,gBAAgBA,CAAAsI,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;QAAA,OAAAR,iBAAA,CAAA7L,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAhByD,gBAAgB;IAAA;IA2BrC;AACF;AACA;IAFE;EAAA;IAAA1C,GAAA;IAAAjE,KAAA;MAAA,IAAAsP,aAAA,GAAA3L,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAAoN,SAAA;MAAA;MAAA;QAAA,IAAAC,MAAA;UAAAC,KAAA;UAAAC,YAAA;UAAAC,SAAA;UAAAC,KAAA;UAAAC,IAAA;UAAAC,QAAA;UAAAC,KAAA;UAAAC,MAAA,GAAA9M,SAAA;UAAA+M,GAAA;UAAAC,GAAA;QAAA,OAAArP,YAAA,GAAAqB,CAAA,WAAAiO,SAAA;UAAA,kBAAAA,SAAA,CAAArQ,CAAA;YAAA;cACE0P,MAAc,GAAAQ,MAAA,CAAAtQ,MAAA,QAAAsQ,MAAA,QAAAhK,SAAA,GAAAgK,MAAA,OAAArR,cAAA,GAAAsH,CAAA,WAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;cAAAtH,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAAsQ,SAAA,CAAA9O,CAAA;cAAA1C,cAAA,GAAAkB,CAAA;cAAAsQ,SAAA,CAAArQ,CAAA;cAAA,OAGlB8E,EAAE,CAACwL,OAAO,CAAC,IAAI,CAAC9B,SAAS,CAAC;YAAA;cAAxCmB,KAAK,GAAAU,SAAA,CAAA3O,CAAA;cACPkO,YAAY,IAAA/Q,cAAA,GAAAkB,CAAA,SAAG,CAAC;cAAAlB,cAAA,GAAAkB,CAAA;cAAA8P,SAAA,GAAAxQ,0BAAA,CAEDsQ,KAAK;cAAAU,SAAA,CAAA9O,CAAA;cAAAsO,SAAA,CAAA9P,CAAA;YAAA;cAAA,KAAA+P,KAAA,GAAAD,SAAA,CAAA7P,CAAA,IAAAC,IAAA;gBAAAoQ,SAAA,CAAArQ,CAAA;gBAAA;cAAA;cAAb+P,IAAI,GAAAD,KAAA,CAAA5P,KAAA;cAAArB,cAAA,GAAAkB,CAAA;cAAA,IACRgQ,IAAI,CAACQ,QAAQ,CAAC,MAAM,CAAC;gBAAAF,SAAA,CAAArQ,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAA,OAAAsQ,SAAA,CAAAhQ,CAAA;YAAA;cAAAxB,cAAA,GAAAsH,CAAA;YAAA;cAEpB6J,QAAQ,IAAAnR,cAAA,GAAAkB,CAAA,SAAGgF,IAAI,CAACgE,IAAI,CAAC,IAAI,CAACyF,SAAS,EAAEuB,IAAI,CAAC;cAAAlR,cAAA,GAAAkB,CAAA;cAAAsQ,SAAA,CAAArQ,CAAA;cAAA,OAC5B8E,EAAE,CAAC0L,IAAI,CAACR,QAAQ,CAAC;YAAA;cAA/BC,KAAK,GAAAI,SAAA,CAAA3O,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAAA,MAEP0Q,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGT,KAAK,CAACU,KAAK,CAACC,OAAO,CAAC,CAAC,GAAGlB,MAAM;gBAAAW,SAAA,CAAArQ,CAAA;gBAAA;cAAA;cAAAnB,cAAA,GAAAsH,CAAA;cAAAtH,cAAA,GAAAkB,CAAA;cAAAsQ,SAAA,CAAArQ,CAAA;cAAA,OACvC8E,EAAE,CAAC+L,MAAM,CAACb,QAAQ,CAAC;YAAA;cAAAnR,cAAA,GAAAkB,CAAA;cACzB6P,YAAY,EAAE;cAACS,SAAA,CAAArQ,CAAA;cAAA;YAAA;cAAAnB,cAAA,GAAAsH,CAAA;YAAA;cAAAkK,SAAA,CAAArQ,CAAA;cAAA;YAAA;cAAAqQ,SAAA,CAAArQ,CAAA;cAAA;YAAA;cAAAqQ,SAAA,CAAA9O,CAAA;cAAA4O,GAAA,GAAAE,SAAA,CAAA3O,CAAA;cAAAmO,SAAA,CAAAtQ,CAAA,CAAA4Q,GAAA;YAAA;cAAAE,SAAA,CAAA9O,CAAA;cAAAsO,SAAA,CAAA1P,CAAA;cAAA,OAAAkQ,SAAA,CAAAlQ,CAAA;YAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAA,OAAAsQ,SAAA,CAAAhQ,CAAA,IAIZuP,YAAY;YAAA;cAAAS,SAAA,CAAA9O,CAAA;cAAA6O,GAAA,GAAAC,SAAA,CAAA3O,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAEnB+G,OAAO,CAACC,KAAK,CAAC,0BAA0B;cAAA;cAAAqJ,GAAO,CAAC;cAACvR,cAAA,GAAAkB,CAAA;cAAA,OAAAsQ,SAAA,CAAAhQ,CAAA,IAC1C,CAAC;UAAA;QAAA,GAAAoP,QAAA;MAAA,CAEX;MAAA,SAxBYqB,YAAYA,CAAA;QAAA,OAAAtB,aAAA,CAAAtM,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAZ0N,YAAY;IAAA;IA0BzB;AACF;AACA;IAFE;EAAA;IAAA3M,GAAA;IAAAjE,KAAA;MAAA,IAAA6Q,cAAA,GAAAlN,iBAAA,cAAA9C,YAAA,GAAAsB,CAAA,CAGA;MAAA;MAAA2O,SAAA;MAAA;MAAA;QAAA,IAAArB,KAAA,EAAAsB,QAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAvB,IAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAsB,GAAA,EAAAC,GAAA;QAAA,OAAAzQ,YAAA,GAAAqB,CAAA,WAAAqP,SAAA;UAAA,kBAAAA,SAAA,CAAAzR,CAAA;YAAA;cAAAnB,cAAA,GAAAsB,CAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAA0R,SAAA,CAAAlQ,CAAA;cAAA1C,cAAA,GAAAkB,CAAA;cAAA0R,SAAA,CAAAzR,CAAA;cAAA,OAOwB8E,EAAE,CAACwL,OAAO,CAAC,IAAI,CAAC9B,SAAS,CAAC;YAAA;cAAxCmB,KAAK,GAAA8B,SAAA,CAAA/P,CAAA;cACLuP,QAAQ,IAAApS,cAAA,GAAAkB,CAAA,SAAG4P,KAAK,CAAC5M,MAAM,CAAC,UAAC5C,CAAC,EAAK;gBAAA;gBAAAtB,cAAA,GAAAsB,CAAA;gBAAAtB,cAAA,GAAAkB,CAAA;gBAAA,OAAAI,CAAC,CAACoQ,QAAQ,CAAC,MAAM,CAAC;cAAD,CAAC,CAAC;cAEpDW,SAAS,IAAArS,cAAA,GAAAkB,CAAA,SAAG,CAAC;cACboR,UAAU,IAAAtS,cAAA,GAAAkB,CAAA,SAAG0Q,IAAI,CAACC,GAAG,CAAC,CAAC;cACvBU,UAAU,IAAAvS,cAAA,GAAAkB,CAAA,SAAG,CAAC;cAAAlB,cAAA,GAAAkB,CAAA;cAAAsR,UAAA,GAAAhS,0BAAA,CAEC4R,QAAQ;cAAAQ,SAAA,CAAAlQ,CAAA;cAAA8P,UAAA,CAAAtR,CAAA;YAAA;cAAA,KAAAuR,MAAA,GAAAD,UAAA,CAAArR,CAAA,IAAAC,IAAA;gBAAAwR,SAAA,CAAAzR,CAAA;gBAAA;cAAA;cAAhB+P,IAAI,GAAAuB,MAAA,CAAApR,KAAA;cACP8P,QAAQ,IAAAnR,cAAA,GAAAkB,CAAA,SAAGgF,IAAI,CAACgE,IAAI,CAAC,IAAI,CAACyF,SAAS,EAAEuB,IAAI,CAAC;cAAAlR,cAAA,GAAAkB,CAAA;cAAA0R,SAAA,CAAAzR,CAAA;cAAA,OAC5B8E,EAAE,CAAC0L,IAAI,CAACR,QAAQ,CAAC;YAAA;cAA/BC,KAAK,GAAAwB,SAAA,CAAA/P,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cACXmR,SAAS,IAAIjB,KAAK,CAACyB,IAAI;cAAC7S,cAAA,GAAAkB,CAAA;cACxBoR,UAAU,GAAG7K,IAAI,CAAC+F,GAAG,CAAC8E,UAAU,EAAElB,KAAK,CAACU,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;cAAC/R,cAAA,GAAAkB,CAAA;cACzDqR,UAAU,GAAG9K,IAAI,CAACqL,GAAG,CAACP,UAAU,EAAEnB,KAAK,CAACU,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;YAAC;cAAAa,SAAA,CAAAzR,CAAA;cAAA;YAAA;cAAAyR,SAAA,CAAAzR,CAAA;cAAA;YAAA;cAAAyR,SAAA,CAAAlQ,CAAA;cAAAgQ,GAAA,GAAAE,SAAA,CAAA/P,CAAA;cAAA2P,UAAA,CAAA9R,CAAA,CAAAgS,GAAA;YAAA;cAAAE,SAAA,CAAAlQ,CAAA;cAAA8P,UAAA,CAAAlR,CAAA;cAAA,OAAAsR,SAAA,CAAAtR,CAAA;YAAA;cAAAtB,cAAA,GAAAkB,CAAA;cAAA,OAAA0R,SAAA,CAAApR,CAAA,IAGpD;gBACLuR,WAAW,EAAEX,QAAQ,CAACrR,MAAM;gBAC5BsR,SAAS,EAATA,SAAS;gBACTW,WAAW,EAAEZ,QAAQ,CAACrR,MAAM,GAAG,CAAC;gBAAA;gBAAA,CAAAf,cAAA,GAAAsH,CAAA,WAAG,IAAIsK,IAAI,CAACU,UAAU,CAAC;gBAAA;gBAAA,CAAAtS,cAAA,GAAAsH,CAAA,WAAG,IAAI;gBAC9D2L,WAAW,EAAEb,QAAQ,CAACrR,MAAM,GAAG,CAAC;gBAAA;gBAAA,CAAAf,cAAA,GAAAsH,CAAA,WAAG,IAAIsK,IAAI,CAACW,UAAU,CAAC;gBAAA;gBAAA,CAAAvS,cAAA,GAAAsH,CAAA,WAAG,IAAI;cAChE,CAAC;YAAA;cAAAsL,SAAA,CAAAlQ,CAAA;cAAAiQ,GAAA,GAAAC,SAAA,CAAA/P,CAAA;cAAA7C,cAAA,GAAAkB,CAAA;cAED+G,OAAO,CAACC,KAAK,CAAC,4BAA4B;cAAA;cAAAyK,GAAO,CAAC;cAAC3S,cAAA,GAAAkB,CAAA;cAAA,OAAA0R,SAAA,CAAApR,CAAA,IAC5C;gBACLuR,WAAW,EAAE,CAAC;gBACdV,SAAS,EAAE,CAAC;gBACZW,WAAW,EAAE,IAAI;gBACjBC,WAAW,EAAE;cACf,CAAC;UAAA;QAAA,GAAAd,QAAA;MAAA,CAEJ;MAAA,SArCYe,aAAaA,CAAA;QAAA,OAAAhB,cAAA,CAAA7N,KAAA,OAAAE,SAAA;MAAA;MAAA,OAAb2O,aAAa;IAAA;EAAA;AAAA;;AAwC5B;AAAA;AAAAzO,eAAA,CA/ca4B,sBAAsB,gBAAArG,cAAA,GAAAkB,CAAA,OACGgF,IAAI,CAACgE,IAAI,CAC3CC,OAAO,CAACC,GAAG,CAAC,CAAC,EACb,QAAQ,EACR,kBACF,CAAC;AAAA;AAAA3F,eAAA,CALU4B,sBAAsB,gBAAArG,cAAA,GAAAkB,CAAA,OAMGgF,IAAI,CAACgE,IAAI,CAC3CC,OAAO,CAACC,GAAG,CAAC,CAAC,EACb,QAAQ,EACR,OAAO,EACP,iBACF,CAAC;AAAA;AAAA3F,eAAA,CAXU4B,sBAAsB,qBAAArG,cAAA,GAAAkB,CAAA,OAYD,KAAK;AAAA;AAAAuD,eAAA,CAZ1B4B,sBAAsB,sBAAArG,cAAA,GAAAkB,CAAA,OAcuB;EACtDmM,KAAK,EAAE,UAAU;EACjBI,QAAQ,EAAE,GAAG;EACbE,SAAS,EAAE,GAAG;EACdE,aAAa,EAAE;IACbK,GAAG,EAAE,CAAC;IACNJ,IAAI,EAAE,CAAC;IACPE,KAAK,EAAE,CAAC;IACRI,MAAM,EAAE,EAAE,CAAE;EACd,CAAC;EACD/B,WAAW,EAAE;IACXE,UAAU,EAAE,aAAa;IACzBD,QAAQ,EAAE,EAAE;IACZE,KAAK,EAAE,SAAS;IAChB7B,QAAQ,EAAE;EACZ,CAAC;EACDnD,QAAQ,EAAE,CAAC,CAAE;AACf,CAAC;AAAA;AAAAxH,cAAA,GAAAkB,CAAA;AAibH,OAAO,IAAMiH,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAC9B3B,UAAkB,EAClBC,OAA+B,EAC5B;EAAA;EAAAzG,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAkB,CAAA;EAAA,OAAAmF,sBAAsB,CAAC8B,mBAAmB,CAAC3B,UAAU,EAAEC,OAAO,CAAC;AAAD,CAAC;AAAC;AAAAzG,cAAA,GAAAkB,CAAA;AAErE,OAAO,IAAMiS,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAItC,MAAe,EAC/C;EAAA;EAAA7Q,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAkB,CAAA;EAAA,OAAAmF,sBAAsB,CAAC4L,YAAY,CAACpB,MAAM,CAAC;AAAD,CAAC;AAAC;AAAA7Q,cAAA,GAAAkB,CAAA;AAE9C,OAAO,IAAMkS,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;EAAA;EAAApT,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAkB,CAAA;EAAA,OAAAmF,sBAAsB,CAAC6M,aAAa,CAAC,CAAC;AAAD,CAAC","ignoreList":[]}