03697c54dca8991f222cfcf32dbd3978
/* istanbul ignore next */
function cov_2q8m6pwksd() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/breaking-news/route.ts";
  var hash = "874adcefc4544221d9e0a2a675a52a500bebbc58";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/breaking-news/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "1": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "2": {
        start: {
          line: 18,
          column: 18
        },
        end: {
          line: 18,
          column: 28
        }
      },
      "3": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 31
        }
      },
      "4": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "5": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "6": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "7": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "8": {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "9": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "10": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 61
        }
      },
      "11": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "12": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 111,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 25
          }
        },
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 19
          }
        }, {
          start: {
            line: 26,
            column: 23
          },
          end: {
            line: 26,
            column: 65
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "874adcefc4544221d9e0a2a675a52a500bebbc58"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2q8m6pwksd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2q8m6pwksd();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Breaking News API
 * Returns Terry's daily shitpost headlines
 */

import { NextResponse } from "next/server";
import { getCurrentBreakingNews, needsNewBreakingNews } from "@/lib/breakingNews/dailyTicker";
import { prisma } from "@/lib/prisma";
export var dynamic =
/* istanbul ignore next */
(cov_2q8m6pwksd().s[0]++, "force-dynamic");
export
/* istanbul ignore next */
function GET() {
  return _GET.apply(this, arguments);
}
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee()
  /* istanbul ignore next */
  {
    var today, cachedNews, stories, fallbackStories, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_2q8m6pwksd().f[0]++;
          cov_2q8m6pwksd().s[1]++;
          _context.p = 1;
          // Check if we have today's breaking news cached
          today = (cov_2q8m6pwksd().s[2]++, new Date());
          cov_2q8m6pwksd().s[3]++;
          today.setHours(0, 0, 0, 0);
          cov_2q8m6pwksd().s[4]++;
          _context.n = 2;
          return prisma.systemConfig.findUnique({
            where: {
              key: "daily_breaking_news"
            }
          });
        case 2:
          cachedNews = _context.v;
          cov_2q8m6pwksd().s[5]++;
          if (!(
          /* istanbul ignore next */
          (cov_2q8m6pwksd().b[1][0]++, !cachedNews) ||
          /* istanbul ignore next */
          (cov_2q8m6pwksd().b[1][1]++, needsNewBreakingNews(cachedNews.updatedAt)))) {
            _context.n = 5;
            break;
          }
          cov_2q8m6pwksd().b[0][0]++;
          cov_2q8m6pwksd().s[6]++;
          _context.n = 3;
          return getCurrentBreakingNews();
        case 3:
          stories = _context.v;
          cov_2q8m6pwksd().s[7]++;
          _context.n = 4;
          return prisma.systemConfig.upsert({
            where: {
              key: "daily_breaking_news"
            },
            update: {
              value: stories,
              updatedAt: new Date()
            },
            create: {
              key: "daily_breaking_news",
              value: stories,
              description: "Terry's daily breaking news shitposts"
            }
          });
        case 4:
          cov_2q8m6pwksd().s[8]++;
          return _context.a(2, NextResponse.json({
            success: true,
            data: stories,
            generated: new Date(),
            cached: false
          }));
        case 5:
          cov_2q8m6pwksd().b[0][1]++;
        case 6:
          cov_2q8m6pwksd().s[9]++;
          return _context.a(2, NextResponse.json({
            success: true,
            data: cachedNews.value,
            generated: cachedNews.updatedAt,
            cached: true
          }));
        case 7:
          _context.p = 7;
          _t = _context.v;
          cov_2q8m6pwksd().s[10]++;
          console.error("Breaking news generation failed:",
          /* istanbul ignore next */
          _t);

          // Return fallback stories on error
          fallbackStories = (cov_2q8m6pwksd().s[11]++, [{
            id: "fallback-1",
            headline: "ARSENAL PREPARING £200M BID FOR PLAYER WHO DOESN'T EXIST YET",
            timestamp: new Date(),
            emoji: ""
          }, {
            id: "fallback-2",
            headline: "CHELSEA SIGN 8TH MIDFIELDER THIS WINDOW, STILL CAN'T FIND ONE WHO CAN PASS",
            timestamp: new Date(),
            emoji: ""
          }, {
            id: "fallback-3",
            headline: "MAN UNITED 'MONITORING' SITUATION OF LITERALLY EVERYONE",
            timestamp: new Date(),
            emoji: ""
          }, {
            id: "fallback-4",
            headline: "EXCLUSIVE: PLAYER'S BARBER'S COUSIN SPOTTED NEAR TRAINING GROUND",
            timestamp: new Date(),
            emoji: ""
          }, {
            id: "fallback-5",
            headline: "BREAKING: FOOTBALL CONTINUES TO EXIST DESPITE BEST EFFORTS",
            timestamp: new Date(),
            emoji: ""
          }, {
            id: "fallback-6",
            headline: "SHOCK: TRANSFER ACTUALLY MAKES SENSE - SOURCES CONFUSED",
            timestamp: new Date(),
            emoji: ""
          }]);
          cov_2q8m6pwksd().s[12]++;
          return _context.a(2, NextResponse.json({
            success: true,
            data: fallbackStories,
            generated: new Date(),
            cached: false,
            fallback: true
          }));
      }
    }, _callee, null, [[1, 7]]);
  }));
  return _GET.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,