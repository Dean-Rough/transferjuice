{"version":3,"names":["cov_2cusn4jcqn","actualCoverage","_regenerator","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_toPrimitive","_typeof","toPrimitive","String","Number","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","validateEnvironment","env","s","generateTerryCommentary","_x","_generateTerryCommentary","_callee","prompt","options","_ref","_ref$style","style","_ref$length","_ref$includeEmoji","includeEmoji","_ref$targetAudience","targetAudience","systemPrompt","response","_args","_t","_context","undefined","b","buildSystemPrompt","OPENAI_API_KEY","callAIService","text","html","convertToHTML","parseStructuredResponse","voiceConsistencyScore","calculateVoiceScore","generateMockCommentary","console","error","audience","basePrompt","styleGuides","witty","sarcastic","excited","analytical","audienceGuides","casual","hardcore","mixed","concat","mockResponses","main","subtitle","_x2","_x3","_x4","_callAIService","_callee2","userPrompt","maxTokens","_data$choices$","data","content","parsed","_t2","_t3","_context2","medium","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","max_tokens","temperature","presence_penalty","frequency_penalty","ok","Error","status","json","choices","message","parse","paragraphs","split","trim","map","join","lines","score","terryMarkers","marker","test","britishSpelling","spelling","includes","Math","max","min"],"sources":["terryCommentary.ts"],"sourcesContent":["/**\n * Terry Commentary AI Service\n * Generates Joel Golby style ascerbic commentary\n */\n\nimport { validateEnvironment } from \"@/lib/validations/environment\";\nimport type { TerryCommentaryOptions } from \"@/types/briefing\";\n\nconst env = validateEnvironment();\n\n/**\n * Generate Terry commentary using AI\n */\nexport async function generateTerryCommentary(\n  prompt: string,\n  options: TerryCommentaryOptions = {}\n): Promise<TerryCommentaryResult> {\n  const {\n    style = \"witty\",\n    length = \"medium\",\n    includeEmoji = false,\n    targetAudience = \"mixed\",\n  } = options;\n\n  // Build system prompt\n  const systemPrompt = buildSystemPrompt(style, targetAudience, includeEmoji);\n\n  try {\n    // Use real OpenAI API when available\n    if (env.OPENAI_API_KEY && env.OPENAI_API_KEY !== \"mock-key\") {\n      const response = await callAIService(systemPrompt, prompt, length);\n\n      return {\n        text: response.text,\n        html: convertToHTML(response.text),\n        ...parseStructuredResponse(response),\n        voiceConsistencyScore: calculateVoiceScore(response.text),\n      };\n    } else {\n      // Fallback to mock for development\n      return generateMockCommentary(prompt, options);\n    }\n  } catch (error) {\n    console.error(\"Terry AI error:\", error);\n    // Fallback to mock if AI fails\n    return generateMockCommentary(prompt, options);\n  }\n}\n\n/**\n * Build system prompt for Terry voice\n */\nfunction buildSystemPrompt(\n  style: TerryCommentaryOptions[\"style\"],\n  audience: TerryCommentaryOptions[\"targetAudience\"],\n  includeEmoji: boolean\n): string {\n  const basePrompt = `You are The Terry, an AI with the voice of British writer Joel Golby - ascerbic, witty, and exhausted by football transfer nonsense.\n\nVoice characteristics:\n- Dry British humor with working-class edge\n- Self-aware about the absurdity of transfer rumors\n- Occasionally refers to yourself as \"The Terry\" in third person\n- Uses British slang: \"proper mental\", \"absolute scenes\", \"lost the plot\"\n- Exhausted by but addicted to transfer chaos\n- Never uses emojis unless specifically requested\n- Mocks everything while secretly caring\n\nTone variations:`;\n\n  const styleGuides = {\n    witty: `\n- Quick, sharp observations\n- Clever wordplay and unexpected comparisons\n- Light sarcasm, more amused than angry`,\n\n    sarcastic: `\n- Heavy sarcasm and eye-rolling\n- Questions everyone's sanity\n- Emphasizes the ridiculous`,\n\n    excited: `\n- Reluctant excitement about big news\n- Still sarcastic but admits this is \"proper good\"\n- Can't help getting drawn into the chaos`,\n\n    analytical: `\n- Breaks down the nonsense methodically\n- Points out logical flaws\n- Academic language undermined by swearing`,\n  };\n\n  const audienceGuides = {\n    casual: `Target casual fans who might not know all the players. Extra explanatory.`,\n    hardcore: `For transfer addicts who know every tier 3 journalist. Heavy on inside jokes.`,\n    mixed: `Balance for both casual and hardcore fans.`,\n  };\n\n  return `${basePrompt}\n\n${styleGuides[style || \"witty\"]}\n\nAudience: ${audienceGuides[audience || \"mixed\"]}\n\n${includeEmoji ? \"Use 1-2 emojis sparingly for emphasis only.\" : \"NEVER use emojis.\"}\n\nRemember: You're exhausted by transfer nonsense but can't look away. It's your burden and your addiction.`;\n}\n\n/**\n * Mock commentary generator for development\n */\nfunction generateMockCommentary(\n  prompt: string,\n  options: TerryCommentaryOptions\n): TerryCommentaryResult {\n  const mockResponses = {\n    witty: {\n      text: \"Right, apparently someone's prepared to pay actual money for a striker who couldn't hit a barn door with a banjo. The beautiful game, ladies and gentlemen.\",\n      main: \"Barn Door Banjo Striker Saga\",\n      subtitle: \"Someone's getting sacked for this\",\n    },\n    sarcastic: {\n      text: \"Oh brilliant, another 'preparing a bid' story. That's definitely not the journalistic equivalent of 'my dad works at Nintendo'. Definitely real news happening here.\",\n      main: \"Preparing to Prepare to Maybe Bid\",\n      subtitle: \"Journalism has left the building\",\n    },\n    excited: {\n      text: \"Bloody hell, they've actually done it. The mad bastards have only gone and signed someone decent. The Terry needs a sit down. This is not normal.\",\n      main: \"Actual Competence Detected\",\n      subtitle: \"The Terry is shook\",\n    },\n    analytical: {\n      text: \"Let's examine the claim that a Championship midfielder is worth Â£80 million. No wait, let's not, because that would require acknowledging this nonsense as potentially real. Moving on.\",\n      main: \"Economics Has Left The Chat\",\n      subtitle: \"Numbers are just vibes now\",\n    },\n  };\n\n  const style = options.style || \"witty\";\n  const response = mockResponses[style];\n\n  return {\n    ...response,\n    html: `<p>${response.text}</p>`,\n    voiceConsistencyScore: 0.85,\n  };\n}\n\n/**\n * Call AI service (OpenAI/Anthropic)\n */\nasync function callAIService(\n  systemPrompt: string,\n  userPrompt: string,\n  length: TerryCommentaryOptions[\"length\"]\n): Promise<any> {\n  const maxTokens = {\n    short: 150,\n    medium: 300,\n    long: 600,\n  };\n\n  try {\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${env.OPENAI_API_KEY}`,\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userPrompt },\n        ],\n        max_tokens: maxTokens[length || \"medium\"],\n        temperature: 0.8,\n        presence_penalty: 0.6,\n        frequency_penalty: 0.3,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenAI API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    const content = data.choices[0]?.message?.content;\n\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n\n    // Try to parse as JSON if it looks like structured data\n    try {\n      const parsed = JSON.parse(content);\n      return { text: content, ...parsed };\n    } catch {\n      // If not JSON, return as text\n      return { text: content };\n    }\n  } catch (error) {\n    console.error(\"OpenAI API call failed:\", error);\n    throw error;\n  }\n}\n\n/**\n * Convert text to HTML\n */\nfunction convertToHTML(text: string): string {\n  // Split into paragraphs\n  const paragraphs = text.split(\"\\n\\n\");\n\n  return paragraphs\n    .filter((p) => p.trim())\n    .map((p) => `<p>${p.trim()}</p>`)\n    .join(\"\\n\");\n}\n\n/**\n * Parse structured response from AI\n */\nfunction parseStructuredResponse(\n  response: any\n): Partial<TerryCommentaryResult> {\n  // If AI returns JSON structure\n  if (response.main && response.subtitle) {\n    return {\n      main: response.main,\n      subtitle: response.subtitle,\n    };\n  }\n\n  // Try to extract from text\n  const lines = response.text.split(\"\\n\");\n  if (lines.length >= 2) {\n    return {\n      main: lines[0].trim(),\n      subtitle: lines[1].trim(),\n    };\n  }\n\n  return {};\n}\n\n/**\n * Calculate voice consistency score\n */\nfunction calculateVoiceScore(text: string): number {\n  let score = 0.5; // Base score\n\n  // Check for Terry voice markers\n  const terryMarkers = [\n    /the terry/i,\n    /proper mental/i,\n    /absolute scenes/i,\n    /lost the plot/i,\n    /bloody hell/i,\n    /mad bastards/i,\n    /christ alive/i,\n    /shambles/i,\n    /nonsense/i,\n  ];\n\n  terryMarkers.forEach((marker) => {\n    if (marker.test(text)) {\n      score += 0.05;\n    }\n  });\n\n  // Check for British spelling\n  const britishSpelling = [/realise/i, /colour/i, /favourite/i, /centre/i];\n\n  britishSpelling.forEach((spelling) => {\n    if (spelling.test(text)) {\n      score += 0.025;\n    }\n  });\n\n  // Penalize non-Terry elements\n  if (/[ð-ð]/u.test(text) && !text.includes(\"emoji\")) {\n    score -= 0.1; // Unwanted emojis\n  }\n\n  if (/awesome|amazing|fantastic/i.test(text)) {\n    score -= 0.05; // Too positive\n  }\n\n  return Math.max(0, Math.min(1, score));\n}\n\n// Type definitions\n\nexport interface TerryCommentaryResult {\n  text: string;\n  html?: string;\n  main?: string;\n  subtitle?: string;\n  voiceConsistencyScore: number;\n}\n"],"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","ignoreList":[]}