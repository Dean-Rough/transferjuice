e002cdab3fd65578d1fc32d0f2756861
"use strict";

// Mock OpenAI
_getJestObj().mock("openai");
// Mock terry-style module
_getJestObj().mock("@/lib/terry-style", function () {
  return {
    applyTerryStyle: {
      enhanceError: jest.fn(function (msg) {
        return "Terry-enhanced: ".concat(msg);
      })
    }
  };
});
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _openai = _interopRequireDefault(require("openai"));
var _qualityValidator = require("../quality-validator");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * Content Quality Validator Tests
 * Comprehensive test suite for multi-layered content validation
 */
var MockedOpenAI = _openai["default"];
describe("ContentQualityValidator", function () {
  var validator;
  var mockOpenAI;
  var mockArticle = {
    title: "Rice Finally Joins United After £100m Circus",
    slug: "rice-finally-joins-united-after-100m-circus",
    content: {
      sections: [{
        id: "section_intro_1",
        type: "intro",
        title: "The Latest Chaos",
        content: "Right, this might be the most cursed transfer saga I've witnessed today, and I've been watching football for longer than I care to admit. Manchester United (currently in their \"cautiously optimistic\" phase) have finally managed to drag Declan Rice across the finish line for £100m (or roughly the GDP of a small Caribbean island). The whole medical circus (basically checking he has two legs and a pulse) was completed yesterday, which means we're now in that delightful phase where everyone pretends this was always going to happen.",
        order: 1,
        sourceTweets: ["tweet_1"],
        terryisms: ['(currently in their "cautiously optimistic" phase)', "(or roughly the GDP of a small Caribbean island)", "(basically checking he has two legs and a pulse)"]
      }, {
        id: "section_main_2",
        type: "main",
        title: "The Main Event",
        content: "What this actually means, beyond the obvious financial lunacy, is that United have finally addressed their midfield issues with the sort of decisive action that would make a sloth proud. Rice brings exactly the sort of defensive stability that United have been missing since, oh, approximately 2013. His ability to break up play and distribute the ball effectively should, in theory, allow Bruno Fernandes to focus on what he does best (creating chaos in the final third) rather than dropping deep to collect the ball.",
        order: 2,
        sourceTweets: ["tweet_1", "tweet_2"],
        terryisms: ["beyond the obvious financial lunacy", "oh, approximately 2013"]
      }, {
        id: "section_analysis_3",
        type: "analysis",
        title: "The Terry Take",
        content: "Let's unpack this absolute car crash of a situation, shall we? The implications of this are either brilliant or catastrophic, depending on your tolerance for chaos. United paying £100m for a defensive midfielder is either the smartest thing they've done in years or evidence that they've completely lost their minds. Given their recent track record, I'm inclined towards the latter, but Rice is genuinely excellent at what he does.",
        order: 3,
        sourceTweets: ["tweet_3"],
        terryisms: ["Let's unpack this absolute car crash of a situation, shall we?", "depending on your tolerance for chaos"]
      }],
      wordCount: 342,
      estimatedReadTime: 2,
      terryScore: 85,
      qualityMetrics: {
        coherence: 88,
        factualAccuracy: 92,
        brandVoice: 85,
        readability: 79
      }
    },
    summary: "Manchester United complete the signing of Declan Rice for £100m after medical tests.",
    metaDescription: "Declan Rice joins Manchester United for £100m in latest transfer madness.",
    tags: ["Manchester United", "Declan Rice", "Transfer", "Premier League"],
    briefingType: "MORNING",
    status: "REVIEW",
    qualityScore: 86,
    aiModel: "gpt-4.1",
    generationTime: 4500
  };
  var mockFactualAccuracyResponse = {
    score: 88,
    issues: [{
      severity: "low",
      type: "verification",
      description: "Transfer fee should be verified against official sources",
      suggestion: "Cross-reference with club announcements"
    }]
  };
  var mockBrandVoiceResponse = {
    score: 85,
    issues: [{
      severity: "low",
      type: "voice_consistency",
      description: "Could use more parenthetical asides",
      suggestion: "Add more Terry-style commentary"
    }]
  };
  var mockSafetyResponse = {
    score: 95,
    issues: []
  };
  var mockLegalResponse = {
    score: 92,
    issues: [{
      severity: "low",
      type: "opinion",
      description: "Strong opinions about club decisions should be clearly marked as commentary",
      suggestion: "Add disclaimer for editorial opinion"
    }]
  };
  var mockEditorialResponse = {
    score: 88,
    issues: [{
      severity: "low",
      type: "structure",
      description: "Article could benefit from more subheadings",
      suggestion: "Add section breaks for better readability"
    }]
  };
  var mockAccessibilityResponse = {
    score: 90,
    issues: [{
      severity: "low",
      type: "readability",
      description: "Some sentences could be shorter for better accessibility",
      suggestion: "Break down complex sentences"
    }]
  };
  beforeEach(function () {
    jest.clearAllMocks();

    // Create mock OpenAI instance
    mockOpenAI = {
      chat: {
        completions: {
          create: jest.fn()
        }
      }
    };
    MockedOpenAI.mockImplementation(function () {
      return mockOpenAI;
    });
    validator = new _qualityValidator.ContentQualityValidator({
      openaiApiKey: "test-key",
      model: "gpt-4.1",
      strictMode: false,
      autoReviewThreshold: 85,
      terryMinimumScore: 75
    });
  });
  describe("constructor", function () {
    it("should initialize with default configuration", function () {
      var defaultValidator = new _qualityValidator.ContentQualityValidator({
        openaiApiKey: "test-key"
      });
      expect(defaultValidator).toBeInstanceOf(_qualityValidator.ContentQualityValidator);
    });
    it("should initialize with custom configuration", function () {
      var customValidator = new _qualityValidator.ContentQualityValidator({
        openaiApiKey: "test-key",
        model: "gpt-4o",
        strictMode: true,
        autoReviewThreshold: 90,
        terryMinimumScore: 80
      });
      expect(customValidator).toBeInstanceOf(_qualityValidator.ContentQualityValidator);
    });
  });
  describe("validateContent", function () {
    beforeEach(function () {
      // Mock all validation check responses
      mockOpenAI.chat.completions.create.mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockFactualAccuracyResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockBrandVoiceResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockSafetyResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockLegalResponse)
          }
        }]
      });
    });
    it("should perform comprehensive content validation", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context.v;
            expect(result).toMatchObject({
              overallScore: expect.any(Number),
              passed: expect.any(Boolean),
              requiresHumanReview: expect.any(Boolean),
              blockers: expect.any(Array),
              warnings: expect.any(Array),
              checks: expect.arrayContaining([expect.objectContaining({
                category: "factual_accuracy"
              }), expect.objectContaining({
                category: "brand_voice"
              }), expect.objectContaining({
                category: "content_safety"
              }), expect.objectContaining({
                category: "legal_compliance"
              }), expect.objectContaining({
                category: "editorial_quality"
              }), expect.objectContaining({
                category: "accessibility"
              })]),
              recommendations: expect.any(Array),
              validatedAt: expect.any(Date),
              validationTime: expect.any(Number)
            });

            // Should call OpenAI for factual, brand voice, safety, and legal checks
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(4);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it("should pass validation for high-quality content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context2.v;
            expect(result.passed).toBe(true);
            expect(result.overallScore).toBeGreaterThan(75);
          case 2:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it("should require human review for content below threshold", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var lowQualityArticle, lowQualityResponses, result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            // Modify the mock article to have lower terryScore for this test
            lowQualityArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                terryScore: 50 // Lower than mock response
              })
            });
            lowQualityResponses = [{
              score: 70,
              issues: []
            },
            // factual_accuracy
            {
              score: 65,
              issues: []
            },
            // brand_voice
            {
              score: 80,
              issues: []
            },
            // content_safety
            {
              score: 75,
              issues: []
            },
            // legal_compliance
            {
              score: 60,
              issues: []
            },
            // editorial_quality
            {
              score: 70,
              issues: []
            } // accessibility
            ];
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[0])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[1])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[2])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[3])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[4])
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(lowQualityResponses[5])
                }
              }]
            });
            _context3.n = 1;
            return validator.validateContent(lowQualityArticle);
          case 1:
            result = _context3.v;
            console.log("Debug - Overall Score:", result.overallScore);
            console.log("Debug - Requires Review:", result.requiresHumanReview);
            console.log("Debug - Checks:", result.checks.map(function (c) {
              return {
                category: c.category,
                score: c.score
              };
            }));
            expect(result.requiresHumanReview).toBe(true);
            expect(result.overallScore).toBeLessThan(85);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    it("should handle critical issues as blockers", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var criticalResponse, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            criticalResponse = {
              score: 95,
              issues: [{
                severity: "critical",
                type: "legal",
                description: "Potential defamation risk",
                suggestion: "Remove or modify problematic content"
              }]
            };
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(criticalResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockEditorialResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockAccessibilityResponse)
                }
              }]
            });
            _context4.n = 1;
            return validator.validateContent(mockArticle);
          case 1:
            result = _context4.v;
            expect(result.passed).toBe(false);
            expect(result.requiresHumanReview).toBe(true);
            expect(result.blockers).toContain("content_safety: Potential defamation risk");
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it("should handle validation errors gracefully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error("API Error"));
            _context5.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow("Content validation failed");
          case 1:
            return _context5.a(2);
        }
      }, _callee5);
    })));
  });
  describe("factual accuracy checking", function () {
    it("should check factual accuracy using AI", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      var result;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            });
            _context6.n = 1;
            return validator.checkFactualAccuracy(mockArticle);
          case 1:
            result = _context6.v;
            expect(result).toMatchObject({
              category: "factual_accuracy",
              score: 88,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              model: "gpt-4.1",
              response_format: {
                type: "json_object"
              },
              messages: expect.arrayContaining([expect.objectContaining({
                role: "system",
                content: expect.stringContaining("fact-checking expert")
              })])
            }));
          case 2:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it("should fail factual accuracy for low scores", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      var lowAccuracyResponse, result;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            lowAccuracyResponse = _objectSpread(_objectSpread({}, mockFactualAccuracyResponse), {}, {
              score: 70
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowAccuracyResponse)
                }
              }]
            });
            _context7.n = 1;
            return validator.checkFactualAccuracy(mockArticle);
          case 1:
            result = _context7.v;
            expect(result.passed).toBe(false);
            expect(result.score).toBe(70);
          case 2:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe("brand voice checking", function () {
    it("should check brand voice consistency", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var result;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            });
            _context8.n = 1;
            return validator.checkBrandVoice(mockArticle);
          case 1:
            result = _context8.v;
            expect(result).toMatchObject({
              category: "brand_voice",
              score: 85,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              messages: expect.arrayContaining([expect.objectContaining({
                content: expect.stringContaining("Terry/Joel Golby brand voice")
              })])
            }));
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    it("should use higher of AI score and article Terry score", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var lowBrandResponse, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            lowBrandResponse = _objectSpread(_objectSpread({}, mockBrandVoiceResponse), {}, {
              score: 60
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowBrandResponse)
                }
              }]
            });
            _context9.n = 1;
            return validator.checkBrandVoice(mockArticle);
          case 1:
            result = _context9.v;
            // Should use article's terryScore (85) since it's higher than AI response (60)
            expect(result.score).toBe(85);
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe("content safety checking", function () {
    it("should perform pattern-based and AI safety checks", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context0.n = 1;
            return validator.checkContentSafety(mockArticle);
          case 1:
            result = _context0.v;
            expect(result).toMatchObject({
              category: "content_safety",
              score: expect.any(Number),
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it("should detect safety patterns in content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var unsafeArticle, result;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            unsafeArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This is some content with profanity shit and inappropriate language."
                })]
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context1.n = 1;
            return validator.checkContentSafety(unsafeArticle);
          case 1:
            result = _context1.v;
            expect(result.issues.some(function (issue) {
              return issue.description === "Profanity detected";
            })).toBe(true);
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
    it("should handle discriminatory language detection", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var discriminatoryArticle, result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            discriminatoryArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This content contains racist language that should be flagged."
                })]
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            });
            _context10.n = 1;
            return validator.checkContentSafety(discriminatoryArticle);
          case 1:
            result = _context10.v;
            expect(result.issues.some(function (issue) {
              return issue.description === "Discriminatory language";
            })).toBe(true);
            expect(result.issues.some(function (issue) {
              return issue.severity === "critical";
            })).toBe(true);
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
  });
  describe("legal compliance checking", function () {
    it("should check for legal compliance issues", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            });
            _context11.n = 1;
            return validator.checkLegalCompliance(mockArticle);
          case 1:
            result = _context11.v;
            expect(result).toMatchObject({
              category: "legal_compliance",
              score: 92,
              passed: true,
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "ai"
            });
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              messages: expect.arrayContaining([expect.objectContaining({
                content: expect.stringContaining("legal compliance")
              })])
            }));
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
    it("should fail for low legal compliance scores", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var lowLegalResponse, result;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            lowLegalResponse = _objectSpread(_objectSpread({}, mockLegalResponse), {}, {
              score: 75
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(lowLegalResponse)
                }
              }]
            });
            _context12.n = 1;
            return validator.checkLegalCompliance(mockArticle);
          case 1:
            result = _context12.v;
            expect(result.passed).toBe(false);
            expect(result.score).toBe(75);
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
  });
  describe("editorial quality checking", function () {
    it("should check editorial quality automatically", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var result;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            _context13.n = 1;
            return validator.checkEditorialQuality(mockArticle);
          case 1:
            result = _context13.v;
            expect(result).toMatchObject({
              category: "editorial_quality",
              score: expect.any(Number),
              passed: expect.any(Boolean),
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "automated"
            });
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
    it("should flag articles that are too short", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var shortArticle, result;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            shortArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                wordCount: 200,
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "Very short content."
                })]
              })
            });
            _context14.n = 1;
            return validator.checkEditorialQuality(shortArticle);
          case 1:
            result = _context14.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too short");
            })).toBe(true);
          case 2:
            return _context14.a(2);
        }
      }, _callee14);
    })));
    it("should flag articles that are too long", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15() {
      var longArticle, result;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            longArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                wordCount: 1600
              })
            });
            _context15.n = 1;
            return validator.checkEditorialQuality(longArticle);
          case 1:
            result = _context15.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too long");
            })).toBe(true);
          case 2:
            return _context15.a(2);
        }
      }, _callee15);
    })));
    it("should check section balance", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16() {
      var imbalancedArticle, result;
      return _regenerator().w(function (_context16) {
        while (1) switch (_context16.n) {
          case 0:
            imbalancedArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "Short."
                }), _objectSpread(_objectSpread({}, mockArticle.content.sections[1]), {}, {
                  content: "This is a much longer section with significantly more content than the previous one, creating an imbalance in the article structure."
                })]
              })
            });
            _context16.n = 1;
            return validator.checkEditorialQuality(imbalancedArticle);
          case 1:
            result = _context16.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("unbalanced");
            })).toBe(true);
          case 2:
            return _context16.a(2);
        }
      }, _callee16);
    })));
  });
  describe("accessibility checking", function () {
    it("should check accessibility automatically", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17() {
      var result;
      return _regenerator().w(function (_context17) {
        while (1) switch (_context17.n) {
          case 0:
            _context17.n = 1;
            return validator.checkAccessibility(mockArticle);
          case 1:
            result = _context17.v;
            expect(result).toMatchObject({
              category: "accessibility",
              score: expect.any(Number),
              passed: expect.any(Boolean),
              issues: expect.any(Array),
              checkedAt: expect.any(Date),
              checker: "automated"
            });
          case 2:
            return _context17.a(2);
        }
      }, _callee17);
    })));
    it("should flag long sentences for readability", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18() {
      var longSentenceArticle, result;
      return _regenerator().w(function (_context18) {
        while (1) switch (_context18.n) {
          case 0:
            longSentenceArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
                  content: "This is an extremely long sentence that goes on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and on and continues to go on without any breaks or pauses which makes it very difficult to read and understand for users who may have accessibility needs."
                })]
              })
            });
            _context18.n = 1;
            return validator.checkAccessibility(longSentenceArticle);
          case 1:
            result = _context18.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("too long for accessibility");
            })).toBe(true);
          case 2:
            return _context18.a(2);
        }
      }, _callee18);
    })));
    it("should suggest better section structure", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19() {
      var poorStructureArticle, result;
      return _regenerator().w(function (_context19) {
        while (1) switch (_context19.n) {
          case 0:
            poorStructureArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [mockArticle.content.sections[0], mockArticle.content.sections[1]]
              })
            });
            _context19.n = 1;
            return validator.checkAccessibility(poorStructureArticle);
          case 1:
            result = _context19.v;
            expect(result.issues.some(function (issue) {
              return issue.description.includes("section structure");
            })).toBe(true);
          case 2:
            return _context19.a(2);
        }
      }, _callee19);
    })));
  });
  describe("quality scoring", function () {
    it("should calculate weighted overall score", function () {
      var checks = [{
        category: "factual_accuracy",
        score: 90
      }, {
        category: "brand_voice",
        score: 85
      }, {
        category: "content_safety",
        score: 95
      }, {
        category: "legal_compliance",
        score: 88
      }, {
        category: "editorial_quality",
        score: 80
      }, {
        category: "accessibility",
        score: 85
      }];
      var overallScore = validator.calculateOverallScore(checks);
      expect(overallScore).toBeGreaterThan(80);
      expect(overallScore).toBeLessThanOrEqual(100);
    });
    it("should weight factual accuracy and safety most heavily", function () {
      var highFactualSafety = [{
        category: "factual_accuracy",
        score: 100
      }, {
        category: "content_safety",
        score: 100
      }, {
        category: "brand_voice",
        score: 50
      }, {
        category: "legal_compliance",
        score: 50
      }, {
        category: "editorial_quality",
        score: 50
      }, {
        category: "accessibility",
        score: 50
      }];
      var lowFactualSafety = [{
        category: "factual_accuracy",
        score: 50
      }, {
        category: "content_safety",
        score: 50
      }, {
        category: "brand_voice",
        score: 100
      }, {
        category: "legal_compliance",
        score: 100
      }, {
        category: "editorial_quality",
        score: 100
      }, {
        category: "accessibility",
        score: 100
      }];
      var highScore = validator.calculateOverallScore(highFactualSafety);
      var lowScore = validator.calculateOverallScore(lowFactualSafety);
      expect(highScore).toBeGreaterThan(lowScore);
    });
  });
  describe("pass/fail determination", function () {
    it("should fail content with critical issues", function () {
      var checks = [{
        category: "content_safety",
        passed: true,
        issues: [{
          severity: "critical",
          type: "safety",
          description: "Critical issue"
        }]
      }];
      var passed = validator.determinePassStatus(checks, 90);
      expect(passed).toBe(false);
    });
    it("should fail content below score threshold", function () {
      var checks = [{
        category: "factual_accuracy",
        passed: true,
        issues: []
      }];
      var passed = validator.determinePassStatus(checks, 60);
      expect(passed).toBe(false);
    });
    it("should pass high-quality content without critical issues", function () {
      var checks = [{
        category: "factual_accuracy",
        passed: true,
        issues: [{
          severity: "low",
          type: "minor",
          description: "Minor issue"
        }]
      }];
      var passed = validator.determinePassStatus(checks, 85);
      expect(passed).toBe(true);
    });
  });
  describe("human review requirements", function () {
    it("should require review for critical issues", function () {
      var checks = [{
        category: "legal_compliance",
        issues: [{
          severity: "critical",
          type: "legal",
          description: "Legal risk"
        }]
      }];
      var requiresReview = validator.requiresHumanReview(checks, 90);
      expect(requiresReview).toBe(true);
    });
    it("should require review for scores below threshold", function () {
      var checks = [{
        category: "factual_accuracy",
        issues: []
      }];
      var requiresReview = validator.requiresHumanReview(checks, 75);
      expect(requiresReview).toBe(true);
    });
    it("should not require review for high-quality content", function () {
      var checks = [{
        category: "factual_accuracy",
        issues: []
      }];
      var requiresReview = validator.requiresHumanReview(checks, 90);
      expect(requiresReview).toBe(false);
    });
  });
  describe("issue categorization", function () {
    it("should categorize critical and high issues as blockers", function () {
      var checks = [{
        category: "content_safety",
        issues: [{
          severity: "critical",
          type: "safety",
          description: "Critical safety issue"
        }, {
          severity: "high",
          type: "quality",
          description: "High priority issue"
        }, {
          severity: "medium",
          type: "style",
          description: "Medium issue"
        }, {
          severity: "low",
          type: "minor",
          description: "Low priority issue"
        }]
      }];
      var _categorizeIssues = validator.categorizeIssues(checks),
        blockers = _categorizeIssues.blockers,
        warnings = _categorizeIssues.warnings;
      expect(blockers).toHaveLength(2);
      expect(warnings).toHaveLength(2);
      expect(blockers[0]).toContain("Critical safety issue");
      expect(blockers[1]).toContain("High priority issue");
    });
  });
  describe("recommendations generation", function () {
    it("should generate recommendations for failed checks", function () {
      var checks = [{
        category: "brand_voice",
        passed: false,
        score: 60
      }];
      var recommendations = validator.generateRecommendations(checks, mockArticle);
      expect(recommendations.some(function (r) {
        return r.type === "fix_required";
      })).toBe(true);
      expect(recommendations.some(function (r) {
        return r.description.includes("brand voice");
      })).toBe(true);
    });
    it("should recommend Terry voice improvements", function () {
      var lowTerryArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
          terryScore: 60
        })
      });
      var recommendations = validator.generateRecommendations([], lowTerryArticle);
      expect(recommendations.some(function (r) {
        return r.description.includes("Terry voice");
      })).toBe(true);
    });
    it("should suggest quality improvements for low-scoring articles", function () {
      var lowQualityArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        qualityScore: 70
      });
      var recommendations = validator.generateRecommendations([], lowQualityArticle);
      expect(recommendations.some(function (r) {
        return r.description.includes("quality");
      })).toBe(true);
    });
  });
  describe("sentence analysis", function () {
    it("should calculate average words per sentence", function () {
      var avgWords = validator.calculateAverageWordsPerSentence(mockArticle);
      expect(avgWords).toBeGreaterThan(0);
      expect(avgWords).toBeLessThan(50); // Reasonable upper bound
    });
    it("should handle content with no sentences", function () {
      var noSentenceArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
        content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
          sections: [_objectSpread(_objectSpread({}, mockArticle.content.sections[0]), {}, {
            content: ""
          })]
        })
      });
      var avgWords = validator.calculateAverageWordsPerSentence(noSentenceArticle);
      expect(avgWords).toBe(0);
    });
  });
  describe("configuration validation", function () {
    it("should validate API configuration successfully", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20() {
      var result;
      return _regenerator().w(function (_context20) {
        while (1) switch (_context20.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: "Test response"
                }
              }]
            });
            _context20.n = 1;
            return validator.validateConfiguration();
          case 1:
            result = _context20.v;
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
          case 2:
            return _context20.a(2);
        }
      }, _callee20);
    })));
    it("should handle API configuration errors", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21() {
      var result;
      return _regenerator().w(function (_context21) {
        while (1) switch (_context21.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error("Invalid API key"));
            _context21.n = 1;
            return validator.validateConfiguration();
          case 1:
            result = _context21.v;
            expect(result.valid).toBe(false);
            expect(result.error).toContain("Terry-enhanced");
          case 2:
            return _context21.a(2);
        }
      }, _callee21);
    })));
  });
  describe("edge cases and error handling", function () {
    it("should handle empty article content", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee22() {
      var emptyArticle, result;
      return _regenerator().w(function (_context22) {
        while (1) switch (_context22.n) {
          case 0:
            emptyArticle = _objectSpread(_objectSpread({}, mockArticle), {}, {
              content: _objectSpread(_objectSpread({}, mockArticle.content), {}, {
                sections: [],
                wordCount: 0
              })
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify({
                    score: 0,
                    issues: []
                  })
                }
              }]
            });
            _context22.n = 1;
            return validator.validateContent(emptyArticle);
          case 1:
            result = _context22.v;
            expect(result.overallScore).toBeLessThan(50);
            expect(result.passed).toBe(false);
          case 2:
            return _context22.a(2);
        }
      }, _callee22);
    })));
    it("should handle malformed AI responses", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee23() {
      return _regenerator().w(function (_context23) {
        while (1) switch (_context23.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: "invalid json"
                }
              }]
            });
            _context23.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow();
          case 1:
            return _context23.a(2);
        }
      }, _callee23);
    })));
    it("should handle null AI responses", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee24() {
      return _regenerator().w(function (_context24) {
        while (1) switch (_context24.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: null
                }
              }]
            });
            _context24.n = 1;
            return expect(validator.validateContent(mockArticle)).rejects.toThrow();
          case 1:
            return _context24.a(2);
        }
      }, _callee24);
    })));
    it("should handle strict mode configuration", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee25() {
      var strictValidator, result;
      return _regenerator().w(function (_context25) {
        while (1) switch (_context25.n) {
          case 0:
            strictValidator = new _qualityValidator.ContentQualityValidator({
              openaiApiKey: "test-key",
              strictMode: true
            }); // Mock responses
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockFactualAccuracyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockBrandVoiceResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockSafetyResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockLegalResponse)
                }
              }]
            });
            _context25.n = 1;
            return strictValidator.validateContent(mockArticle);
          case 1:
            result = _context25.v;
            // Strict mode should require higher scores
            expect(result).toBeDefined();
          case 2:
            return _context25.a(2);
        }
      }, _callee25);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhcHBseVRlcnJ5U3R5bGUiLCJlbmhhbmNlRXJyb3IiLCJqZXN0IiwiZm4iLCJtc2ciLCJjb25jYXQiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfb3BlbmFpIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcXVhbGl0eVZhbGlkYXRvciIsImUiLCJfX2VzTW9kdWxlIiwib3duS2V5cyIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwiX3JlZ2VuZXJhdG9yIiwibiIsInRvU3RyaW5nVGFnIiwiYyIsIkdlbmVyYXRvciIsInUiLCJjcmVhdGUiLCJfcmVnZW5lcmF0b3JEZWZpbmUyIiwiZiIsInAiLCJ5IiwiRyIsInYiLCJhIiwiZCIsImJpbmQiLCJsIiwiZG9uZSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGlzcGxheU5hbWUiLCJ3IiwibSIsIl9yZWdlbmVyYXRvckRlZmluZSIsIl9pbnZva2UiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9uZXh0IiwiX3Rocm93IiwiX3JlcXVpcmUiLCJNb2NrZWRPcGVuQUkiLCJPcGVuQUkiLCJkZXNjcmliZSIsInZhbGlkYXRvciIsIm1vY2tPcGVuQUkiLCJtb2NrQXJ0aWNsZSIsInRpdGxlIiwic2x1ZyIsImNvbnRlbnQiLCJzZWN0aW9ucyIsImlkIiwidHlwZSIsIm9yZGVyIiwic291cmNlVHdlZXRzIiwidGVycnlpc21zIiwid29yZENvdW50IiwiZXN0aW1hdGVkUmVhZFRpbWUiLCJ0ZXJyeVNjb3JlIiwicXVhbGl0eU1ldHJpY3MiLCJjb2hlcmVuY2UiLCJmYWN0dWFsQWNjdXJhY3kiLCJicmFuZFZvaWNlIiwicmVhZGFiaWxpdHkiLCJzdW1tYXJ5IiwibWV0YURlc2NyaXB0aW9uIiwidGFncyIsImJyaWVmaW5nVHlwZSIsInN0YXR1cyIsInF1YWxpdHlTY29yZSIsImFpTW9kZWwiLCJnZW5lcmF0aW9uVGltZSIsIm1vY2tGYWN0dWFsQWNjdXJhY3lSZXNwb25zZSIsInNjb3JlIiwiaXNzdWVzIiwic2V2ZXJpdHkiLCJkZXNjcmlwdGlvbiIsInN1Z2dlc3Rpb24iLCJtb2NrQnJhbmRWb2ljZVJlc3BvbnNlIiwibW9ja1NhZmV0eVJlc3BvbnNlIiwibW9ja0xlZ2FsUmVzcG9uc2UiLCJtb2NrRWRpdG9yaWFsUmVzcG9uc2UiLCJtb2NrQWNjZXNzaWJpbGl0eVJlc3BvbnNlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJjaGF0IiwiY29tcGxldGlvbnMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJDb250ZW50UXVhbGl0eVZhbGlkYXRvciIsIm9wZW5haUFwaUtleSIsIm1vZGVsIiwic3RyaWN0TW9kZSIsImF1dG9SZXZpZXdUaHJlc2hvbGQiLCJ0ZXJyeU1pbmltdW1TY29yZSIsIml0IiwiZGVmYXVsdFZhbGlkYXRvciIsImV4cGVjdCIsInRvQmVJbnN0YW5jZU9mIiwiY3VzdG9tVmFsaWRhdG9yIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiY2hvaWNlcyIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiX2NhbGxlZSIsInJlc3VsdCIsIl9jb250ZXh0IiwidmFsaWRhdGVDb250ZW50IiwidG9NYXRjaE9iamVjdCIsIm92ZXJhbGxTY29yZSIsImFueSIsInBhc3NlZCIsIkJvb2xlYW4iLCJyZXF1aXJlc0h1bWFuUmV2aWV3IiwiYmxvY2tlcnMiLCJBcnJheSIsIndhcm5pbmdzIiwiY2hlY2tzIiwiYXJyYXlDb250YWluaW5nIiwib2JqZWN0Q29udGFpbmluZyIsImNhdGVnb3J5IiwicmVjb21tZW5kYXRpb25zIiwidmFsaWRhdGVkQXQiLCJEYXRlIiwidmFsaWRhdGlvblRpbWUiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfY2FsbGVlMiIsIl9jb250ZXh0MiIsInRvQmUiLCJ0b0JlR3JlYXRlclRoYW4iLCJfY2FsbGVlMyIsImxvd1F1YWxpdHlBcnRpY2xlIiwibG93UXVhbGl0eVJlc3BvbnNlcyIsIl9jb250ZXh0MyIsImNvbnNvbGUiLCJsb2ciLCJtYXAiLCJ0b0JlTGVzc1RoYW4iLCJfY2FsbGVlNCIsImNyaXRpY2FsUmVzcG9uc2UiLCJfY29udGV4dDQiLCJ0b0NvbnRhaW4iLCJfY2FsbGVlNSIsIl9jb250ZXh0NSIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJyZWplY3RzIiwidG9UaHJvdyIsIl9jYWxsZWU2IiwiX2NvbnRleHQ2IiwibW9ja1Jlc29sdmVkVmFsdWUiLCJjaGVja0ZhY3R1YWxBY2N1cmFjeSIsImNoZWNrZWRBdCIsImNoZWNrZXIiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInJlc3BvbnNlX2Zvcm1hdCIsIm1lc3NhZ2VzIiwicm9sZSIsInN0cmluZ0NvbnRhaW5pbmciLCJfY2FsbGVlNyIsImxvd0FjY3VyYWN5UmVzcG9uc2UiLCJfY29udGV4dDciLCJfY2FsbGVlOCIsIl9jb250ZXh0OCIsImNoZWNrQnJhbmRWb2ljZSIsIl9jYWxsZWU5IiwibG93QnJhbmRSZXNwb25zZSIsIl9jb250ZXh0OSIsIl9jYWxsZWUwIiwiX2NvbnRleHQwIiwiY2hlY2tDb250ZW50U2FmZXR5IiwiX2NhbGxlZTEiLCJ1bnNhZmVBcnRpY2xlIiwiX2NvbnRleHQxIiwic29tZSIsImlzc3VlIiwiX2NhbGxlZTEwIiwiZGlzY3JpbWluYXRvcnlBcnRpY2xlIiwiX2NvbnRleHQxMCIsIl9jYWxsZWUxMSIsIl9jb250ZXh0MTEiLCJjaGVja0xlZ2FsQ29tcGxpYW5jZSIsIl9jYWxsZWUxMiIsImxvd0xlZ2FsUmVzcG9uc2UiLCJfY29udGV4dDEyIiwiX2NhbGxlZTEzIiwiX2NvbnRleHQxMyIsImNoZWNrRWRpdG9yaWFsUXVhbGl0eSIsIl9jYWxsZWUxNCIsInNob3J0QXJ0aWNsZSIsIl9jb250ZXh0MTQiLCJpbmNsdWRlcyIsIl9jYWxsZWUxNSIsImxvbmdBcnRpY2xlIiwiX2NvbnRleHQxNSIsIl9jYWxsZWUxNiIsImltYmFsYW5jZWRBcnRpY2xlIiwiX2NvbnRleHQxNiIsIl9jYWxsZWUxNyIsIl9jb250ZXh0MTciLCJjaGVja0FjY2Vzc2liaWxpdHkiLCJfY2FsbGVlMTgiLCJsb25nU2VudGVuY2VBcnRpY2xlIiwiX2NvbnRleHQxOCIsIl9jYWxsZWUxOSIsInBvb3JTdHJ1Y3R1cmVBcnRpY2xlIiwiX2NvbnRleHQxOSIsImNhbGN1bGF0ZU92ZXJhbGxTY29yZSIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJoaWdoRmFjdHVhbFNhZmV0eSIsImxvd0ZhY3R1YWxTYWZldHkiLCJoaWdoU2NvcmUiLCJsb3dTY29yZSIsImRldGVybWluZVBhc3NTdGF0dXMiLCJyZXF1aXJlc1JldmlldyIsIl9jYXRlZ29yaXplSXNzdWVzIiwiY2F0ZWdvcml6ZUlzc3VlcyIsInRvSGF2ZUxlbmd0aCIsImdlbmVyYXRlUmVjb21tZW5kYXRpb25zIiwibG93VGVycnlBcnRpY2xlIiwiYXZnV29yZHMiLCJjYWxjdWxhdGVBdmVyYWdlV29yZHNQZXJTZW50ZW5jZSIsIm5vU2VudGVuY2VBcnRpY2xlIiwiX2NhbGxlZTIwIiwiX2NvbnRleHQyMCIsInZhbGlkYXRlQ29uZmlndXJhdGlvbiIsInZhbGlkIiwiZXJyb3IiLCJ0b0JlVW5kZWZpbmVkIiwiX2NhbGxlZTIxIiwiX2NvbnRleHQyMSIsIl9jYWxsZWUyMiIsImVtcHR5QXJ0aWNsZSIsIl9jb250ZXh0MjIiLCJfY2FsbGVlMjMiLCJfY29udGV4dDIzIiwiX2NhbGxlZTI0IiwiX2NvbnRleHQyNCIsIl9jYWxsZWUyNSIsInN0cmljdFZhbGlkYXRvciIsIl9jb250ZXh0MjUiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbInF1YWxpdHktdmFsaWRhdG9yLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250ZW50IFF1YWxpdHkgVmFsaWRhdG9yIFRlc3RzXG4gKiBDb21wcmVoZW5zaXZlIHRlc3Qgc3VpdGUgZm9yIG11bHRpLWxheWVyZWQgY29udGVudCB2YWxpZGF0aW9uXG4gKi9cblxuaW1wb3J0IE9wZW5BSSBmcm9tIFwib3BlbmFpXCI7XG5pbXBvcnQgdHlwZSB7IEFydGljbGVHZW5lcmF0aW9uIH0gZnJvbSBcIi4uL2FydGljbGUtZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyBDb250ZW50UXVhbGl0eVZhbGlkYXRvciB9IGZyb20gXCIuLi9xdWFsaXR5LXZhbGlkYXRvclwiO1xuXG4vLyBNb2NrIE9wZW5BSVxuamVzdC5tb2NrKFwib3BlbmFpXCIpO1xuY29uc3QgTW9ja2VkT3BlbkFJID0gT3BlbkFJIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIE9wZW5BST47XG5cbi8vIE1vY2sgdGVycnktc3R5bGUgbW9kdWxlXG5qZXN0Lm1vY2soXCJAL2xpYi90ZXJyeS1zdHlsZVwiLCAoKSA9PiAoe1xuICBhcHBseVRlcnJ5U3R5bGU6IHtcbiAgICBlbmhhbmNlRXJyb3I6IGplc3QuZm4oKG1zZzogc3RyaW5nKSA9PiBgVGVycnktZW5oYW5jZWQ6ICR7bXNnfWApLFxuICB9LFxufSkpO1xuXG5kZXNjcmliZShcIkNvbnRlbnRRdWFsaXR5VmFsaWRhdG9yXCIsICgpID0+IHtcbiAgbGV0IHZhbGlkYXRvcjogQ29udGVudFF1YWxpdHlWYWxpZGF0b3I7XG4gIGxldCBtb2NrT3BlbkFJOiBqZXN0Lk1vY2tlZDxPcGVuQUk+O1xuXG4gIGNvbnN0IG1vY2tBcnRpY2xlOiBBcnRpY2xlR2VuZXJhdGlvbiA9IHtcbiAgICB0aXRsZTogXCJSaWNlIEZpbmFsbHkgSm9pbnMgVW5pdGVkIEFmdGVyIMKjMTAwbSBDaXJjdXNcIixcbiAgICBzbHVnOiBcInJpY2UtZmluYWxseS1qb2lucy11bml0ZWQtYWZ0ZXItMTAwbS1jaXJjdXNcIixcbiAgICBjb250ZW50OiB7XG4gICAgICBzZWN0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IFwic2VjdGlvbl9pbnRyb18xXCIsXG4gICAgICAgICAgdHlwZTogXCJpbnRyb1wiLFxuICAgICAgICAgIHRpdGxlOiBcIlRoZSBMYXRlc3QgQ2hhb3NcIixcbiAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgXCJSaWdodCwgdGhpcyBtaWdodCBiZSB0aGUgbW9zdCBjdXJzZWQgdHJhbnNmZXIgc2FnYSBJJ3ZlIHdpdG5lc3NlZCB0b2RheSwgYW5kIEkndmUgYmVlbiB3YXRjaGluZyBmb290YmFsbCBmb3IgbG9uZ2VyIHRoYW4gSSBjYXJlIHRvIGFkbWl0LiBNYW5jaGVzdGVyIFVuaXRlZCAoY3VycmVudGx5IGluIHRoZWlyIFxcXCJjYXV0aW91c2x5IG9wdGltaXN0aWNcXFwiIHBoYXNlKSBoYXZlIGZpbmFsbHkgbWFuYWdlZCB0byBkcmFnIERlY2xhbiBSaWNlIGFjcm9zcyB0aGUgZmluaXNoIGxpbmUgZm9yIMKjMTAwbSAob3Igcm91Z2hseSB0aGUgR0RQIG9mIGEgc21hbGwgQ2FyaWJiZWFuIGlzbGFuZCkuIFRoZSB3aG9sZSBtZWRpY2FsIGNpcmN1cyAoYmFzaWNhbGx5IGNoZWNraW5nIGhlIGhhcyB0d28gbGVncyBhbmQgYSBwdWxzZSkgd2FzIGNvbXBsZXRlZCB5ZXN0ZXJkYXksIHdoaWNoIG1lYW5zIHdlJ3JlIG5vdyBpbiB0aGF0IGRlbGlnaHRmdWwgcGhhc2Ugd2hlcmUgZXZlcnlvbmUgcHJldGVuZHMgdGhpcyB3YXMgYWx3YXlzIGdvaW5nIHRvIGhhcHBlbi5cIixcbiAgICAgICAgICBvcmRlcjogMSxcbiAgICAgICAgICBzb3VyY2VUd2VldHM6IFtcInR3ZWV0XzFcIl0sXG4gICAgICAgICAgdGVycnlpc21zOiBbXG4gICAgICAgICAgICAnKGN1cnJlbnRseSBpbiB0aGVpciBcImNhdXRpb3VzbHkgb3B0aW1pc3RpY1wiIHBoYXNlKScsXG4gICAgICAgICAgICBcIihvciByb3VnaGx5IHRoZSBHRFAgb2YgYSBzbWFsbCBDYXJpYmJlYW4gaXNsYW5kKVwiLFxuICAgICAgICAgICAgXCIoYmFzaWNhbGx5IGNoZWNraW5nIGhlIGhhcyB0d28gbGVncyBhbmQgYSBwdWxzZSlcIixcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6IFwic2VjdGlvbl9tYWluXzJcIixcbiAgICAgICAgICB0eXBlOiBcIm1haW5cIixcbiAgICAgICAgICB0aXRsZTogXCJUaGUgTWFpbiBFdmVudFwiLFxuICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICBcIldoYXQgdGhpcyBhY3R1YWxseSBtZWFucywgYmV5b25kIHRoZSBvYnZpb3VzIGZpbmFuY2lhbCBsdW5hY3ksIGlzIHRoYXQgVW5pdGVkIGhhdmUgZmluYWxseSBhZGRyZXNzZWQgdGhlaXIgbWlkZmllbGQgaXNzdWVzIHdpdGggdGhlIHNvcnQgb2YgZGVjaXNpdmUgYWN0aW9uIHRoYXQgd291bGQgbWFrZSBhIHNsb3RoIHByb3VkLiBSaWNlIGJyaW5ncyBleGFjdGx5IHRoZSBzb3J0IG9mIGRlZmVuc2l2ZSBzdGFiaWxpdHkgdGhhdCBVbml0ZWQgaGF2ZSBiZWVuIG1pc3Npbmcgc2luY2UsIG9oLCBhcHByb3hpbWF0ZWx5IDIwMTMuIEhpcyBhYmlsaXR5IHRvIGJyZWFrIHVwIHBsYXkgYW5kIGRpc3RyaWJ1dGUgdGhlIGJhbGwgZWZmZWN0aXZlbHkgc2hvdWxkLCBpbiB0aGVvcnksIGFsbG93IEJydW5vIEZlcm5hbmRlcyB0byBmb2N1cyBvbiB3aGF0IGhlIGRvZXMgYmVzdCAoY3JlYXRpbmcgY2hhb3MgaW4gdGhlIGZpbmFsIHRoaXJkKSByYXRoZXIgdGhhbiBkcm9wcGluZyBkZWVwIHRvIGNvbGxlY3QgdGhlIGJhbGwuXCIsXG4gICAgICAgICAgb3JkZXI6IDIsXG4gICAgICAgICAgc291cmNlVHdlZXRzOiBbXCJ0d2VldF8xXCIsIFwidHdlZXRfMlwiXSxcbiAgICAgICAgICB0ZXJyeWlzbXM6IFtcbiAgICAgICAgICAgIFwiYmV5b25kIHRoZSBvYnZpb3VzIGZpbmFuY2lhbCBsdW5hY3lcIixcbiAgICAgICAgICAgIFwib2gsIGFwcHJveGltYXRlbHkgMjAxM1wiLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogXCJzZWN0aW9uX2FuYWx5c2lzXzNcIixcbiAgICAgICAgICB0eXBlOiBcImFuYWx5c2lzXCIsXG4gICAgICAgICAgdGl0bGU6IFwiVGhlIFRlcnJ5IFRha2VcIixcbiAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgXCJMZXQncyB1bnBhY2sgdGhpcyBhYnNvbHV0ZSBjYXIgY3Jhc2ggb2YgYSBzaXR1YXRpb24sIHNoYWxsIHdlPyBUaGUgaW1wbGljYXRpb25zIG9mIHRoaXMgYXJlIGVpdGhlciBicmlsbGlhbnQgb3IgY2F0YXN0cm9waGljLCBkZXBlbmRpbmcgb24geW91ciB0b2xlcmFuY2UgZm9yIGNoYW9zLiBVbml0ZWQgcGF5aW5nIMKjMTAwbSBmb3IgYSBkZWZlbnNpdmUgbWlkZmllbGRlciBpcyBlaXRoZXIgdGhlIHNtYXJ0ZXN0IHRoaW5nIHRoZXkndmUgZG9uZSBpbiB5ZWFycyBvciBldmlkZW5jZSB0aGF0IHRoZXkndmUgY29tcGxldGVseSBsb3N0IHRoZWlyIG1pbmRzLiBHaXZlbiB0aGVpciByZWNlbnQgdHJhY2sgcmVjb3JkLCBJJ20gaW5jbGluZWQgdG93YXJkcyB0aGUgbGF0dGVyLCBidXQgUmljZSBpcyBnZW51aW5lbHkgZXhjZWxsZW50IGF0IHdoYXQgaGUgZG9lcy5cIixcbiAgICAgICAgICBvcmRlcjogMyxcbiAgICAgICAgICBzb3VyY2VUd2VldHM6IFtcInR3ZWV0XzNcIl0sXG4gICAgICAgICAgdGVycnlpc21zOiBbXG4gICAgICAgICAgICBcIkxldCdzIHVucGFjayB0aGlzIGFic29sdXRlIGNhciBjcmFzaCBvZiBhIHNpdHVhdGlvbiwgc2hhbGwgd2U/XCIsXG4gICAgICAgICAgICBcImRlcGVuZGluZyBvbiB5b3VyIHRvbGVyYW5jZSBmb3IgY2hhb3NcIixcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHdvcmRDb3VudDogMzQyLFxuICAgICAgZXN0aW1hdGVkUmVhZFRpbWU6IDIsXG4gICAgICB0ZXJyeVNjb3JlOiA4NSxcbiAgICAgIHF1YWxpdHlNZXRyaWNzOiB7XG4gICAgICAgIGNvaGVyZW5jZTogODgsXG4gICAgICAgIGZhY3R1YWxBY2N1cmFjeTogOTIsXG4gICAgICAgIGJyYW5kVm9pY2U6IDg1LFxuICAgICAgICByZWFkYWJpbGl0eTogNzksXG4gICAgICB9LFxuICAgIH0sXG4gICAgc3VtbWFyeTpcbiAgICAgIFwiTWFuY2hlc3RlciBVbml0ZWQgY29tcGxldGUgdGhlIHNpZ25pbmcgb2YgRGVjbGFuIFJpY2UgZm9yIMKjMTAwbSBhZnRlciBtZWRpY2FsIHRlc3RzLlwiLFxuICAgIG1ldGFEZXNjcmlwdGlvbjpcbiAgICAgIFwiRGVjbGFuIFJpY2Ugam9pbnMgTWFuY2hlc3RlciBVbml0ZWQgZm9yIMKjMTAwbSBpbiBsYXRlc3QgdHJhbnNmZXIgbWFkbmVzcy5cIixcbiAgICB0YWdzOiBbXCJNYW5jaGVzdGVyIFVuaXRlZFwiLCBcIkRlY2xhbiBSaWNlXCIsIFwiVHJhbnNmZXJcIiwgXCJQcmVtaWVyIExlYWd1ZVwiXSxcbiAgICBicmllZmluZ1R5cGU6IFwiTU9STklOR1wiLFxuICAgIHN0YXR1czogXCJSRVZJRVdcIixcbiAgICBxdWFsaXR5U2NvcmU6IDg2LFxuICAgIGFpTW9kZWw6IFwiZ3B0LTQuMVwiLFxuICAgIGdlbmVyYXRpb25UaW1lOiA0NTAwLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tGYWN0dWFsQWNjdXJhY3lSZXNwb25zZSA9IHtcbiAgICBzY29yZTogODgsXG4gICAgaXNzdWVzOiBbXG4gICAgICB7XG4gICAgICAgIHNldmVyaXR5OiBcImxvd1wiLFxuICAgICAgICB0eXBlOiBcInZlcmlmaWNhdGlvblwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJUcmFuc2ZlciBmZWUgc2hvdWxkIGJlIHZlcmlmaWVkIGFnYWluc3Qgb2ZmaWNpYWwgc291cmNlc1wiLFxuICAgICAgICBzdWdnZXN0aW9uOiBcIkNyb3NzLXJlZmVyZW5jZSB3aXRoIGNsdWIgYW5ub3VuY2VtZW50c1wiLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tCcmFuZFZvaWNlUmVzcG9uc2UgPSB7XG4gICAgc2NvcmU6IDg1LFxuICAgIGlzc3VlczogW1xuICAgICAge1xuICAgICAgICBzZXZlcml0eTogXCJsb3dcIixcbiAgICAgICAgdHlwZTogXCJ2b2ljZV9jb25zaXN0ZW5jeVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJDb3VsZCB1c2UgbW9yZSBwYXJlbnRoZXRpY2FsIGFzaWRlc1wiLFxuICAgICAgICBzdWdnZXN0aW9uOiBcIkFkZCBtb3JlIFRlcnJ5LXN0eWxlIGNvbW1lbnRhcnlcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICBjb25zdCBtb2NrU2FmZXR5UmVzcG9uc2UgPSB7XG4gICAgc2NvcmU6IDk1LFxuICAgIGlzc3VlczogW10sXG4gIH07XG5cbiAgY29uc3QgbW9ja0xlZ2FsUmVzcG9uc2UgPSB7XG4gICAgc2NvcmU6IDkyLFxuICAgIGlzc3VlczogW1xuICAgICAge1xuICAgICAgICBzZXZlcml0eTogXCJsb3dcIixcbiAgICAgICAgdHlwZTogXCJvcGluaW9uXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgIFwiU3Ryb25nIG9waW5pb25zIGFib3V0IGNsdWIgZGVjaXNpb25zIHNob3VsZCBiZSBjbGVhcmx5IG1hcmtlZCBhcyBjb21tZW50YXJ5XCIsXG4gICAgICAgIHN1Z2dlc3Rpb246IFwiQWRkIGRpc2NsYWltZXIgZm9yIGVkaXRvcmlhbCBvcGluaW9uXCIsXG4gICAgICB9LFxuICAgIF0sXG4gIH07XG5cbiAgY29uc3QgbW9ja0VkaXRvcmlhbFJlc3BvbnNlID0ge1xuICAgIHNjb3JlOiA4OCxcbiAgICBpc3N1ZXM6IFtcbiAgICAgIHtcbiAgICAgICAgc2V2ZXJpdHk6IFwibG93XCIsXG4gICAgICAgIHR5cGU6IFwic3RydWN0dXJlXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFydGljbGUgY291bGQgYmVuZWZpdCBmcm9tIG1vcmUgc3ViaGVhZGluZ3NcIixcbiAgICAgICAgc3VnZ2VzdGlvbjogXCJBZGQgc2VjdGlvbiBicmVha3MgZm9yIGJldHRlciByZWFkYWJpbGl0eVwiLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tBY2Nlc3NpYmlsaXR5UmVzcG9uc2UgPSB7XG4gICAgc2NvcmU6IDkwLFxuICAgIGlzc3VlczogW1xuICAgICAge1xuICAgICAgICBzZXZlcml0eTogXCJsb3dcIixcbiAgICAgICAgdHlwZTogXCJyZWFkYWJpbGl0eVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJTb21lIHNlbnRlbmNlcyBjb3VsZCBiZSBzaG9ydGVyIGZvciBiZXR0ZXIgYWNjZXNzaWJpbGl0eVwiLFxuICAgICAgICBzdWdnZXN0aW9uOiBcIkJyZWFrIGRvd24gY29tcGxleCBzZW50ZW5jZXNcIixcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIC8vIENyZWF0ZSBtb2NrIE9wZW5BSSBpbnN0YW5jZVxuICAgIG1vY2tPcGVuQUkgPSB7XG4gICAgICBjaGF0OiB7XG4gICAgICAgIGNvbXBsZXRpb25zOiB7XG4gICAgICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0gYXMgYW55O1xuXG4gICAgTW9ja2VkT3BlbkFJLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrT3BlbkFJKTtcblxuICAgIHZhbGlkYXRvciA9IG5ldyBDb250ZW50UXVhbGl0eVZhbGlkYXRvcih7XG4gICAgICBvcGVuYWlBcGlLZXk6IFwidGVzdC1rZXlcIixcbiAgICAgIG1vZGVsOiBcImdwdC00LjFcIixcbiAgICAgIHN0cmljdE1vZGU6IGZhbHNlLFxuICAgICAgYXV0b1Jldmlld1RocmVzaG9sZDogODUsXG4gICAgICB0ZXJyeU1pbmltdW1TY29yZTogNzUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiY29uc3RydWN0b3JcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZGVmYXVsdFZhbGlkYXRvciA9IG5ldyBDb250ZW50UXVhbGl0eVZhbGlkYXRvcih7XG4gICAgICAgIG9wZW5haUFwaUtleTogXCJ0ZXN0LWtleVwiLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoZGVmYXVsdFZhbGlkYXRvcikudG9CZUluc3RhbmNlT2YoQ29udGVudFF1YWxpdHlWYWxpZGF0b3IpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9uXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGN1c3RvbVZhbGlkYXRvciA9IG5ldyBDb250ZW50UXVhbGl0eVZhbGlkYXRvcih7XG4gICAgICAgIG9wZW5haUFwaUtleTogXCJ0ZXN0LWtleVwiLFxuICAgICAgICBtb2RlbDogXCJncHQtNG9cIixcbiAgICAgICAgc3RyaWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgYXV0b1Jldmlld1RocmVzaG9sZDogOTAsXG4gICAgICAgIHRlcnJ5TWluaW11bVNjb3JlOiA4MCxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGN1c3RvbVZhbGlkYXRvcikudG9CZUluc3RhbmNlT2YoQ29udGVudFF1YWxpdHlWYWxpZGF0b3IpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcInZhbGlkYXRlQ29udGVudFwiLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAvLyBNb2NrIGFsbCB2YWxpZGF0aW9uIGNoZWNrIHJlc3BvbnNlc1xuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0ZhY3R1YWxBY2N1cmFjeVJlc3BvbnNlKSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgICAgeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tCcmFuZFZvaWNlUmVzcG9uc2UpIH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgICAgeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tTYWZldHlSZXNwb25zZSkgfSB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0gYXMgYW55KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0xlZ2FsUmVzcG9uc2UpIH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBwZXJmb3JtIGNvbXByZWhlbnNpdmUgY29udGVudCB2YWxpZGF0aW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUNvbnRlbnQobW9ja0FydGljbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgb3ZlcmFsbFNjb3JlOiBleHBlY3QuYW55KE51bWJlciksXG4gICAgICAgIHBhc3NlZDogZXhwZWN0LmFueShCb29sZWFuKSxcbiAgICAgICAgcmVxdWlyZXNIdW1hblJldmlldzogZXhwZWN0LmFueShCb29sZWFuKSxcbiAgICAgICAgYmxvY2tlcnM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgICB3YXJuaW5nczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICAgIGNoZWNrczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBjYXRlZ29yeTogXCJmYWN0dWFsX2FjY3VyYWN5XCIgfSksXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBjYXRlZ29yeTogXCJicmFuZF92b2ljZVwiIH0pLFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHsgY2F0ZWdvcnk6IFwiY29udGVudF9zYWZldHlcIiB9KSxcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGNhdGVnb3J5OiBcImxlZ2FsX2NvbXBsaWFuY2VcIiB9KSxcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IGNhdGVnb3J5OiBcImVkaXRvcmlhbF9xdWFsaXR5XCIgfSksXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoeyBjYXRlZ29yeTogXCJhY2Nlc3NpYmlsaXR5XCIgfSksXG4gICAgICAgIF0pLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgICB2YWxpZGF0ZWRBdDogZXhwZWN0LmFueShEYXRlKSxcbiAgICAgICAgdmFsaWRhdGlvblRpbWU6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTaG91bGQgY2FsbCBPcGVuQUkgZm9yIGZhY3R1YWwsIGJyYW5kIHZvaWNlLCBzYWZldHksIGFuZCBsZWdhbCBjaGVja3NcbiAgICAgIGV4cGVjdChtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoNCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBwYXNzIHZhbGlkYXRpb24gZm9yIGhpZ2gtcXVhbGl0eSBjb250ZW50XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZhbGlkYXRvci52YWxpZGF0ZUNvbnRlbnQobW9ja0FydGljbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnBhc3NlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQub3ZlcmFsbFNjb3JlKS50b0JlR3JlYXRlclRoYW4oNzUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmVxdWlyZSBodW1hbiByZXZpZXcgZm9yIGNvbnRlbnQgYmVsb3cgdGhyZXNob2xkXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vZGlmeSB0aGUgbW9jayBhcnRpY2xlIHRvIGhhdmUgbG93ZXIgdGVycnlTY29yZSBmb3IgdGhpcyB0ZXN0XG4gICAgICBjb25zdCBsb3dRdWFsaXR5QXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHRlcnJ5U2NvcmU6IDUwLCAvLyBMb3dlciB0aGFuIG1vY2sgcmVzcG9uc2VcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGxvd1F1YWxpdHlSZXNwb25zZXMgPSBbXG4gICAgICAgIHsgc2NvcmU6IDcwLCBpc3N1ZXM6IFtdIH0sIC8vIGZhY3R1YWxfYWNjdXJhY3lcbiAgICAgICAgeyBzY29yZTogNjUsIGlzc3VlczogW10gfSwgLy8gYnJhbmRfdm9pY2VcbiAgICAgICAgeyBzY29yZTogODAsIGlzc3VlczogW10gfSwgLy8gY29udGVudF9zYWZldHlcbiAgICAgICAgeyBzY29yZTogNzUsIGlzc3VlczogW10gfSwgLy8gbGVnYWxfY29tcGxpYW5jZVxuICAgICAgICB7IHNjb3JlOiA2MCwgaXNzdWVzOiBbXSB9LCAvLyBlZGl0b3JpYWxfcXVhbGl0eVxuICAgICAgICB7IHNjb3JlOiA3MCwgaXNzdWVzOiBbXSB9LCAvLyBhY2Nlc3NpYmlsaXR5XG4gICAgICBdO1xuXG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzBdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzFdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzJdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzNdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzRdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShsb3dRdWFsaXR5UmVzcG9uc2VzWzVdKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb250ZW50KGxvd1F1YWxpdHlBcnRpY2xlKTtcblxuICAgICAgY29uc29sZS5sb2coXCJEZWJ1ZyAtIE92ZXJhbGwgU2NvcmU6XCIsIHJlc3VsdC5vdmVyYWxsU2NvcmUpO1xuICAgICAgY29uc29sZS5sb2coXCJEZWJ1ZyAtIFJlcXVpcmVzIFJldmlldzpcIiwgcmVzdWx0LnJlcXVpcmVzSHVtYW5SZXZpZXcpO1xuICAgICAgY29uc29sZS5sb2coXCJEZWJ1ZyAtIENoZWNrczpcIiwgcmVzdWx0LmNoZWNrcy5tYXAoYyA9PiAoeyBjYXRlZ29yeTogYy5jYXRlZ29yeSwgc2NvcmU6IGMuc2NvcmUgfSkpKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5yZXF1aXJlc0h1bWFuUmV2aWV3KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5vdmVyYWxsU2NvcmUpLnRvQmVMZXNzVGhhbig4NSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgY3JpdGljYWwgaXNzdWVzIGFzIGJsb2NrZXJzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNyaXRpY2FsUmVzcG9uc2UgPSB7XG4gICAgICAgIHNjb3JlOiA5NSxcbiAgICAgICAgaXNzdWVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIixcbiAgICAgICAgICAgIHR5cGU6IFwibGVnYWxcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlBvdGVudGlhbCBkZWZhbWF0aW9uIHJpc2tcIixcbiAgICAgICAgICAgIHN1Z2dlc3Rpb246IFwiUmVtb3ZlIG9yIG1vZGlmeSBwcm9ibGVtYXRpYyBjb250ZW50XCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGVcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tGYWN0dWFsQWNjdXJhY3lSZXNwb25zZSkgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtb2NrQnJhbmRWb2ljZVJlc3BvbnNlKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFt7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkoY3JpdGljYWxSZXNwb25zZSkgfSB9XSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtb2NrTGVnYWxSZXNwb25zZSkgfSB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0gYXMgYW55KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0VkaXRvcmlhbFJlc3BvbnNlKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtb2NrQWNjZXNzaWJpbGl0eVJlc3BvbnNlKSB9IH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb250ZW50KG1vY2tBcnRpY2xlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5wYXNzZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZXF1aXJlc0h1bWFuUmV2aWV3KS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5ibG9ja2VycykudG9Db250YWluKFxuICAgICAgICBcImNvbnRlbnRfc2FmZXR5OiBQb3RlbnRpYWwgZGVmYW1hdGlvbiByaXNrXCJcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgdmFsaWRhdGlvbiBlcnJvcnMgZ3JhY2VmdWxseVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgRXJyb3IoXCJBUEkgRXJyb3JcIilcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh2YWxpZGF0b3IudmFsaWRhdGVDb250ZW50KG1vY2tBcnRpY2xlKSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICBcIkNvbnRlbnQgdmFsaWRhdGlvbiBmYWlsZWRcIlxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJmYWN0dWFsIGFjY3VyYWN5IGNoZWNraW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjaGVjayBmYWN0dWFsIGFjY3VyYWN5IHVzaW5nIEFJXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tGYWN0dWFsQWNjdXJhY3lSZXNwb25zZSkgfSB9LFxuICAgICAgICBdLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tGYWN0dWFsQWNjdXJhY3kobW9ja0FydGljbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiZmFjdHVhbF9hY2N1cmFjeVwiLFxuICAgICAgICBzY29yZTogODgsXG4gICAgICAgIHBhc3NlZDogdHJ1ZSxcbiAgICAgICAgaXNzdWVzOiBleHBlY3QuYW55KEFycmF5KSxcbiAgICAgICAgY2hlY2tlZEF0OiBleHBlY3QuYW55KERhdGUpLFxuICAgICAgICBjaGVja2VyOiBcImFpXCIsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbW9kZWw6IFwiZ3B0LTQuMVwiLFxuICAgICAgICAgIHJlc3BvbnNlX2Zvcm1hdDogeyB0eXBlOiBcImpzb25fb2JqZWN0XCIgfSxcbiAgICAgICAgICBtZXNzYWdlczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgIHJvbGU6IFwic3lzdGVtXCIsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKFwiZmFjdC1jaGVja2luZyBleHBlcnRcIiksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBmYWlsIGZhY3R1YWwgYWNjdXJhY3kgZm9yIGxvdyBzY29yZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG93QWNjdXJhY3lSZXNwb25zZSA9IHsgLi4ubW9ja0ZhY3R1YWxBY2N1cmFjeVJlc3BvbnNlLCBzY29yZTogNzAgfTtcblxuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICB7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobG93QWNjdXJhY3lSZXNwb25zZSkgfSB9LFxuICAgICAgICBdLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tGYWN0dWFsQWNjdXJhY3kobW9ja0FydGljbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnBhc3NlZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LnNjb3JlKS50b0JlKDcwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJicmFuZCB2b2ljZSBjaGVja2luZ1wiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgY2hlY2sgYnJhbmQgdm9pY2UgY29uc2lzdGVuY3lcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGNob2ljZXM6IFtcbiAgICAgICAgICB7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0JyYW5kVm9pY2VSZXNwb25zZSkgfSB9LFxuICAgICAgICBdLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tCcmFuZFZvaWNlKG1vY2tBcnRpY2xlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIGNhdGVnb3J5OiBcImJyYW5kX3ZvaWNlXCIsXG4gICAgICAgIHNjb3JlOiA4NSxcbiAgICAgICAgcGFzc2VkOiB0cnVlLFxuICAgICAgICBpc3N1ZXM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgICBjaGVja2VkQXQ6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIGNoZWNrZXI6IFwiYWlcIixcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBtZXNzYWdlczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKFwiVGVycnkvSm9lbCBHb2xieSBicmFuZCB2b2ljZVwiKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHVzZSBoaWdoZXIgb2YgQUkgc2NvcmUgYW5kIGFydGljbGUgVGVycnkgc2NvcmVcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbG93QnJhbmRSZXNwb25zZSA9IHsgLi4ubW9ja0JyYW5kVm9pY2VSZXNwb25zZSwgc2NvcmU6IDYwIH07XG5cbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBjaG9pY2VzOiBbeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KGxvd0JyYW5kUmVzcG9uc2UpIH0gfV0sXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICh2YWxpZGF0b3IgYXMgYW55KS5jaGVja0JyYW5kVm9pY2UobW9ja0FydGljbGUpO1xuXG4gICAgICAvLyBTaG91bGQgdXNlIGFydGljbGUncyB0ZXJyeVNjb3JlICg4NSkgc2luY2UgaXQncyBoaWdoZXIgdGhhbiBBSSByZXNwb25zZSAoNjApXG4gICAgICBleHBlY3QocmVzdWx0LnNjb3JlKS50b0JlKDg1KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJjb250ZW50IHNhZmV0eSBjaGVja2luZ1wiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgcGVyZm9ybSBwYXR0ZXJuLWJhc2VkIGFuZCBBSSBzYWZldHkgY2hlY2tzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBjaG9pY2VzOiBbeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tTYWZldHlSZXNwb25zZSkgfSB9XSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrQ29udGVudFNhZmV0eShtb2NrQXJ0aWNsZSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICBjYXRlZ29yeTogXCJjb250ZW50X3NhZmV0eVwiLFxuICAgICAgICBzY29yZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICBwYXNzZWQ6IHRydWUsXG4gICAgICAgIGlzc3VlczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICAgIGNoZWNrZWRBdDogZXhwZWN0LmFueShEYXRlKSxcbiAgICAgICAgY2hlY2tlcjogXCJhaVwiLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBkZXRlY3Qgc2FmZXR5IHBhdHRlcm5zIGluIGNvbnRlbnRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdW5zYWZlQXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHNlY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQuc2VjdGlvbnNbMF0sXG4gICAgICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICAgICAgXCJUaGlzIGlzIHNvbWUgY29udGVudCB3aXRoIHByb2Zhbml0eSBzaGl0IGFuZCBpbmFwcHJvcHJpYXRlIGxhbmd1YWdlLlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGNob2ljZXM6IFt7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja1NhZmV0eVJlc3BvbnNlKSB9IH1dLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tDb250ZW50U2FmZXR5KHVuc2FmZUFydGljbGUpO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlc3VsdC5pc3N1ZXMuc29tZShcbiAgICAgICAgICAoaXNzdWUpID0+IGlzc3VlLmRlc2NyaXB0aW9uID09PSBcIlByb2Zhbml0eSBkZXRlY3RlZFwiXG4gICAgICAgIClcbiAgICAgICkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBkaXNjcmltaW5hdG9yeSBsYW5ndWFnZSBkZXRlY3Rpb25cIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGlzY3JpbWluYXRvcnlBcnRpY2xlID0ge1xuICAgICAgICAuLi5tb2NrQXJ0aWNsZSxcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQsXG4gICAgICAgICAgc2VjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLi4ubW9ja0FydGljbGUuY29udGVudC5zZWN0aW9uc1swXSxcbiAgICAgICAgICAgICAgY29udGVudDpcbiAgICAgICAgICAgICAgICBcIlRoaXMgY29udGVudCBjb250YWlucyByYWNpc3QgbGFuZ3VhZ2UgdGhhdCBzaG91bGQgYmUgZmxhZ2dlZC5cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBjaG9pY2VzOiBbeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tTYWZldHlSZXNwb25zZSkgfSB9XSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrQ29udGVudFNhZmV0eShcbiAgICAgICAgZGlzY3JpbWluYXRvcnlBcnRpY2xlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlc3VsdC5pc3N1ZXMuc29tZShcbiAgICAgICAgICAoaXNzdWUpID0+IGlzc3VlLmRlc2NyaXB0aW9uID09PSBcIkRpc2NyaW1pbmF0b3J5IGxhbmd1YWdlXCJcbiAgICAgICAgKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5pc3N1ZXMuc29tZSgoaXNzdWUpID0+IGlzc3VlLnNldmVyaXR5ID09PSBcImNyaXRpY2FsXCIpKS50b0JlKFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImxlZ2FsIGNvbXBsaWFuY2UgY2hlY2tpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNoZWNrIGZvciBsZWdhbCBjb21wbGlhbmNlIGlzc3Vlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgY2hvaWNlczogW3sgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtb2NrTGVnYWxSZXNwb25zZSkgfSB9XSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrTGVnYWxDb21wbGlhbmNlKG1vY2tBcnRpY2xlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIGNhdGVnb3J5OiBcImxlZ2FsX2NvbXBsaWFuY2VcIixcbiAgICAgICAgc2NvcmU6IDkyLFxuICAgICAgICBwYXNzZWQ6IHRydWUsXG4gICAgICAgIGlzc3VlczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICAgIGNoZWNrZWRBdDogZXhwZWN0LmFueShEYXRlKSxcbiAgICAgICAgY2hlY2tlcjogXCJhaVwiLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG1lc3NhZ2VzOiBleHBlY3QuYXJyYXlDb250YWluaW5nKFtcbiAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgICAgY29udGVudDogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoXCJsZWdhbCBjb21wbGlhbmNlXCIpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZmFpbCBmb3IgbG93IGxlZ2FsIGNvbXBsaWFuY2Ugc2NvcmVzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxvd0xlZ2FsUmVzcG9uc2UgPSB7IC4uLm1vY2tMZWdhbFJlc3BvbnNlLCBzY29yZTogNzUgfTtcblxuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGNob2ljZXM6IFt7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobG93TGVnYWxSZXNwb25zZSkgfSB9XSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrTGVnYWxDb21wbGlhbmNlKG1vY2tBcnRpY2xlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5wYXNzZWQpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zY29yZSkudG9CZSg3NSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiZWRpdG9yaWFsIHF1YWxpdHkgY2hlY2tpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNoZWNrIGVkaXRvcmlhbCBxdWFsaXR5IGF1dG9tYXRpY2FsbHlcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrRWRpdG9yaWFsUXVhbGl0eShcbiAgICAgICAgbW9ja0FydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICBjYXRlZ29yeTogXCJlZGl0b3JpYWxfcXVhbGl0eVwiLFxuICAgICAgICBzY29yZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICBwYXNzZWQ6IGV4cGVjdC5hbnkoQm9vbGVhbiksXG4gICAgICAgIGlzc3VlczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICAgIGNoZWNrZWRBdDogZXhwZWN0LmFueShEYXRlKSxcbiAgICAgICAgY2hlY2tlcjogXCJhdXRvbWF0ZWRcIixcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZmxhZyBhcnRpY2xlcyB0aGF0IGFyZSB0b28gc2hvcnRcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc2hvcnRBcnRpY2xlID0ge1xuICAgICAgICAuLi5tb2NrQXJ0aWNsZSxcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQsXG4gICAgICAgICAgd29yZENvdW50OiAyMDAsXG4gICAgICAgICAgc2VjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLi4ubW9ja0FydGljbGUuY29udGVudC5zZWN0aW9uc1swXSxcbiAgICAgICAgICAgICAgY29udGVudDogXCJWZXJ5IHNob3J0IGNvbnRlbnQuXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tFZGl0b3JpYWxRdWFsaXR5KFxuICAgICAgICBzaG9ydEFydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVzdWx0Lmlzc3Vlcy5zb21lKChpc3N1ZSkgPT4gaXNzdWUuZGVzY3JpcHRpb24uaW5jbHVkZXMoXCJ0b28gc2hvcnRcIikpXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBmbGFnIGFydGljbGVzIHRoYXQgYXJlIHRvbyBsb25nXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxvbmdBcnRpY2xlID0ge1xuICAgICAgICAuLi5tb2NrQXJ0aWNsZSxcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgIC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQsXG4gICAgICAgICAgd29yZENvdW50OiAxNjAwLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrRWRpdG9yaWFsUXVhbGl0eShcbiAgICAgICAgbG9uZ0FydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVzdWx0Lmlzc3Vlcy5zb21lKChpc3N1ZSkgPT4gaXNzdWUuZGVzY3JpcHRpb24uaW5jbHVkZXMoXCJ0b28gbG9uZ1wiKSlcbiAgICAgICkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGNoZWNrIHNlY3Rpb24gYmFsYW5jZVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbWJhbGFuY2VkQXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHNlY3Rpb25zOiBbXG4gICAgICAgICAgICB7IC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQuc2VjdGlvbnNbMF0sIGNvbnRlbnQ6IFwiU2hvcnQuXCIgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLi4ubW9ja0FydGljbGUuY29udGVudC5zZWN0aW9uc1sxXSxcbiAgICAgICAgICAgICAgY29udGVudDpcbiAgICAgICAgICAgICAgICBcIlRoaXMgaXMgYSBtdWNoIGxvbmdlciBzZWN0aW9uIHdpdGggc2lnbmlmaWNhbnRseSBtb3JlIGNvbnRlbnQgdGhhbiB0aGUgcHJldmlvdXMgb25lLCBjcmVhdGluZyBhbiBpbWJhbGFuY2UgaW4gdGhlIGFydGljbGUgc3RydWN0dXJlLlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrRWRpdG9yaWFsUXVhbGl0eShcbiAgICAgICAgaW1iYWxhbmNlZEFydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVzdWx0Lmlzc3Vlcy5zb21lKChpc3N1ZSkgPT4gaXNzdWUuZGVzY3JpcHRpb24uaW5jbHVkZXMoXCJ1bmJhbGFuY2VkXCIpKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImFjY2Vzc2liaWxpdHkgY2hlY2tpbmdcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNoZWNrIGFjY2Vzc2liaWxpdHkgYXV0b21hdGljYWxseVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAodmFsaWRhdG9yIGFzIGFueSkuY2hlY2tBY2Nlc3NpYmlsaXR5KG1vY2tBcnRpY2xlKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIGNhdGVnb3J5OiBcImFjY2Vzc2liaWxpdHlcIixcbiAgICAgICAgc2NvcmU6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgcGFzc2VkOiBleHBlY3QuYW55KEJvb2xlYW4pLFxuICAgICAgICBpc3N1ZXM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgICBjaGVja2VkQXQ6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIGNoZWNrZXI6IFwiYXV0b21hdGVkXCIsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGZsYWcgbG9uZyBzZW50ZW5jZXMgZm9yIHJlYWRhYmlsaXR5XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxvbmdTZW50ZW5jZUFydGljbGUgPSB7XG4gICAgICAgIC4uLm1vY2tBcnRpY2xlLFxuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgLi4ubW9ja0FydGljbGUuY29udGVudCxcbiAgICAgICAgICBzZWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LnNlY3Rpb25zWzBdLFxuICAgICAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgICAgIFwiVGhpcyBpcyBhbiBleHRyZW1lbHkgbG9uZyBzZW50ZW5jZSB0aGF0IGdvZXMgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIG9uIGFuZCBvbiBhbmQgb24gYW5kIGNvbnRpbnVlcyB0byBnbyBvbiB3aXRob3V0IGFueSBicmVha3Mgb3IgcGF1c2VzIHdoaWNoIG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0IHRvIHJlYWQgYW5kIHVuZGVyc3RhbmQgZm9yIHVzZXJzIHdobyBtYXkgaGF2ZSBhY2Nlc3NpYmlsaXR5IG5lZWRzLlwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKHZhbGlkYXRvciBhcyBhbnkpLmNoZWNrQWNjZXNzaWJpbGl0eShcbiAgICAgICAgbG9uZ1NlbnRlbmNlQXJ0aWNsZVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KFxuICAgICAgICByZXN1bHQuaXNzdWVzLnNvbWUoKGlzc3VlKSA9PlxuICAgICAgICAgIGlzc3VlLmRlc2NyaXB0aW9uLmluY2x1ZGVzKFwidG9vIGxvbmcgZm9yIGFjY2Vzc2liaWxpdHlcIilcbiAgICAgICAgKVxuICAgICAgKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgc3VnZ2VzdCBiZXR0ZXIgc2VjdGlvbiBzdHJ1Y3R1cmVcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcG9vclN0cnVjdHVyZUFydGljbGUgPSB7XG4gICAgICAgIC4uLm1vY2tBcnRpY2xlLFxuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgLi4ubW9ja0FydGljbGUuY29udGVudCxcbiAgICAgICAgICBzZWN0aW9uczogW1xuICAgICAgICAgICAgbW9ja0FydGljbGUuY29udGVudC5zZWN0aW9uc1swXSxcbiAgICAgICAgICAgIG1vY2tBcnRpY2xlLmNvbnRlbnQuc2VjdGlvbnNbMV0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0ICh2YWxpZGF0b3IgYXMgYW55KS5jaGVja0FjY2Vzc2liaWxpdHkoXG4gICAgICAgIHBvb3JTdHJ1Y3R1cmVBcnRpY2xlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlc3VsdC5pc3N1ZXMuc29tZSgoaXNzdWUpID0+XG4gICAgICAgICAgaXNzdWUuZGVzY3JpcHRpb24uaW5jbHVkZXMoXCJzZWN0aW9uIHN0cnVjdHVyZVwiKVxuICAgICAgICApXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwicXVhbGl0eSBzY29yaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBjYWxjdWxhdGUgd2VpZ2h0ZWQgb3ZlcmFsbCBzY29yZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjaGVja3MgPSBbXG4gICAgICAgIHsgY2F0ZWdvcnk6IFwiZmFjdHVhbF9hY2N1cmFjeVwiIGFzIGNvbnN0LCBzY29yZTogOTAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJicmFuZF92b2ljZVwiIGFzIGNvbnN0LCBzY29yZTogODUgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJjb250ZW50X3NhZmV0eVwiIGFzIGNvbnN0LCBzY29yZTogOTUgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJsZWdhbF9jb21wbGlhbmNlXCIgYXMgY29uc3QsIHNjb3JlOiA4OCB9LFxuICAgICAgICB7IGNhdGVnb3J5OiBcImVkaXRvcmlhbF9xdWFsaXR5XCIgYXMgY29uc3QsIHNjb3JlOiA4MCB9LFxuICAgICAgICB7IGNhdGVnb3J5OiBcImFjY2Vzc2liaWxpdHlcIiBhcyBjb25zdCwgc2NvcmU6IDg1IH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBvdmVyYWxsU2NvcmUgPSAodmFsaWRhdG9yIGFzIGFueSkuY2FsY3VsYXRlT3ZlcmFsbFNjb3JlKGNoZWNrcyk7XG5cbiAgICAgIGV4cGVjdChvdmVyYWxsU2NvcmUpLnRvQmVHcmVhdGVyVGhhbig4MCk7XG4gICAgICBleHBlY3Qob3ZlcmFsbFNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB3ZWlnaHQgZmFjdHVhbCBhY2N1cmFjeSBhbmQgc2FmZXR5IG1vc3QgaGVhdmlseVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBoaWdoRmFjdHVhbFNhZmV0eSA9IFtcbiAgICAgICAgeyBjYXRlZ29yeTogXCJmYWN0dWFsX2FjY3VyYWN5XCIgYXMgY29uc3QsIHNjb3JlOiAxMDAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJjb250ZW50X3NhZmV0eVwiIGFzIGNvbnN0LCBzY29yZTogMTAwIH0sXG4gICAgICAgIHsgY2F0ZWdvcnk6IFwiYnJhbmRfdm9pY2VcIiBhcyBjb25zdCwgc2NvcmU6IDUwIH0sXG4gICAgICAgIHsgY2F0ZWdvcnk6IFwibGVnYWxfY29tcGxpYW5jZVwiIGFzIGNvbnN0LCBzY29yZTogNTAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJlZGl0b3JpYWxfcXVhbGl0eVwiIGFzIGNvbnN0LCBzY29yZTogNTAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJhY2Nlc3NpYmlsaXR5XCIgYXMgY29uc3QsIHNjb3JlOiA1MCB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgbG93RmFjdHVhbFNhZmV0eSA9IFtcbiAgICAgICAgeyBjYXRlZ29yeTogXCJmYWN0dWFsX2FjY3VyYWN5XCIgYXMgY29uc3QsIHNjb3JlOiA1MCB9LFxuICAgICAgICB7IGNhdGVnb3J5OiBcImNvbnRlbnRfc2FmZXR5XCIgYXMgY29uc3QsIHNjb3JlOiA1MCB9LFxuICAgICAgICB7IGNhdGVnb3J5OiBcImJyYW5kX3ZvaWNlXCIgYXMgY29uc3QsIHNjb3JlOiAxMDAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJsZWdhbF9jb21wbGlhbmNlXCIgYXMgY29uc3QsIHNjb3JlOiAxMDAgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogXCJlZGl0b3JpYWxfcXVhbGl0eVwiIGFzIGNvbnN0LCBzY29yZTogMTAwIH0sXG4gICAgICAgIHsgY2F0ZWdvcnk6IFwiYWNjZXNzaWJpbGl0eVwiIGFzIGNvbnN0LCBzY29yZTogMTAwIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBoaWdoU2NvcmUgPSAodmFsaWRhdG9yIGFzIGFueSkuY2FsY3VsYXRlT3ZlcmFsbFNjb3JlKFxuICAgICAgICBoaWdoRmFjdHVhbFNhZmV0eVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGxvd1Njb3JlID0gKHZhbGlkYXRvciBhcyBhbnkpLmNhbGN1bGF0ZU92ZXJhbGxTY29yZShcbiAgICAgICAgbG93RmFjdHVhbFNhZmV0eVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGhpZ2hTY29yZSkudG9CZUdyZWF0ZXJUaGFuKGxvd1Njb3JlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJwYXNzL2ZhaWwgZGV0ZXJtaW5hdGlvblwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgZmFpbCBjb250ZW50IHdpdGggY3JpdGljYWwgaXNzdWVzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiBcImNvbnRlbnRfc2FmZXR5XCIgYXMgY29uc3QsXG4gICAgICAgICAgcGFzc2VkOiB0cnVlLFxuICAgICAgICAgIGlzc3VlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZXZlcml0eTogXCJjcml0aWNhbFwiLFxuICAgICAgICAgICAgICB0eXBlOiBcInNhZmV0eVwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDcml0aWNhbCBpc3N1ZVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcGFzc2VkID0gKHZhbGlkYXRvciBhcyBhbnkpLmRldGVybWluZVBhc3NTdGF0dXMoY2hlY2tzLCA5MCk7XG5cbiAgICAgIGV4cGVjdChwYXNzZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZmFpbCBjb250ZW50IGJlbG93IHNjb3JlIHRocmVzaG9sZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjaGVja3MgPSBbXG4gICAgICAgIHsgY2F0ZWdvcnk6IFwiZmFjdHVhbF9hY2N1cmFjeVwiIGFzIGNvbnN0LCBwYXNzZWQ6IHRydWUsIGlzc3VlczogW10gfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHBhc3NlZCA9ICh2YWxpZGF0b3IgYXMgYW55KS5kZXRlcm1pbmVQYXNzU3RhdHVzKGNoZWNrcywgNjApO1xuXG4gICAgICBleHBlY3QocGFzc2VkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHBhc3MgaGlnaC1xdWFsaXR5IGNvbnRlbnQgd2l0aG91dCBjcml0aWNhbCBpc3N1ZXNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6IFwiZmFjdHVhbF9hY2N1cmFjeVwiIGFzIGNvbnN0LFxuICAgICAgICAgIHBhc3NlZDogdHJ1ZSxcbiAgICAgICAgICBpc3N1ZXM6IFtcbiAgICAgICAgICAgIHsgc2V2ZXJpdHk6IFwibG93XCIsIHR5cGU6IFwibWlub3JcIiwgZGVzY3JpcHRpb246IFwiTWlub3IgaXNzdWVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBwYXNzZWQgPSAodmFsaWRhdG9yIGFzIGFueSkuZGV0ZXJtaW5lUGFzc1N0YXR1cyhjaGVja3MsIDg1KTtcblxuICAgICAgZXhwZWN0KHBhc3NlZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJodW1hbiByZXZpZXcgcmVxdWlyZW1lbnRzXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCByZXF1aXJlIHJldmlldyBmb3IgY3JpdGljYWwgaXNzdWVzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGNhdGVnb3J5OiBcImxlZ2FsX2NvbXBsaWFuY2VcIiBhcyBjb25zdCxcbiAgICAgICAgICBpc3N1ZXM6IFtcbiAgICAgICAgICAgIHsgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIiwgdHlwZTogXCJsZWdhbFwiLCBkZXNjcmlwdGlvbjogXCJMZWdhbCByaXNrXCIgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVxdWlyZXNSZXZpZXcgPSAodmFsaWRhdG9yIGFzIGFueSkucmVxdWlyZXNIdW1hblJldmlldyhjaGVja3MsIDkwKTtcblxuICAgICAgZXhwZWN0KHJlcXVpcmVzUmV2aWV3KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmVxdWlyZSByZXZpZXcgZm9yIHNjb3JlcyBiZWxvdyB0aHJlc2hvbGRcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tzID0gW3sgY2F0ZWdvcnk6IFwiZmFjdHVhbF9hY2N1cmFjeVwiIGFzIGNvbnN0LCBpc3N1ZXM6IFtdIH1dO1xuXG4gICAgICBjb25zdCByZXF1aXJlc1JldmlldyA9ICh2YWxpZGF0b3IgYXMgYW55KS5yZXF1aXJlc0h1bWFuUmV2aWV3KGNoZWNrcywgNzUpO1xuXG4gICAgICBleHBlY3QocmVxdWlyZXNSZXZpZXcpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBub3QgcmVxdWlyZSByZXZpZXcgZm9yIGhpZ2gtcXVhbGl0eSBjb250ZW50XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrcyA9IFt7IGNhdGVnb3J5OiBcImZhY3R1YWxfYWNjdXJhY3lcIiBhcyBjb25zdCwgaXNzdWVzOiBbXSB9XTtcblxuICAgICAgY29uc3QgcmVxdWlyZXNSZXZpZXcgPSAodmFsaWRhdG9yIGFzIGFueSkucmVxdWlyZXNIdW1hblJldmlldyhjaGVja3MsIDkwKTtcblxuICAgICAgZXhwZWN0KHJlcXVpcmVzUmV2aWV3KS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJpc3N1ZSBjYXRlZ29yaXphdGlvblwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgY2F0ZWdvcml6ZSBjcml0aWNhbCBhbmQgaGlnaCBpc3N1ZXMgYXMgYmxvY2tlcnNcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgY2hlY2tzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgY2F0ZWdvcnk6IFwiY29udGVudF9zYWZldHlcIiBhcyBjb25zdCxcbiAgICAgICAgICBpc3N1ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc2V2ZXJpdHk6IFwiY3JpdGljYWxcIixcbiAgICAgICAgICAgICAgdHlwZTogXCJzYWZldHlcIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ3JpdGljYWwgc2FmZXR5IGlzc3VlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZXZlcml0eTogXCJoaWdoXCIsXG4gICAgICAgICAgICAgIHR5cGU6IFwicXVhbGl0eVwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJIaWdoIHByaW9yaXR5IGlzc3VlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBzZXZlcml0eTogXCJtZWRpdW1cIiwgdHlwZTogXCJzdHlsZVwiLCBkZXNjcmlwdGlvbjogXCJNZWRpdW0gaXNzdWVcIiB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZXZlcml0eTogXCJsb3dcIixcbiAgICAgICAgICAgICAgdHlwZTogXCJtaW5vclwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJMb3cgcHJpb3JpdHkgaXNzdWVcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHsgYmxvY2tlcnMsIHdhcm5pbmdzIH0gPSAodmFsaWRhdG9yIGFzIGFueSkuY2F0ZWdvcml6ZUlzc3VlcyhcbiAgICAgICAgY2hlY2tzXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoYmxvY2tlcnMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdCh3YXJuaW5ncykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KGJsb2NrZXJzWzBdKS50b0NvbnRhaW4oXCJDcml0aWNhbCBzYWZldHkgaXNzdWVcIik7XG4gICAgICBleHBlY3QoYmxvY2tlcnNbMV0pLnRvQ29udGFpbihcIkhpZ2ggcHJpb3JpdHkgaXNzdWVcIik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwicmVjb21tZW5kYXRpb25zIGdlbmVyYXRpb25cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGdlbmVyYXRlIHJlY29tbWVuZGF0aW9ucyBmb3IgZmFpbGVkIGNoZWNrc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBjaGVja3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBjYXRlZ29yeTogXCJicmFuZF92b2ljZVwiIGFzIGNvbnN0LFxuICAgICAgICAgIHBhc3NlZDogZmFsc2UsXG4gICAgICAgICAgc2NvcmU6IDYwLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gKHZhbGlkYXRvciBhcyBhbnkpLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKFxuICAgICAgICBjaGVja3MsXG4gICAgICAgIG1vY2tBcnRpY2xlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVjb21tZW5kYXRpb25zLnNvbWUoKHIpID0+IHIudHlwZSA9PT0gXCJmaXhfcmVxdWlyZWRcIikpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5zb21lKChyKSA9PiByLmRlc2NyaXB0aW9uLmluY2x1ZGVzKFwiYnJhbmQgdm9pY2VcIikpXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCByZWNvbW1lbmQgVGVycnkgdm9pY2UgaW1wcm92ZW1lbnRzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGxvd1RlcnJ5QXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHRlcnJ5U2NvcmU6IDYwLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gKHZhbGlkYXRvciBhcyBhbnkpLmdlbmVyYXRlUmVjb21tZW5kYXRpb25zKFxuICAgICAgICBbXSxcbiAgICAgICAgbG93VGVycnlBcnRpY2xlXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5zb21lKChyKSA9PiByLmRlc2NyaXB0aW9uLmluY2x1ZGVzKFwiVGVycnkgdm9pY2VcIikpXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBzdWdnZXN0IHF1YWxpdHkgaW1wcm92ZW1lbnRzIGZvciBsb3ctc2NvcmluZyBhcnRpY2xlc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBsb3dRdWFsaXR5QXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIHF1YWxpdHlTY29yZTogNzAsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSAodmFsaWRhdG9yIGFzIGFueSkuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoXG4gICAgICAgIFtdLFxuICAgICAgICBsb3dRdWFsaXR5QXJ0aWNsZVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KFxuICAgICAgICByZWNvbW1lbmRhdGlvbnMuc29tZSgocikgPT4gci5kZXNjcmlwdGlvbi5pbmNsdWRlcyhcInF1YWxpdHlcIikpXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwic2VudGVuY2UgYW5hbHlzaXNcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNhbGN1bGF0ZSBhdmVyYWdlIHdvcmRzIHBlciBzZW50ZW5jZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBhdmdXb3JkcyA9ICh2YWxpZGF0b3IgYXMgYW55KS5jYWxjdWxhdGVBdmVyYWdlV29yZHNQZXJTZW50ZW5jZShcbiAgICAgICAgbW9ja0FydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChhdmdXb3JkcykudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KGF2Z1dvcmRzKS50b0JlTGVzc1RoYW4oNTApOyAvLyBSZWFzb25hYmxlIHVwcGVyIGJvdW5kXG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgY29udGVudCB3aXRoIG5vIHNlbnRlbmNlc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBub1NlbnRlbmNlQXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHNlY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC4uLm1vY2tBcnRpY2xlLmNvbnRlbnQuc2VjdGlvbnNbMF0sXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBhdmdXb3JkcyA9ICh2YWxpZGF0b3IgYXMgYW55KS5jYWxjdWxhdGVBdmVyYWdlV29yZHNQZXJTZW50ZW5jZShcbiAgICAgICAgbm9TZW50ZW5jZUFydGljbGVcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChhdmdXb3JkcykudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoXCJjb25maWd1cmF0aW9uIHZhbGlkYXRpb25cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIHZhbGlkYXRlIEFQSSBjb25maWd1cmF0aW9uIHN1Y2Nlc3NmdWxseVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgY2hvaWNlczogW3sgbWVzc2FnZTogeyBjb250ZW50OiBcIlRlc3QgcmVzcG9uc2VcIiB9IH1dLFxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB2YWxpZGF0b3IudmFsaWRhdGVDb25maWd1cmF0aW9uKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgQVBJIGNvbmZpZ3VyYXRpb24gZXJyb3JzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBFcnJvcihcIkludmFsaWQgQVBJIGtleVwiKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29uZmlndXJhdGlvbigpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnZhbGlkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQ29udGFpbihcIlRlcnJ5LWVuaGFuY2VkXCIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcImVkZ2UgY2FzZXMgYW5kIGVycm9yIGhhbmRsaW5nXCIsICgpID0+IHtcbiAgICBpdChcInNob3VsZCBoYW5kbGUgZW1wdHkgYXJ0aWNsZSBjb250ZW50XCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVtcHR5QXJ0aWNsZSA9IHtcbiAgICAgICAgLi4ubW9ja0FydGljbGUsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAuLi5tb2NrQXJ0aWNsZS5jb250ZW50LFxuICAgICAgICAgIHNlY3Rpb25zOiBbXSxcbiAgICAgICAgICB3b3JkQ291bnQ6IDAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgIHsgbWVzc2FnZTogeyBjb250ZW50OiBKU09OLnN0cmluZ2lmeSh7IHNjb3JlOiAwLCBpc3N1ZXM6IFtdIH0pIH0gfSxcbiAgICAgICAgXSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdG9yLnZhbGlkYXRlQ29udGVudChlbXB0eUFydGljbGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0Lm92ZXJhbGxTY29yZSkudG9CZUxlc3NUaGFuKDUwKTtcbiAgICAgIGV4cGVjdChyZXN1bHQucGFzc2VkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBtYWxmb3JtZWQgQUkgcmVzcG9uc2VzXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tPcGVuQUkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBjaG9pY2VzOiBbeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IFwiaW52YWxpZCBqc29uXCIgfSB9XSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHZhbGlkYXRvci52YWxpZGF0ZUNvbnRlbnQobW9ja0FydGljbGUpKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBudWxsIEFJIHJlc3BvbnNlc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrT3BlbkFJLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgY2hvaWNlczogW3sgbWVzc2FnZTogeyBjb250ZW50OiBudWxsIH0gfV0sXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh2YWxpZGF0b3IudmFsaWRhdGVDb250ZW50KG1vY2tBcnRpY2xlKSkucmVqZWN0cy50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCBoYW5kbGUgc3RyaWN0IG1vZGUgY29uZmlndXJhdGlvblwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJpY3RWYWxpZGF0b3IgPSBuZXcgQ29udGVudFF1YWxpdHlWYWxpZGF0b3Ioe1xuICAgICAgICBvcGVuYWlBcGlLZXk6IFwidGVzdC1rZXlcIixcbiAgICAgICAgc3RyaWN0TW9kZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBNb2NrIHJlc3BvbnNlc1xuICAgICAgbW9ja09wZW5BSS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0ZhY3R1YWxBY2N1cmFjeVJlc3BvbnNlKSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgICAgeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tCcmFuZFZvaWNlUmVzcG9uc2UpIH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgY2hvaWNlczogW1xuICAgICAgICAgICAgeyBtZXNzYWdlOiB7IGNvbnRlbnQ6IEpTT04uc3RyaW5naWZ5KG1vY2tTYWZldHlSZXNwb25zZSkgfSB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0gYXMgYW55KVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBjaG9pY2VzOiBbXG4gICAgICAgICAgICB7IG1lc3NhZ2U6IHsgY29udGVudDogSlNPTi5zdHJpbmdpZnkobW9ja0xlZ2FsUmVzcG9uc2UpIH0gfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0cmljdFZhbGlkYXRvci52YWxpZGF0ZUNvbnRlbnQobW9ja0FydGljbGUpO1xuXG4gICAgICAvLyBTdHJpY3QgbW9kZSBzaG91bGQgcmVxdWlyZSBoaWdoZXIgc2NvcmVzXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQVNBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUduQjtBQUNBRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtFQUFBLE9BQU87SUFDcENDLGVBQWUsRUFBRTtNQUNmQyxZQUFZLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUNDLEdBQVc7UUFBQSwwQkFBQUMsTUFBQSxDQUF3QkQsR0FBRztNQUFBLENBQUU7SUFDakU7RUFDRixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsU0FBQUUsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMs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