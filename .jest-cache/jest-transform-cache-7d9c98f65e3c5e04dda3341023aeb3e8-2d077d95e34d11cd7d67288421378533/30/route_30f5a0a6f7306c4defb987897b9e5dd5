e141da693ab621959b88a950a89e1e9a
/* istanbul ignore next */
function cov_1dvgo9gi0() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/stats/route.ts";
  var hash = "be026e02b76d49af51fbfa6b0b7097da1d8b048e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/stats/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 108,
          column: 1
        }
      },
      "1": {
        start: {
          line: 30,
          column: 48
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "2": {
        start: {
          line: 43,
          column: 50
        },
        end: {
          line: 54,
          column: 3
        }
      },
      "3": {
        start: {
          line: 56,
          column: 50
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "4": {
        start: {
          line: 65,
          column: 50
        },
        end: {
          line: 72,
          column: 3
        }
      },
      "5": {
        start: {
          line: 75,
          column: 22
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "6": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 82,
          column: 27
        }
      },
      "7": {
        start: {
          line: 80,
          column: 30
        },
        end: {
          line: 80,
          column: 35
        }
      },
      "8": {
        start: {
          line: 82,
          column: 22
        },
        end: {
          line: 82,
          column: 25
        }
      },
      "9": {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 107,
          column: 4
        }
      },
      "10": {
        start: {
          line: 111,
          column: 2
        },
        end: {
          line: 190,
          column: 3
        }
      },
      "11": {
        start: {
          line: 175,
          column: 18
        },
        end: {
          line: 175,
          column: 37
        }
      },
      "12": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 183,
          column: 7
        }
      },
      "13": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 185,
          column: 61
        }
      },
      "14": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 189,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 28
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 75,
            column: 22
          },
          end: {
            line: 75,
            column: 23
          }
        },
        loc: {
          start: {
            line: 78,
            column: 17
          },
          end: {
            line: 83,
            column: 3
          }
        },
        line: 78
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        loc: {
          start: {
            line: 80,
            column: 30
          },
          end: {
            line: 80,
            column: 35
          }
        },
        line: 80
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 11
          },
          end: {
            line: 82,
            column: 12
          }
        },
        loc: {
          start: {
            line: 82,
            column: 22
          },
          end: {
            line: 82,
            column: 25
          }
        },
        line: 82
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 110,
            column: 22
          },
          end: {
            line: 110,
            column: 25
          }
        },
        loc: {
          start: {
            line: 110,
            column: 48
          },
          end: {
            line: 191,
            column: 1
          }
        },
        line: 110
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 14
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 14
          }
        }],
        line: 77
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "be026e02b76d49af51fbfa6b0b7097da1d8b048e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dvgo9gi0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dvgo9gi0();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { NextResponse } from "next/server";
/* istanbul ignore next */
// Generate mock statistics
cov_1dvgo9gi0().s[0]++;
var generateMockStats = function generateMockStats() {
  /* istanbul ignore next */
  cov_1dvgo9gi0().f[0]++;
  // Mock tag frequency data
  var clubFrequency =
  /* istanbul ignore next */
  (cov_1dvgo9gi0().s[1]++, {
    Arsenal: 127,
    Chelsea: 114,
    "Manchester United": 98,
    Liverpool: 92,
    "Real Madrid": 87,
    Barcelona: 83,
    "Bayern Munich": 76,
    PSG: 71,
    "Manchester City": 69,
    Juventus: 65
  });
  var playerFrequency =
  /* istanbul ignore next */
  (cov_1dvgo9gi0().s[2]++, {
    "Erling Haaland": 45,
    "Kylian Mbappé": 42,
    "Jude Bellingham": 38,
    "Harry Kane": 35,
    "Mohamed Salah": 32,
    "Bukayo Saka": 30,
    "Vinícius Júnior": 28,
    Pedri: 26,
    "Phil Foden": 24,
    Gavi: 22
  });
  var leagueFrequency =
  /* istanbul ignore next */
  (cov_1dvgo9gi0().s[3]++, {
    "Premier League": 289,
    "La Liga": 187,
    "Serie A": 143,
    Bundesliga: 124,
    "Ligue 1": 98,
    "Champions League": 76
  });
  var sourceFrequency =
  /* istanbul ignore next */
  (cov_1dvgo9gi0().s[4]++, {
    FabrizioRomano: 234,
    David_Ornstein: 187,
    DiMarzio: 156,
    SamLee: 134,
    JPercyTelegraph: 98,
    ElChiringuito: 67 // For comedy value
  });

  // Get top items from each category
  /* istanbul ignore next */
  cov_1dvgo9gi0().s[5]++;
  var getTopItems = function getTopItems(frequency) {
    /* istanbul ignore next */
    var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1dvgo9gi0().b[0][0]++, 10);
    /* istanbul ignore next */
    cov_1dvgo9gi0().f[1]++;
    cov_1dvgo9gi0().s[6]++;
    return Object.entries(frequency).sort(function (
    /* istanbul ignore next */
    _ref,
    /* istanbul ignore next */
    _ref2) {
      /* istanbul ignore next */
      var _ref3 = _slicedToArray(_ref, 2),
        a = _ref3[1];
      /* istanbul ignore next */
      var _ref4 = _slicedToArray(_ref2, 2),
        b = _ref4[1];
      /* istanbul ignore next */
      cov_1dvgo9gi0().f[2]++;
      cov_1dvgo9gi0().s[7]++;
      return b - a;
    }).slice(0, limit).map(function (
    /* istanbul ignore next */
    _ref5) {
      /* istanbul ignore next */
      var _ref6 = _slicedToArray(_ref5, 1),
        key = _ref6[0];
      /* istanbul ignore next */
      cov_1dvgo9gi0().f[3]++;
      cov_1dvgo9gi0().s[8]++;
      return key;
    });
  };
  /* istanbul ignore next */
  cov_1dvgo9gi0().s[9]++;
  return {
    totalBriefings: 247,
    averageTerryScore: 87.3,
    topClubs: getTopItems(clubFrequency),
    topPlayers: getTopItems(playerFrequency),
    totalWords: 308275,
    totalReadTime: 1235,
    // minutes
    mostActiveDay: {
      date: "2025-01-31",
      // Transfer deadline day
      count: 24 // One every hour!
    },
    tagDistribution: {
      clubs: clubFrequency,
      players: playerFrequency,
      leagues: leagueFrequency,
      sources: sourceFrequency
    },
    engagement: {
      totalViews: 45789,
      totalShares: 3421,
      averageSharesPerBriefing: 13.8
    }
  };
};
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var stats, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1dvgo9gi0().f[4]++;
          cov_1dvgo9gi0().s[10]++;
          _context.p = 1;
          // TODO: Replace with actual database aggregation
          // const stats = await prisma.$transaction(async (tx) => {
          //   const [
          //     totalBriefings,
          //     avgTerryScore,
          //     totalMetrics,
          //     tagCounts,
          //   ] = await Promise.all([
          //     tx.briefing.count({ where: { status: 'published' } }),
          //     tx.briefing.aggregate({
          //       where: { status: 'published' },
          //       _avg: { 'metadata.terryScore': true },
          //     }),
          //     tx.briefing.aggregate({
          //       where: { status: 'published' },
          //       _sum: {
          //         'metadata.wordCount': true,
          //         'metadata.estimatedReadTime': true,
          //         'metadata.viewCount': true,
          //       },
          //     }),
          //     // Complex aggregation for tag frequencies
          //     tx.$queryRaw`
          //       SELECT
          //         jsonb_object_agg(tag_type, tag_counts) as tag_distribution
          //       FROM (
          //         SELECT
          //           'clubs' as tag_type,
          //           jsonb_object_agg(tag, count) as tag_counts
          //         FROM (
          //           SELECT
          //             jsonb_array_elements_text(tags->'clubs') as tag,
          //             COUNT(*) as count
          //           FROM briefings
          //           WHERE status = 'published'
          //           GROUP BY tag
          //           ORDER BY count DESC
          //         ) club_tags
          //         UNION ALL
          //         -- Similar for players, leagues, sources
          //       ) all_tags
          //     `,
          //   ]);
          //
          //   // Calculate most active day
          //   const mostActiveDay = await tx.$queryRaw`
          //     SELECT
          //       DATE(published_at) as date,
          //       COUNT(*) as count
          //     FROM briefings
          //     WHERE status = 'published'
          //     GROUP BY DATE(published_at)
          //     ORDER BY count DESC
          //     LIMIT 1
          //   `;
          //
          //   return {
          //     totalBriefings,
          //     averageTerryScore: avgTerryScore._avg['metadata.terryScore'] || 0,
          //     // ... process other stats
          //   };
          // });
          stats = (cov_1dvgo9gi0().s[11]++, generateMockStats());
          cov_1dvgo9gi0().s[12]++;
          return _context.a(2, NextResponse.json(stats, {
            status: 200,
            headers: {
              // Cache for 10 minutes as specified
              "Cache-Control": "public, s-maxage=600, stale-while-revalidate=1200"
            }
          }));
        case 2:
          _context.p = 2;
          _t = _context.v;
          cov_1dvgo9gi0().s[13]++;
          console.error("Error generating briefing stats:",
          /* istanbul ignore next */
          _t);
          cov_1dvgo9gi0().s[14]++;
          return _context.a(2, NextResponse.json({
            error: "Internal server error"
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 2]]);
  }));
  return _GET.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,