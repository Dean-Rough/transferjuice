3a2593d083401502ca42685d571e9a9f
/* istanbul ignore next */
function cov_1y8qhvu52h() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/live-feed/route.ts";
  var hash = "4bfd2b1c9c84717449b111fa1a9aedebfde47d4c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/live-feed/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 12,
          column: 47
        }
      },
      "1": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "2": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 57
        }
      },
      "3": {
        start: {
          line: 17,
          column: 19
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "4": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "5": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 45
        }
      },
      "6": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 84
        }
      },
      "7": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 65,
          column: 4
        }
      },
      "8": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 67
        }
      },
      "9": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 63
        }
      },
      "10": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "11": {
        start: {
          line: 50,
          column: 31
        },
        end: {
          line: 56,
          column: 18
        }
      },
      "12": {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 58,
          column: 69
        }
      },
      "13": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 62,
          column: 68
        }
      },
      "14": {
        start: {
          line: 63,
          column: 6
        },
        end: {
          line: 63,
          column: 29
        }
      },
      "15": {
        start: {
          line: 68,
          column: 2
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "16": {
        start: {
          line: 81,
          column: 2
        },
        end: {
          line: 88,
          column: 5
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 25
          }
        },
        loc: {
          start: {
            line: 11,
            column: 48
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 13
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 61
      },
      "3": {
        name: "OPTIONS",
        decl: {
          start: {
            line: 80,
            column: 22
          },
          end: {
            line: 80,
            column: 29
          }
        },
        loc: {
          start: {
            line: 80,
            column: 32
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 80
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 51
          }
        }, {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 16,
            column: 57
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 19
          },
          end: {
            line: 17,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 19
          },
          end: {
            line: 17,
            column: 59
          }
        }, {
          start: {
            line: 17,
            column: 63
          },
          end: {
            line: 17,
            column: 65
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 23
          }
        }, {
          start: {
            line: 20,
            column: 27
          },
          end: {
            line: 20,
            column: 35
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 21,
            column: 27
          }
        }, {
          start: {
            line: 21,
            column: 31
          },
          end: {
            line: 21,
            column: 43
          }
        }],
        line: 21
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4bfd2b1c9c84717449b111fa1a9aedebfde47d4c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1y8qhvu52h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1y8qhvu52h();
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Live Feed SSE (Server-Sent Events) Endpoint
 * 
 * Provides real-time updates to connected clients
 * for the live transfer feed experience
 */

import { addClient, removeClient } from '@/lib/realtime/broadcaster';
export
/* istanbul ignore next */
function GET(_x) {
  return _GET.apply(this, arguments);
}
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var _searchParams$get, _searchParams$get2;
    var _ref, searchParams, tags, priority, filters, clientId, stream;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1y8qhvu52h().f[0]++;
          cov_1y8qhvu52h().s[0]++;
          console.log('🔌 New SSE connection request');

          // Extract client filters from query params
          _ref = (cov_1y8qhvu52h().s[1]++, new URL(request.url)), searchParams = _ref.searchParams;
          tags = (cov_1y8qhvu52h().s[2]++,
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[0][0]++, (_searchParams$get = searchParams.get('tags')) === null || _searchParams$get === void 0 ? void 0 :
          /* istanbul ignore next */
          _searchParams$get.split(',')) ||
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[0][1]++, []));
          priority = (cov_1y8qhvu52h().s[3]++,
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[1][0]++, (_searchParams$get2 = searchParams.get('priority')) === null || _searchParams$get2 === void 0 ? void 0 :
          /* istanbul ignore next */
          _searchParams$get2.split(',')) ||
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[1][1]++, []));
          filters = (cov_1y8qhvu52h().s[4]++, _objectSpread(_objectSpread({},
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[2][0]++, tags.length > 0) &&
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[2][1]++, {
            tags: tags
          })),
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[3][0]++, priority.length > 0) &&
          /* istanbul ignore next */
          (cov_1y8qhvu52h().b[3][1]++, {
            priority: priority
          })));
          cov_1y8qhvu52h().s[5]++;
          console.log('🔍 Client filters:', filters);

          // Generate unique client ID
          clientId = (cov_1y8qhvu52h().s[6]++, "client_".concat(Date.now(), "_").concat(Math.random().toString(36).substr(2, 9))); // Create readable stream for SSE
          stream = (cov_1y8qhvu52h().s[7]++, new ReadableStream({
            /* istanbul ignore next */
            start: function start(controller) {
              /* istanbul ignore next */
              cov_1y8qhvu52h().f[1]++;
              cov_1y8qhvu52h().s[8]++;
              console.log(
              /* istanbul ignore next */
              "\uD83D\uDCE1 Starting SSE stream for client ".concat(clientId));

              // Add client to broadcaster
              /* istanbul ignore next */
              cov_1y8qhvu52h().s[9]++;
              addClient(clientId, new Response(), controller, filters);

              // Send initial connection message
              var welcomeMessage =
              /* istanbul ignore next */
              (cov_1y8qhvu52h().s[10]++, {
                id:
                /* istanbul ignore next */
                "welcome_".concat(Date.now()),
                type: 'connection',
                data: {
                  message: 'Connected to Transfer Juice live feed',
                  clientId: clientId,
                  filters: filters,
                  timestamp: new Date().toISOString()
                },
                timestamp: new Date().toISOString()
              });
              var formattedWelcome =
              /* istanbul ignore next */
              (cov_1y8qhvu52h().s[11]++, [
              /* istanbul ignore next */
              "id: ".concat(welcomeMessage.id),
              /* istanbul ignore next */
              "event: connection",
              /* istanbul ignore next */
              "data: ".concat(JSON.stringify(welcomeMessage)), '', ''].join('\n'));
              /* istanbul ignore next */
              cov_1y8qhvu52h().s[12]++;
              controller.enqueue(new TextEncoder().encode(formattedWelcome));
            },
            /* istanbul ignore next */
            cancel: function cancel() {
              /* istanbul ignore next */
              cov_1y8qhvu52h().f[2]++;
              cov_1y8qhvu52h().s[13]++;
              console.log(
              /* istanbul ignore next */
              "\uD83D\uDD0C SSE stream cancelled for client ".concat(clientId));
              /* istanbul ignore next */
              cov_1y8qhvu52h().s[14]++;
              removeClient(clientId);
            }
          })); // Return SSE response
          cov_1y8qhvu52h().s[15]++;
          return _context.a(2, new Response(stream, {
            headers: {
              'Content-Type': 'text/event-stream',
              'Cache-Control': 'no-cache',
              'Connection': 'keep-alive',
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'GET',
              'Access-Control-Allow-Headers': 'Cache-Control'
            }
          }));
      }
    }, _callee);
  }));
  return _GET.apply(this, arguments);
}
export
/* istanbul ignore next */
function OPTIONS() {
  return _OPTIONS.apply(this, arguments);
}
/* istanbul ignore next */
function _OPTIONS() {
  _OPTIONS = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2()
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_1y8qhvu52h().f[3]++;
          cov_1y8qhvu52h().s[16]++;
          return _context2.a(2, new Response(null, {
            status: 200,
            headers: {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'GET',
              'Access-Control-Allow-Headers': 'Cache-Control'
            }
          }));
      }
    }, _callee2);
  }));
  return _OPTIONS.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,