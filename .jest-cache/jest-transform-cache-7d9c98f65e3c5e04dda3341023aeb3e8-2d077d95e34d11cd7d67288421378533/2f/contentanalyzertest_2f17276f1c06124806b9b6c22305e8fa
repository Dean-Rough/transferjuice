39d16097f475f1fbb67d8ebcd76cde94
"use strict";

// Mock OpenAI
_getJestObj().mock('openai');
// Mock terry-style module
_getJestObj().mock('@/lib/terry-style', function () {
  return {
    applyTerryStyle: {
      enhanceError: jest.fn(function (msg) {
        return "Terry-enhanced: ".concat(msg);
      })
    }
  };
});
var _openai = _interopRequireDefault(require("openai"));
var _contentAnalyzer = require("../content-analyzer");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
/**
 * AI Content Analyzer Tests
 * Comprehensive test suite for tweet analysis and content classification
 */
var MockedOpenAI = _openai["default"];
describe('AIContentAnalyzer', function () {
  var analyzer;
  var mockOpenAI;
  var mockTweetInput = {
    id: 'tweet_123',
    text: 'Manchester United are close to signing Declan Rice for £100m after successful medical tests. Agent confirms deal should be completed by Friday.',
    authorHandle: 'FabrizioRomano',
    authorName: 'Fabrizio Romano',
    authorVerified: true,
    authorTier: 'tier1',
    createdAt: new Date('2024-01-15T10:00:00Z'),
    metrics: {
      retweets: 5420,
      likes: 18760,
      replies: 892,
      quotes: 234
    },
    context: {
      recentTweets: ['Previous transfer update about Rice'],
      authorSpecialties: ['Transfer news', 'Premier League']
    }
  };
  var mockClassificationResponse = {
    isTransferRelated: true,
    transferType: 'ADVANCED',
    priority: 'HIGH',
    confidence: 0.95,
    categories: ['signing', 'medical', 'fee_discussion'],
    keyPoints: ['Manchester United', 'Declan Rice', '£100m fee', 'Medical completed'],
    duplicateOf: undefined
  };
  var mockEntityResponse = {
    players: [{
      name: 'Declan Rice',
      confidence: 0.98,
      position: 'Defensive Midfielder',
      currentClub: 'West Ham United',
      nationality: 'England'
    }],
    clubs: [{
      name: 'Manchester United',
      confidence: 0.99,
      league: 'Premier League',
      country: 'England'
    }],
    transferDetails: [{
      type: 'fee',
      value: '£100m',
      confidence: 0.9
    }, {
      type: 'medical_date',
      value: 'completed',
      confidence: 0.85
    }],
    agents: [{
      name: undefined,
      company: undefined,
      confidence: 0.6
    }]
  };
  var mockSentimentResponse = {
    sentiment: 'positive',
    confidence: 0.85,
    emotions: ['excitement', 'optimism'],
    reliability: 0.95,
    urgency: 0.8
  };
  beforeEach(function () {
    jest.clearAllMocks();

    // Create mock OpenAI instance
    mockOpenAI = {
      chat: {
        completions: {
          create: jest.fn()
        }
      }
    };
    MockedOpenAI.mockImplementation(function () {
      return mockOpenAI;
    });
    analyzer = new _contentAnalyzer.AIContentAnalyzer({
      openaiApiKey: 'test-key',
      model: 'gpt-4.1',
      enableCaching: true
    });
  });
  describe('constructor', function () {
    it('should initialize with default configuration', function () {
      var defaultAnalyzer = new _contentAnalyzer.AIContentAnalyzer({
        openaiApiKey: 'test-key'
      });
      expect(defaultAnalyzer).toBeInstanceOf(_contentAnalyzer.AIContentAnalyzer);
    });
    it('should initialize with custom configuration', function () {
      var customAnalyzer = new _contentAnalyzer.AIContentAnalyzer({
        openaiApiKey: 'test-key',
        model: 'gpt-4o',
        maxTokens: 2000,
        temperature: 0.5,
        enableCaching: false
      });
      expect(customAnalyzer).toBeInstanceOf(_contentAnalyzer.AIContentAnalyzer);
    });
  });
  describe('analyzeTweet', function () {
    beforeEach(function () {
      // Mock successful API responses
      mockOpenAI.chat.completions.create.mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockClassificationResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockEntityResponse)
          }
        }]
      }).mockResolvedValueOnce({
        choices: [{
          message: {
            content: JSON.stringify(mockSentimentResponse)
          }
        }]
      });
    });
    it('should analyze tweet successfully with all components', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var result;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return analyzer.analyzeTweet(mockTweetInput);
          case 1:
            result = _context.v;
            expect(result).toMatchObject({
              classification: mockClassificationResponse,
              entities: mockEntityResponse,
              sentiment: mockSentimentResponse,
              qualityScore: expect.any(Number),
              terryCompatibility: expect.any(Number),
              processingTime: expect.any(Number),
              aiModel: 'gpt-4.1'
            });

            // Verify API was called three times (classification, entities, sentiment)
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(3);
          case 2:
            return _context.a(2);
        }
      }, _callee);
    })));
    it('should return cached result on subsequent calls', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {
      var result;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return analyzer.analyzeTweet(mockTweetInput);
          case 1:
            _context2.n = 2;
            return analyzer.analyzeTweet(mockTweetInput);
          case 2:
            result = _context2.v;
            expect(result).toBeDefined();
            // Should still be called 3 times from first call only
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(3);
          case 3:
            return _context2.a(2);
        }
      }, _callee2);
    })));
    it('should calculate quality score correctly for tier1 author', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
      var result;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _context3.n = 1;
            return analyzer.analyzeTweet(mockTweetInput);
          case 1:
            result = _context3.v;
            // Tier1 + verified + high confidence should give high quality score
            expect(result.qualityScore).toBeGreaterThan(80);
          case 2:
            return _context3.a(2);
        }
      }, _callee3);
    })));
    it('should calculate Terry compatibility score for chaotic content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {
      var chaoticInput, result;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            chaoticInput = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: 'This mental transfer saga involves £200m and proper chaos at the club!'
            });
            _context4.n = 1;
            return analyzer.analyzeTweet(chaoticInput);
          case 1:
            result = _context4.v;
            // Should get bonus points for "mental" and "chaos"
            expect(result.terryCompatibility).toBeGreaterThan(20);
          case 2:
            return _context4.a(2);
        }
      }, _callee4);
    })));
    it('should handle API errors gracefully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error('API Error'));
            _context5.n = 1;
            return expect(analyzer.analyzeTweet(mockTweetInput)).rejects.toThrow('AI analysis failed');
          case 1:
            return _context5.a(2);
        }
      }, _callee5);
    })));
    it('should handle invalid JSON responses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6() {
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: 'invalid json'
                }
              }]
            });
            _context6.n = 1;
            return expect(analyzer.analyzeTweet(mockTweetInput)).rejects.toThrow();
          case 1:
            return _context6.a(2);
        }
      }, _callee6);
    })));
    it('should handle empty API responses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7() {
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: null
                }
              }]
            });
            _context7.n = 1;
            return expect(analyzer.analyzeTweet(mockTweetInput)).rejects.toThrow('No response from AI');
          case 1:
            return _context7.a(2);
        }
      }, _callee7);
    })));
  });
  describe('classifyContent', function () {
    it('should classify transfer-related content correctly', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8() {
      var result;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockClassificationResponse)
                }
              }]
            });
            _context8.n = 1;
            return analyzer.classifyContent(mockTweetInput);
          case 1:
            result = _context8.v;
            expect(result).toMatchObject(mockClassificationResponse);
            expect(mockOpenAI.chat.completions.create).toHaveBeenCalledWith(expect.objectContaining({
              model: 'gpt-4.1',
              response_format: {
                type: 'json_object'
              }
            }));
          case 2:
            return _context8.a(2);
        }
      }, _callee8);
    })));
    it('should handle non-transfer content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9() {
      var nonTransferResponse, result;
      return _regenerator().w(function (_context9) {
        while (1) switch (_context9.n) {
          case 0:
            nonTransferResponse = _objectSpread(_objectSpread({}, mockClassificationResponse), {}, {
              isTransferRelated: false,
              transferType: undefined,
              priority: 'LOW'
            });
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(nonTransferResponse)
                }
              }]
            });
            _context9.n = 1;
            return analyzer.classifyContent(_objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: "Great goal by Messi in today's match!"
            }));
          case 1:
            result = _context9.v;
            expect(result.isTransferRelated).toBe(false);
            expect(result.priority).toBe('LOW');
          case 2:
            return _context9.a(2);
        }
      }, _callee9);
    })));
  });
  describe('extractEntities', function () {
    it('should extract players, clubs, and transfer details', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0() {
      var result;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockEntityResponse)
                }
              }]
            });
            _context0.n = 1;
            return analyzer.extractEntities(mockTweetInput);
          case 1:
            result = _context0.v;
            expect(result.players).toHaveLength(1);
            expect(result.players[0].name).toBe('Declan Rice');
            expect(result.clubs).toHaveLength(1);
            expect(result.clubs[0].name).toBe('Manchester United');
            expect(result.transferDetails).toHaveLength(2);
          case 2:
            return _context0.a(2);
        }
      }, _callee0);
    })));
    it('should handle empty entity responses', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1() {
      var emptyResponse, result;
      return _regenerator().w(function (_context1) {
        while (1) switch (_context1.n) {
          case 0:
            emptyResponse = {
              players: [],
              clubs: [],
              transferDetails: [],
              agents: []
            };
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(emptyResponse)
                }
              }]
            });
            _context1.n = 1;
            return analyzer.extractEntities(mockTweetInput);
          case 1:
            result = _context1.v;
            expect(result.players).toHaveLength(0);
            expect(result.clubs).toHaveLength(0);
            expect(result.transferDetails).toHaveLength(0);
          case 2:
            return _context1.a(2);
        }
      }, _callee1);
    })));
  });
  describe('analyzeSentiment', function () {
    it('should analyze sentiment and reliability correctly', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10() {
      var result;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(mockSentimentResponse)
                }
              }]
            });
            _context10.n = 1;
            return analyzer.analyzeSentiment(mockTweetInput);
          case 1:
            result = _context10.v;
            expect(result.sentiment).toBe('positive');
            expect(result.confidence).toBe(0.85);
            expect(result.emotions).toContain('excitement');
            expect(result.reliability).toBe(0.95);
            expect(result.urgency).toBe(0.8);
          case 2:
            return _context10.a(2);
        }
      }, _callee10);
    })));
    it('should handle negative sentiment correctly', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11() {
      var negativeSentimentResponse, result;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            negativeSentimentResponse = {
              sentiment: 'negative',
              confidence: 0.9,
              emotions: ['disappointment', 'anxiety'],
              reliability: 0.8,
              urgency: 0.3
            };
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: JSON.stringify(negativeSentimentResponse)
                }
              }]
            });
            _context11.n = 1;
            return analyzer.analyzeSentiment(_objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: 'Deal collapsed! Manchester United failed to sign the player.'
            }));
          case 1:
            result = _context11.v;
            expect(result.sentiment).toBe('negative');
            expect(result.emotions).toContain('disappointment');
          case 2:
            return _context11.a(2);
        }
      }, _callee11);
    })));
  });
  describe('quality scoring', function () {
    it('should score tier1 verified authors highly', function () {
      var score = analyzer.calculateQualityScore(mockClassificationResponse, mockEntityResponse, mockSentimentResponse, mockTweetInput);
      expect(score).toBeGreaterThan(70);
    });
    it('should score tier3 unverified authors lower', function () {
      var tier3Input = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
        authorTier: 'tier3',
        authorVerified: false
      });
      var score = analyzer.calculateQualityScore(mockClassificationResponse, mockEntityResponse, mockSentimentResponse, tier3Input);
      expect(score).toBeLessThan(60);
    });
    it('should boost score for specific entities', function () {
      var richEntityResponse = _objectSpread(_objectSpread({}, mockEntityResponse), {}, {
        players: [{
          name: 'Player 1',
          confidence: 0.9
        }, {
          name: 'Player 2',
          confidence: 0.8
        }],
        clubs: [{
          name: 'Club 1',
          confidence: 0.95
        }, {
          name: 'Club 2',
          confidence: 0.85
        }]
      });
      var score = analyzer.calculateQualityScore(mockClassificationResponse, richEntityResponse, mockSentimentResponse, mockTweetInput);
      expect(score).toBeGreaterThan(75);
    });
  });
  describe('Terry compatibility scoring', function () {
    it('should score chaotic content higher', function () {
      var chaoticSentiment = _objectSpread(_objectSpread({}, mockSentimentResponse), {}, {
        emotions: ['excitement', 'skepticism', 'anxiety']
      });
      var chaoticEntities = _objectSpread(_objectSpread({}, mockEntityResponse), {}, {
        transferDetails: [{
          type: 'fee',
          value: '£200m',
          confidence: 0.9
        }, {
          type: 'wage',
          value: '£500k per week',
          confidence: 0.8
        }]
      });
      var chaoticInput = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
        text: 'This mental transfer chaos involves £200m and proper mayhem!'
      });
      var score = analyzer.calculateTerryCompatibility(chaoticInput, chaoticSentiment, chaoticEntities);
      expect(score).toBeGreaterThan(50);
    });
    it('should score big fees higher', function () {
      var bigFeeEntities = _objectSpread(_objectSpread({}, mockEntityResponse), {}, {
        transferDetails: [{
          type: 'fee',
          value: '£150m',
          confidence: 0.9
        }]
      });
      var score = analyzer.calculateTerryCompatibility(mockTweetInput, mockSentimentResponse, bigFeeEntities);
      expect(score).toBeGreaterThan(30);
    });
  });
  describe('cache management', function () {
    it('should generate consistent cache keys', function () {
      var key1 = analyzer.generateCacheKey(mockTweetInput);
      var key2 = analyzer.generateCacheKey(mockTweetInput);
      expect(key1).toBe(key2);
      expect(key1).toContain(mockTweetInput.id);
      expect(key1).toContain(mockTweetInput.authorHandle);
    });
    it('should clear cache successfully', function () {
      analyzer.clearCache();
      var stats = analyzer.getCacheStats();
      expect(stats.size).toBe(0);
    });
    it('should return cache statistics', function () {
      var stats = analyzer.getCacheStats();
      expect(stats).toHaveProperty('size');
      expect(stats).toHaveProperty('hitRate');
      expect(_typeof(stats.size)).toBe('number');
      expect(_typeof(stats.hitRate)).toBe('number');
    });
  });
  describe('configuration validation', function () {
    it('should validate API configuration successfully', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12() {
      var result;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockResolvedValue({
              choices: [{
                message: {
                  content: 'Test response'
                }
              }]
            });
            _context12.n = 1;
            return analyzer.validateConfiguration();
          case 1:
            result = _context12.v;
            expect(result.valid).toBe(true);
            expect(result.error).toBeUndefined();
          case 2:
            return _context12.a(2);
        }
      }, _callee12);
    })));
    it('should handle API configuration errors', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var result;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            mockOpenAI.chat.completions.create.mockRejectedValue(new Error('Invalid API key'));
            _context13.n = 1;
            return analyzer.validateConfiguration();
          case 1:
            result = _context13.v;
            expect(result.valid).toBe(false);
            expect(result.error).toContain('Terry-enhanced');
          case 2:
            return _context13.a(2);
        }
      }, _callee13);
    })));
  });
  describe('edge cases and error handling', function () {
    it('should handle tweets with minimal content', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14() {
      var minimalTweet, result;
      return _regenerator().w(function (_context14) {
        while (1) switch (_context14.n) {
          case 0:
            minimalTweet = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: 'Yes.',
              metrics: {
                retweets: 0,
                likes: 1,
                replies: 0,
                quotes: 0
              }
            });
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(_objectSpread(_objectSpread({}, mockClassificationResponse), {}, {
                    isTransferRelated: false,
                    confidence: 0.1
                  }))
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify({
                    players: [],
                    clubs: [],
                    transferDetails: [],
                    agents: []
                  })
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify({
                    sentiment: 'neutral',
                    confidence: 0.5,
                    emotions: [],
                    reliability: 0.2,
                    urgency: 0.1
                  })
                }
              }]
            });
            _context14.n = 1;
            return analyzer.analyzeTweet(minimalTweet);
          case 1:
            result = _context14.v;
            expect(result.qualityScore).toBeLessThan(50);
            expect(result.terryCompatibility).toBeLessThan(20);
          case 2:
            return _context14.a(2);
        }
      }, _callee14);
    })));
    it('should handle tweets with special characters and emojis', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15() {
      var emojiTweet, result;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            emojiTweet = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: '🚨 BREAKING: Manchester United 🔴 are close to signing Declan Rice! 💰£100m deal 📝✅'
            });
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockClassificationResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockEntityResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockSentimentResponse)
                }
              }]
            });
            _context15.n = 1;
            return analyzer.analyzeTweet(emojiTweet);
          case 1:
            result = _context15.v;
            expect(result).toBeDefined();
            expect(result.classification.isTransferRelated).toBe(true);
          case 2:
            return _context15.a(2);
        }
      }, _callee15);
    })));
    it('should handle very long tweets', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16() {
      var longTweet, result;
      return _regenerator().w(function (_context16) {
        while (1) switch (_context16.n) {
          case 0:
            longTweet = _objectSpread(_objectSpread({}, mockTweetInput), {}, {
              text: 'Manchester United '.repeat(50) + 'are signing Declan Rice for £100m.'
            });
            mockOpenAI.chat.completions.create.mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockClassificationResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockEntityResponse)
                }
              }]
            }).mockResolvedValueOnce({
              choices: [{
                message: {
                  content: JSON.stringify(mockSentimentResponse)
                }
              }]
            });
            _context16.n = 1;
            return analyzer.analyzeTweet(longTweet);
          case 1:
            result = _context16.v;
            expect(result).toBeDefined();
            expect(result.processingTime).toBeGreaterThan(0);
          case 2:
            return _context16.a(2);
        }
      }, _callee16);
    })));
  });
  describe('prompt building', function () {
    it('should build classification prompt with all context', function () {
      var prompt = analyzer.buildClassificationPrompt(mockTweetInput);
      expect(prompt).toContain(mockTweetInput.text);
      expect(prompt).toContain(mockTweetInput.authorHandle);
      expect(prompt).toContain(mockTweetInput.authorName);
      expect(prompt).toContain(mockTweetInput.authorTier);
      expect(prompt).toContain('Verified: true');
      expect(prompt).toContain('Transfer news');
    });
    it('should build entity extraction prompt correctly', function () {
      var prompt = analyzer.buildEntityExtractionPrompt(mockTweetInput);
      expect(prompt).toContain('Extract Football Entities');
      expect(prompt).toContain(mockTweetInput.text);
      expect(prompt).toContain(mockTweetInput.authorHandle);
      expect(prompt).toContain(mockTweetInput.authorTier);
    });
    it('should build sentiment analysis prompt correctly', function () {
      var prompt = analyzer.buildSentimentPrompt(mockTweetInput);
      expect(prompt).toContain('Sentiment Analysis Request');
      expect(prompt).toContain(mockTweetInput.text);
      expect(prompt).toContain("Verified: ".concat(mockTweetInput.authorVerified));
      expect(prompt).toContain("Tier: ".concat(mockTweetInput.authorTier));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,