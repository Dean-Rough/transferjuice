{"version":3,"names":["cov_1wccg973yc","actualCoverage","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","Symbol","iterator","Array","from","isArray","_arrayLikeToArray","_slicedToArray","e","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","a","t","toString","call","slice","constructor","name","test","length","n","l","i","u","f","o","next","Object","done","push","value","getTransferKeywords","getSourceByHandle","LANGUAGE_PATTERNS","s","en","es","it","fr","de","pt","TRANSFER_CONTEXTS","confirmed","rumour","medical","bid","personal_terms","detectLanguage","text","_Object$entries$find","scores","entries","forEach","_ref","_ref2","lang","pattern","matches","match","b","maxScore","Math","max","apply","values","find","_ref3","_ref4","_","score","extractTransferKeywords","language","keywords","lowerText","toLowerCase","filter","keyword","includes","determineTransferType","contexts","_i","_Object$entries","_Object$entries$_i","type","patterns","some","undefined","calculateConfidence","source","transferType","confidence","keywordDensity","split","min","reliability","typeScores","signing","qualityIndicators","hasQualityIndicators","indicator","classifyTransferContent","tweet","detectedLanguage","author","username","isTransferRelated","reasonCode","explanation","concat","round","classifyBatchTransferContent","tweets","map","filterByConfidence","classifications","minConfidence","arguments","result","getClassificationStats","total","transferRelated","c","highConfidence","languageStats","reduce","acc","typeStats","transferRate","averageConfidence","sum"],"sources":["transferClassifier.ts"],"sourcesContent":["/**\n * Multi-language Transfer Content Classification\n * Detects transfer-related content across different languages and regions\n */\n\nimport {\n  getTransferKeywords,\n  getSourceByHandle,\n  type ITKSource,\n} from './globalSources';\n\nexport interface ClassificationResult {\n  isTransferRelated: boolean;\n  confidence: number;\n  transferType?:\n    | 'signing'\n    | 'rumour'\n    | 'medical'\n    | 'confirmed'\n    | 'bid'\n    | 'personal_terms';\n  keywords: string[];\n  language?: ITKSource['language'];\n  reasonCode: string;\n  explanation: string;\n}\n\nexport interface TweetData {\n  id: string;\n  text: string;\n  author: {\n    username: string;\n    displayName: string;\n  };\n  createdAt: string;\n  lang?: string;\n  metrics?: {\n    retweets: number;\n    likes: number;\n    replies: number;\n  };\n  urls?: string[];\n  media?: Array<{\n    type: 'photo' | 'video';\n    url: string;\n  }>;\n}\n\n/**\n * Language detection patterns\n */\nconst LANGUAGE_PATTERNS = {\n  en: /\\b(the|and|or|is|are|was|were|have|has|will|would|could|should)\\b/gi,\n  es: /\\b(el|la|los|las|y|o|es|son|fue|fueron|tiene|tendrÃ¡|podrÃ­a|deberÃ­a)\\b/gi,\n  it: /\\b(il|la|i|le|e|o|Ã¨|sono|era|erano|ha|avrÃ |potrebbe|dovrebbe)\\b/gi,\n  fr: /\\b(le|la|les|et|ou|est|sont|Ã©tait|Ã©taient|a|aura|pourrait|devrait)\\b/gi,\n  de: /\\b(der|die|das|und|oder|ist|sind|war|waren|hat|wird|kÃ¶nnte|sollte)\\b/gi,\n  pt: /\\b(o|a|os|as|e|ou|Ã©|sÃ£o|foi|foram|tem|terÃ¡|poderia|deveria)\\b/gi,\n};\n\n/**\n * Transfer context patterns by language\n */\nconst TRANSFER_CONTEXTS = {\n  en: {\n    confirmed: [\n      'done deal',\n      'here we go',\n      'official',\n      'confirmed',\n      'signed',\n      'completed',\n    ],\n    rumour: [\n      'linked',\n      'interested',\n      'monitoring',\n      'considering',\n      'could',\n      'might',\n      'rumoured',\n    ],\n    medical: ['medical', 'medicals', 'tests', 'examination', 'check-up'],\n    bid: ['bid', 'offer', 'proposed', 'rejected', 'accepted', 'negotiating'],\n    personal_terms: [\n      'personal terms',\n      'terms agreed',\n      'contract agreed',\n      'wages agreed',\n    ],\n  },\n  es: {\n    confirmed: ['hecho', 'oficial', 'confirmado', 'firmado', 'completado'],\n    rumour: [\n      'vinculado',\n      'interesado',\n      'monitoreando',\n      'considerando',\n      'podrÃ­a',\n      'rumoreado',\n    ],\n    medical: ['reconocimiento mÃ©dico', 'exÃ¡menes', 'pruebas mÃ©dicas'],\n    bid: ['oferta', 'propuesta', 'rechazado', 'aceptado', 'negociando'],\n    personal_terms: [\n      'tÃ©rminos personales',\n      'contrato acordado',\n      'salario acordado',\n    ],\n  },\n  it: {\n    confirmed: ['fatto', 'ufficiale', 'confermato', 'firmato', 'completato'],\n    rumour: [\n      'collegato',\n      'interessato',\n      'monitoraggio',\n      'considerando',\n      'potrebbe',\n      'voci',\n    ],\n    medical: ['visite mediche', 'esami', 'controlli medici'],\n    bid: ['offerta', 'proposta', 'rifiutato', 'accettato', 'trattativa'],\n    personal_terms: [\n      'accordo personale',\n      'contratto concordato',\n      'stipendio concordato',\n    ],\n  },\n  fr: {\n    confirmed: ['fait', 'officiel', 'confirmÃ©', 'signÃ©', 'terminÃ©'],\n    rumour: [\n      'liÃ©',\n      'intÃ©ressÃ©',\n      'surveillance',\n      'considÃ©rant',\n      'pourrait',\n      'rumeur',\n    ],\n    medical: ['visite mÃ©dicale', 'examens', 'tests mÃ©dicaux'],\n    bid: ['offre', 'proposition', 'rejetÃ©', 'acceptÃ©', 'nÃ©gociation'],\n    personal_terms: ['accord personnel', 'contrat convenu', 'salaire convenu'],\n  },\n  de: {\n    confirmed: [\n      'gemacht',\n      'offiziell',\n      'bestÃ¤tigt',\n      'unterschrieben',\n      'abgeschlossen',\n    ],\n    rumour: [\n      'verknÃ¼pft',\n      'interessiert',\n      'beobachtung',\n      'erwÃ¤gt',\n      'kÃ¶nnte',\n      'gerÃ¼cht',\n    ],\n    medical: ['medizincheck', 'untersuchungen', 'medizinische tests'],\n    bid: ['angebot', 'vorschlag', 'abgelehnt', 'akzeptiert', 'verhandlung'],\n    personal_terms: [\n      'persÃ¶nliche bedingungen',\n      'vertrag vereinbart',\n      'gehalt vereinbart',\n    ],\n  },\n  pt: {\n    confirmed: ['feito', 'oficial', 'confirmado', 'assinado', 'completado'],\n    rumour: [\n      'ligado',\n      'interessado',\n      'monitoramento',\n      'considerando',\n      'poderia',\n      'rumor',\n    ],\n    medical: ['exames mÃ©dicos', 'exames', 'testes mÃ©dicos'],\n    bid: ['oferta', 'proposta', 'rejeitado', 'aceito', 'negociaÃ§Ã£o'],\n    personal_terms: [\n      'termos pessoais',\n      'contrato acordado',\n      'salÃ¡rio acordado',\n    ],\n  },\n};\n\n/**\n * Detect language of tweet content\n */\nexport const detectLanguage = (text: string): ITKSource['language'] => {\n  const scores: Record<ITKSource['language'], number> = {\n    en: 0,\n    es: 0,\n    it: 0,\n    fr: 0,\n    de: 0,\n    pt: 0,\n  };\n\n  // Count pattern matches for each language\n  Object.entries(LANGUAGE_PATTERNS).forEach(([lang, pattern]) => {\n    const matches = text.match(pattern);\n    scores[lang as ITKSource['language']] = matches ? matches.length : 0;\n  });\n\n  // Return language with highest score, default to English\n  const maxScore = Math.max(...Object.values(scores));\n  if (maxScore === 0) return 'en';\n\n  return (\n    (Object.entries(scores).find(\n      ([_, score]) => score === maxScore\n    )?.[0] as ITKSource['language']) || 'en'\n  );\n};\n\n/**\n * Extract transfer-related keywords from text\n */\nexport const extractTransferKeywords = (\n  text: string,\n  language: ITKSource['language']\n): string[] => {\n  const keywords = getTransferKeywords(language);\n  const lowerText = text.toLowerCase();\n\n  return keywords.filter((keyword) =>\n    lowerText.includes(keyword.toLowerCase())\n  );\n};\n\n/**\n * Determine transfer type based on context\n */\nexport const determineTransferType = (\n  text: string,\n  language: ITKSource['language']\n): ClassificationResult['transferType'] | undefined => {\n  const lowerText = text.toLowerCase();\n  const contexts = TRANSFER_CONTEXTS[language];\n\n  // Check each transfer type\n  for (const [type, patterns] of Object.entries(contexts)) {\n    if (patterns.some((pattern) => lowerText.includes(pattern.toLowerCase()))) {\n      return type as ClassificationResult['transferType'];\n    }\n  }\n\n  return undefined;\n};\n\n/**\n * Calculate confidence score based on multiple factors\n */\nexport const calculateConfidence = (\n  text: string,\n  keywords: string[],\n  source?: ITKSource,\n  transferType?: ClassificationResult['transferType']\n): number => {\n  let confidence = 0;\n\n  // Keyword density (30% weight)\n  const keywordDensity = keywords.length / text.split(' ').length;\n  confidence += Math.min(keywordDensity * 3, 0.3);\n\n  // Source reliability (40% weight)\n  if (source) {\n    confidence += source.reliability * 0.4;\n  } else {\n    confidence += 0.1; // Unknown source penalty\n  }\n\n  // Transfer type specificity (20% weight)\n  if (transferType) {\n    const typeScores = {\n      confirmed: 0.2,\n      signing: 0.18,\n      medical: 0.15,\n      bid: 0.12,\n      personal_terms: 0.15,\n      rumour: 0.08,\n    };\n    confidence += typeScores[transferType] || 0.1;\n  }\n\n  // Content quality indicators (10% weight)\n  const qualityIndicators = ['exclusive', 'breaking', 'ðŸš¨', 'âœ…', 'here we go'];\n  const hasQualityIndicators = qualityIndicators.some((indicator) =>\n    text.toLowerCase().includes(indicator.toLowerCase())\n  );\n  if (hasQualityIndicators) confidence += 0.1;\n\n  return Math.min(confidence, 1.0);\n};\n\n/**\n * Main classification function\n */\nexport const classifyTransferContent = (\n  tweet: TweetData\n): ClassificationResult => {\n  const text = tweet.text;\n  const detectedLanguage = detectLanguage(text);\n  const source = getSourceByHandle(tweet.author.username);\n\n  // Extract transfer keywords\n  const keywords = extractTransferKeywords(text, detectedLanguage);\n\n  // Early exit if no transfer keywords found\n  if (keywords.length === 0) {\n    return {\n      isTransferRelated: false,\n      confidence: 0,\n      keywords: [],\n      language: detectedLanguage,\n      reasonCode: 'NO_TRANSFER_KEYWORDS',\n      explanation: 'No transfer-related keywords found in the content',\n    };\n  }\n\n  // Determine transfer type\n  const transferType = determineTransferType(text, detectedLanguage);\n\n  // Calculate confidence\n  const confidence = calculateConfidence(text, keywords, source, transferType);\n\n  // Determine if transfer-related based on confidence threshold\n  const isTransferRelated = confidence >= 0.3; // 30% minimum confidence\n\n  // Generate explanation\n  let explanation = `Found ${keywords.length} transfer keywords in ${detectedLanguage} text`;\n  if (source) {\n    explanation += ` from ${source.name} (${Math.round(source.reliability * 100)}% reliability)`;\n  }\n  if (transferType) {\n    explanation += ` indicating ${transferType}`;\n  }\n\n  return {\n    isTransferRelated,\n    confidence: Math.round(confidence * 100) / 100, // Round to 2 decimal places\n    transferType,\n    keywords,\n    language: detectedLanguage,\n    reasonCode: isTransferRelated ? 'TRANSFER_DETECTED' : 'LOW_CONFIDENCE',\n    explanation,\n  };\n};\n\n/**\n * Batch classification for multiple tweets\n */\nexport const classifyBatchTransferContent = (\n  tweets: TweetData[]\n): ClassificationResult[] => {\n  return tweets.map(classifyTransferContent);\n};\n\n/**\n * Filter tweets by confidence threshold\n */\nexport const filterByConfidence = (\n  classifications: ClassificationResult[],\n  minConfidence: number = 0.5\n): ClassificationResult[] => {\n  return classifications.filter(\n    (result) => result.isTransferRelated && result.confidence >= minConfidence\n  );\n};\n\n/**\n * Get classification statistics\n */\nexport const getClassificationStats = (\n  classifications: ClassificationResult[]\n) => {\n  const total = classifications.length;\n  const transferRelated = classifications.filter(\n    (c) => c.isTransferRelated\n  ).length;\n  const highConfidence = classifications.filter(\n    (c) => c.confidence >= 0.7\n  ).length;\n\n  const languageStats = classifications.reduce(\n    (acc, c) => {\n      const lang = c.language || 'unknown';\n      acc[lang] = (acc[lang] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  const typeStats = classifications.reduce(\n    (acc, c) => {\n      if (c.transferType) {\n        acc[c.transferType] = (acc[c.transferType] || 0) + 1;\n      }\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  return {\n    total,\n    transferRelated,\n    highConfidence,\n    transferRate: Math.round((transferRelated / total) * 100),\n    averageConfidence: Math.round(\n      (classifications.reduce((sum, c) => sum + c.confidence, 0) / total) * 100\n    ),\n    languageStats,\n    typeStats,\n  };\n};\n"],"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","ignoreList":[]}