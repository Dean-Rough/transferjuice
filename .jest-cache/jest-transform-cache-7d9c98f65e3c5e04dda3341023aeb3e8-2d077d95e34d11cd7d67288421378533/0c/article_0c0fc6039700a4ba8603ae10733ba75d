ba8fcc556a290647bc833f2b094806c3
/* istanbul ignore next */
function cov_1ychiuxuay() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/validations/article.ts";
  var hash = "3973abef067197c3848fd803503c5ec87d78a958";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/validations/article.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 34
        },
        end: {
          line: 9,
          column: 77
        }
      },
      "1": {
        start: {
          line: 12,
          column: 35
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "2": {
        start: {
          line: 22,
          column: 36
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "3": {
        start: {
          line: 49,
          column: 34
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "4": {
        start: {
          line: 73,
          column: 34
        },
        end: {
          line: 92,
          column: 2
        }
      },
      "5": {
        start: {
          line: 95,
          column: 36
        },
        end: {
          line: 101,
          column: 2
        }
      },
      "6": {
        start: {
          line: 104,
          column: 36
        },
        end: {
          line: 113,
          column: 2
        }
      },
      "7": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 169,
          column: 2
        }
      },
      "8": {
        start: {
          line: 172,
          column: 35
        },
        end: {
          line: 179,
          column: 2
        }
      },
      "9": {
        start: {
          line: 182,
          column: 35
        },
        end: {
          line: 188,
          column: 4
        }
      },
      "10": {
        start: {
          line: 191,
          column: 41
        },
        end: {
          line: 204,
          column: 2
        }
      },
      "11": {
        start: {
          line: 207,
          column: 46
        },
        end: {
          line: 218,
          column: 2
        }
      },
      "12": {
        start: {
          line: 221,
          column: 45
        },
        end: {
          line: 241,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3973abef067197c3848fd803503c5ec87d78a958"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ychiuxuay = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ychiuxuay();
import { z } from 'zod';

/**
 * Article and Content Schemas
 * Validates AI-generated content and article structures
 */

// Briefing types
export var BriefingTypeSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[0]++, z[
/* istanbul ignore next */
"enum"](['morning', 'afternoon', 'evening']));

// Article status
export var ArticleStatusSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[1]++, z[
/* istanbul ignore next */
"enum"](['draft', 'ai_generated', 'under_review', 'approved', 'published', 'archived']));

// Content quality metrics (The Terry Standard)
export var ContentQualitySchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[2]++, z.object({
  grammarScore: z.number().min(0).max(100),
  readabilityScore: z.number().min(0).max(100),
  brandVoiceScore: z.number().min(0).max(100),
  // How Terry-esque is it?
  factualAccuracy: z.number().min(0).max(100),
  engagementPotential: z.number().min(0).max(100),
  snarkLevel: z.number().min(0).max(100),
  // Weaponised irritation coefficient
  specificityScore: z.number().min(0).max(100),
  // Absurd detail density
  emotionalIntelligence: z.number().min(0).max(100),
  // Smart chaos factor
  overallScore: z.number().min(0).max(100),
  flags: z.array(z[
  /* istanbul ignore next */
  "enum"](['grammar_issues', 'readability_low', 'off_brand',
  // Not Terry enough
  'too_corporate',
  // Sounds like a press release
  'lacks_snark',
  // Insufficiently weaponised irritation
  'too_generic',
  // Needs more wet pasta and sad Babybels
  'fact_check_needed', 'inappropriate_content', 'copyright_concern'])),
  humanReviewRequired: z[
  /* istanbul ignore next */
  "boolean"]()
}));

// Image schema for articles
export var ArticleImageSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[3]++, z.object({
  id: z.string(),
  url: z.string().url(),
  altText: z.string().min(1).max(255),
  caption: z.string().optional(),
  source: z[
  /* istanbul ignore next */
  "enum"](['twitter', 'wikipedia', 'upload', 'stock']),
  sourceUrl: z.string().url().optional(),
  attribution: z.string().optional(),
  dimensions: z.object({
    width: z.number().min(1),
    height: z.number().min(1)
  }),
  fileSize: z.number().min(1),
  // bytes
  format: z[
  /* istanbul ignore next */
  "enum"](['jpg', 'jpeg', 'png', 'webp', 'gif']),
  optimizedUrls: z.object({
    thumbnail: z.string().url(),
    medium: z.string().url(),
    large: z.string().url()
  }).optional()
}));

// AI Generation metadata
export var AIGenerationSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[4]++, z.object({
  model: z.string(),
  prompt: z.string(),
  temperature: z.number().min(0).max(2),
  maxTokens: z.number().min(1),
  generatedAt: z.date(),
  processingTime: z.number().min(0),
  // milliseconds
  tokenUsage: z.object({
    promptTokens: z.number().min(0),
    completionTokens: z.number().min(0),
    totalTokens: z.number().min(0)
  }),
  qualityChecks: z.object({
    passedAllChecks: z[
    /* istanbul ignore next */
    "boolean"](),
    contentFilter: z[
    /* istanbul ignore next */
    "boolean"](),
    brandVoiceCheck: z[
    /* istanbul ignore next */
    "boolean"](),
    factualityCheck: z[
    /* istanbul ignore next */
    "boolean"](),
    grammarCheck: z[
    /* istanbul ignore next */
    "boolean"]()
  })
}));

// Source tweet reference
export var SourceTweetRefSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[5]++, z.object({
  tweetId: z.string(),
  authorHandle: z.string(),
  relevanceScore: z.number().min(0).max(1),
  usedInSections: z.array(z.string()),
  quotedDirectly: z[
  /* istanbul ignore next */
  "boolean"]()
}));

// Article section schema
export var ArticleSectionSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[6]++, z.object({
  id: z.string(),
  type: z[
  /* istanbul ignore next */
  "enum"](['intro', 'news_item', 'analysis', 'roundup', 'conclusion']),
  title: z.string().min(1).max(200).optional(),
  content: z.string().min(1),
  sourceTweets: z.array(SourceTweetRefSchema),
  images: z.array(ArticleImageSchema).optional(),
  order: z.number().min(0),
  wordCount: z.number().min(0)
}));

// Main article schema
export var ArticleSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[7]++, z.object({
  id: z.string(),
  title: z.string().min(10).max(255),
  subtitle: z.string().min(10).max(500).optional(),
  briefingType: BriefingTypeSchema,
  status: ArticleStatusSchema,
  // Content structure
  sections: z.array(ArticleSectionSchema).min(1),
  summary: z.string().min(50).max(1000),
  // Metadata
  publishedAt: z.date().optional(),
  scheduledFor: z.date().optional(),
  lastModified: z.date(),
  // AI generation details
  aiGeneration: AIGenerationSchema.optional(),
  // Quality assessment
  quality: ContentQualitySchema,
  // Source attribution
  sourceTweets: z.array(z.string()),
  // Tweet IDs
  totalSourceTweets: z.number().min(0),
  // Images
  featuredImage: ArticleImageSchema.optional(),
  // SEO and sharing
  slug: z.string().min(3).max(200).regex(/^[a-z0-9-]+$/),
  metaDescription: z.string().min(50).max(160),
  tags: z.array(z.string()).max(10),
  // Analytics
  estimatedReadTime: z.number().min(1),
  // minutes
  wordCount: z.number().min(100),
  // Editorial workflow
  reviewer: z.string().optional(),
  reviewNotes: z.string().optional(),
  approvedBy: z.string().optional(),
  approvedAt: z.date().optional(),
  // Email campaign integration
  emailSubject: z.string().min(10).max(100).optional(),
  emailPreview: z.string().min(20).max(200).optional(),
  sentToSubscribers: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](false),
  sentAt: z.date().optional()
}));

// Article creation input schema
export var CreateArticleSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[8]++, ArticleSchema.omit({
  id: true,
  lastModified: true,
  wordCount: true,
  estimatedReadTime: true
}).extend({
  autoGenerateSlug: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](true)
}));

// Article update schema
export var UpdateArticleSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[9]++, ArticleSchema.partial().omit({
  id: true
}).extend({
  lastModified: z.date()
}));

// Article query filters
export var ArticleQueryFiltersSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[10]++, z.object({
  briefingType: BriefingTypeSchema.optional(),
  status: ArticleStatusSchema.optional(),
  publishedAfter: z.date().optional(),
  publishedBefore: z.date().optional(),
  tags: z.array(z.string()).optional(),
  searchQuery: z.string().optional(),
  limit: z.number().min(1).max(100)[
  /* istanbul ignore next */
  "default"](10),
  offset: z.number().min(0)[
  /* istanbul ignore next */
  "default"](0),
  orderBy: z[
  /* istanbul ignore next */
  "enum"](['publishedAt', 'lastModified', 'title', 'quality'])[
  /* istanbul ignore next */
  "default"]('publishedAt'),
  orderDirection: z[
  /* istanbul ignore next */
  "enum"](['asc', 'desc'])[
  /* istanbul ignore next */
  "default"]('desc')
}));

// Content generation request schema
export var ContentGenerationRequestSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[11]++, z.object({
  briefingType: BriefingTypeSchema,
  sourceTweetIds: z.array(z.string()).min(1).max(50),
  targetWordCount: z.number().min(200).max(2000)[
  /* istanbul ignore next */
  "default"](800),
  tone: z[
  /* istanbul ignore next */
  "enum"](['witty', 'sarcastic', 'informative', 'humorous'])[
  /* istanbul ignore next */
  "default"]('witty'),
  includeImages: z[
  /* istanbul ignore next */
  "boolean"]()[
  /* istanbul ignore next */
  "default"](true),
  priorityTopics: z.array(z.string()).optional(),
  excludeTopics: z.array(z.string()).optional(),
  customInstructions: z.string().optional()
}));

// Content validation result schema
export var ContentValidationResultSchema =
/* istanbul ignore next */
(cov_1ychiuxuay().s[12]++, z.object({
  isValid: z[
  /* istanbul ignore next */
  "boolean"](),
  quality: ContentQualitySchema,
  recommendations: z.array(z.object({
    type: z[
    /* istanbul ignore next */
    "enum"](['grammar', 'style', 'fact_check', 'brand_voice', 'readability']),
    severity: z[
    /* istanbul ignore next */
    "enum"](['low', 'medium', 'high', 'critical']),
    message: z.string(),
    suggestion: z.string().optional(),
    affectedText: z.string().optional()
  })),
  requiresHumanReview: z[
  /* istanbul ignore next */
  "boolean"](),
  autoApprovalEligible: z[
  /* istanbul ignore next */
  "boolean"]()
}));

// Export types
//# sourceMappingURL=data:application/json;charset=utf-8;base64,