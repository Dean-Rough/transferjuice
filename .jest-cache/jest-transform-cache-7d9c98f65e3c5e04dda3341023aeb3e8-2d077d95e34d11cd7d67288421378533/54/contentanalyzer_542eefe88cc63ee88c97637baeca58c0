a00ffb2a66d837b4ef00b7272ef6a831
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SentimentAnalysisSchema = exports.EntityExtractionSchema = exports.ContentClassificationSchema = exports.ContentAnalysisSchema = exports.AIContentAnalyzer = void 0;
var _openai = _interopRequireDefault(require("openai"));
var _zod = require("zod");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * AI Content Analyzer
 * Advanced NLP processing for tweet analysis and content classification
 */ // TODO: Fix circular dependency with terry-style
// import { applyTerryStyle } from '@/lib/terry-style';
// Analysis result schemas
var EntityExtractionSchema = exports.EntityExtractionSchema = _zod.z.object({
  players: _zod.z.array(_zod.z.object({
    name: _zod.z.string(),
    confidence: _zod.z.number().min(0).max(1),
    position: _zod.z.string().optional(),
    currentClub: _zod.z.string().optional(),
    nationality: _zod.z.string().optional()
  })),
  clubs: _zod.z.array(_zod.z.object({
    name: _zod.z.string(),
    confidence: _zod.z.number().min(0).max(1),
    league: _zod.z.string().optional(),
    country: _zod.z.string().optional()
  })),
  transferDetails: _zod.z.array(_zod.z.object({
    type: _zod.z["enum"](["fee", "contract_length", "wage", "agent", "medical_date"]),
    value: _zod.z.string(),
    confidence: _zod.z.number().min(0).max(1)
  })),
  agents: _zod.z.array(_zod.z.object({
    name: _zod.z.string().optional(),
    company: _zod.z.string().optional(),
    confidence: _zod.z.number().min(0).max(1)
  }))
});
var SentimentAnalysisSchema = exports.SentimentAnalysisSchema = _zod.z.object({
  sentiment: _zod.z["enum"](["positive", "negative", "neutral"]),
  confidence: _zod.z.number().min(0).max(1),
  emotions: _zod.z.array(_zod.z["enum"](["excitement", "disappointment", "skepticism", "optimism", "anxiety"])),
  reliability: _zod.z.number().min(0).max(1),
  // How reliable the source seems
  urgency: _zod.z.number().min(0).max(1) // How urgent/breaking the news is
});
var ContentClassificationSchema = exports.ContentClassificationSchema = _zod.z.object({
  isTransferRelated: _zod.z["boolean"](),
  transferType: _zod.z["enum"](["RUMOUR", "TALKS", "ADVANCED", "MEDICAL", "CONFIRMED", "OFFICIAL"]).optional(),
  priority: _zod.z["enum"](["LOW", "MEDIUM", "HIGH", "URGENT"]),
  confidence: _zod.z.number().min(0).max(1),
  categories: _zod.z.array(_zod.z["enum"](["signing", "departure", "contract_extension", "loan", "medical", "negotiation", "rumour", "denial", "agent_talk", "fee_discussion"])),
  keyPoints: _zod.z.array(_zod.z.string()),
  duplicateOf: _zod.z.string().optional() // ID of original tweet if this is duplicate
});
var ContentAnalysisSchema = exports.ContentAnalysisSchema = _zod.z.object({
  tweetId: _zod.z.string().optional(),
  // Add optional tweetId for image placement
  classification: ContentClassificationSchema,
  entities: EntityExtractionSchema,
  sentiment: SentimentAnalysisSchema,
  qualityScore: _zod.z.number().min(0).max(100),
  terryCompatibility: _zod.z.number().min(0).max(100),
  // How well it fits Terry's style
  processingTime: _zod.z.number(),
  aiModel: _zod.z.string()
});
var AIContentAnalyzer = exports.AIContentAnalyzer = /*#__PURE__*/function () {
  function AIContentAnalyzer(config) {
    _classCallCheck(this, AIContentAnalyzer);
    _defineProperty(this, "cache", new Map());
    this.config = _objectSpread({
      model: "gpt-4.1",
      maxTokens: 1500,
      temperature: 0.3,
      enableCaching: true
    }, config);
    this.openai = new _openai["default"]({
      apiKey: this.config.openaiApiKey
    });
  }

  /**
   * Perform comprehensive analysis of tweet content
   */
  return _createClass(AIContentAnalyzer, [{
    key: "analyzeTweet",
    value: (function () {
      var _analyzeTweet = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(input) {
        var startTime, cacheKey, cached, _yield$Promise$all, _yield$Promise$all2, classification, entities, sentiment, qualityScore, terryCompatibility, analysis, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              startTime = Date.now(); // Check cache first
              cacheKey = this.generateCacheKey(input);
              if (!(this.config.enableCaching && this.cache.has(cacheKey))) {
                _context.n = 1;
                break;
              }
              cached = this.cache.get(cacheKey);
              return _context.a(2, _objectSpread(_objectSpread({}, cached), {}, {
                processingTime: Date.now() - startTime
              }));
            case 1:
              _context.p = 1;
              _context.n = 2;
              return Promise.all([this.classifyContent(input), this.extractEntities(input), this.analyzeSentiment(input)]);
            case 2:
              _yield$Promise$all = _context.v;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
              classification = _yield$Promise$all2[0];
              entities = _yield$Promise$all2[1];
              sentiment = _yield$Promise$all2[2];
              // Calculate quality scores
              qualityScore = this.calculateQualityScore(classification, entities, sentiment, input);
              terryCompatibility = this.calculateTerryCompatibility(input, sentiment, entities);
              analysis = {
                classification: classification,
                entities: entities,
                sentiment: sentiment,
                qualityScore: qualityScore,
                terryCompatibility: terryCompatibility,
                processingTime: Date.now() - startTime,
                aiModel: this.config.model
              }; // Cache the result
              if (this.config.enableCaching) {
                this.cache.set(cacheKey, analysis);
              }
              return _context.a(2, analysis);
            case 3:
              _context.p = 3;
              _t = _context.v;
              throw new Error("AI analysis failed for tweet ".concat(input.id, ": ").concat(_t instanceof Error ? _t.message : "Unknown error"));
            case 4:
              return _context.a(2);
          }
        }, _callee, this, [[1, 3]]);
      }));
      function analyzeTweet(_x) {
        return _analyzeTweet.apply(this, arguments);
      }
      return analyzeTweet;
    }()
    /**
     * Classify tweet content using AI
     */
    )
  }, {
    key: "classifyContent",
    value: (function () {
      var _classifyContent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(input) {
        var _response$choices$;
        var prompt, response, content, parsed, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              prompt = this.buildClassificationPrompt(input);
              _context2.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "You are an expert football transfer journalist and content classifier. Analyze tweets for transfer relevance with high accuracy.\n\nYour task is to classify the following tweet and return a JSON response with these exact fields:\n- isTransferRelated: boolean\n- transferType: \"RUMOUR\" | \"TALKS\" | \"ADVANCED\" | \"MEDICAL\" | \"CONFIRMED\" | \"OFFICIAL\" (only if transfer related)\n- priority: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"URGENT\"  \n- confidence: number between 0 and 1\n- categories: array of relevant categories from [\"signing\", \"departure\", \"contract_extension\", \"loan\", \"medical\", \"negotiation\", \"rumour\", \"denial\", \"agent_talk\", \"fee_discussion\"]\n- keyPoints: array of key information points (max 5)\n- duplicateOf: optional tweet ID if this appears to be duplicate content\n\nFocus on transfer-related content only. Non-transfer football content should be classified as not transfer related."
                }, {
                  role: "user",
                  content: prompt
                }],
                max_tokens: this.config.maxTokens,
                temperature: this.config.temperature,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context2.v;
              content = (_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 || (_response$choices$ = _response$choices$.message) === null || _response$choices$ === void 0 ? void 0 : _response$choices$.content;
              if (content) {
                _context2.n = 2;
                break;
              }
              throw new Error("No response from AI classification");
            case 2:
              _context2.p = 2;
              parsed = JSON.parse(content);
              return _context2.a(2, ContentClassificationSchema.parse(parsed));
            case 3:
              _context2.p = 3;
              _t2 = _context2.v;
              throw new Error("Invalid AI classification response: ".concat(_t2 instanceof Error ? _t2.message : "Parse error"));
            case 4:
              return _context2.a(2);
          }
        }, _callee2, this, [[2, 3]]);
      }));
      function classifyContent(_x2) {
        return _classifyContent.apply(this, arguments);
      }
      return classifyContent;
    }()
    /**
     * Extract entities using AI
     */
    )
  }, {
    key: "extractEntities",
    value: (function () {
      var _extractEntities = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(input) {
        var _response$choices$2;
        var prompt, response, content, parsed, _t3;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              prompt = this.buildEntityExtractionPrompt(input);
              _context3.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "You are an expert in football knowledge and named entity recognition. Extract all football-related entities from tweets.\n\nReturn a JSON response with these exact fields:\n- players: array of {name, confidence, position?, currentClub?, nationality?}\n- clubs: array of {name, confidence, league?, country?}\n- transferDetails: array of {type, value, confidence} where type is one of: \"fee\", \"contract_length\", \"wage\", \"agent\", \"medical_date\"\n- agents: array of {name?, company?, confidence}\n\nBe precise with confidence scores (0-1). Only include entities you're confident about."
                }, {
                  role: "user",
                  content: prompt
                }],
                max_tokens: this.config.maxTokens,
                temperature: this.config.temperature,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context3.v;
              content = (_response$choices$2 = response.choices[0]) === null || _response$choices$2 === void 0 || (_response$choices$2 = _response$choices$2.message) === null || _response$choices$2 === void 0 ? void 0 : _response$choices$2.content;
              if (content) {
                _context3.n = 2;
                break;
              }
              throw new Error("No response from AI entity extraction");
            case 2:
              _context3.p = 2;
              parsed = JSON.parse(content);
              return _context3.a(2, EntityExtractionSchema.parse(parsed));
            case 3:
              _context3.p = 3;
              _t3 = _context3.v;
              throw new Error("Invalid AI entity extraction response: ".concat(_t3 instanceof Error ? _t3.message : "Parse error"));
            case 4:
              return _context3.a(2);
          }
        }, _callee3, this, [[2, 3]]);
      }));
      function extractEntities(_x3) {
        return _extractEntities.apply(this, arguments);
      }
      return extractEntities;
    }()
    /**
     * Analyze sentiment and reliability
     */
    )
  }, {
    key: "analyzeSentiment",
    value: (function () {
      var _analyzeSentiment = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(input) {
        var _response$choices$3;
        var prompt, response, content, parsed, _t4;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              prompt = this.buildSentimentPrompt(input);
              _context4.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "You are a sentiment analysis expert specializing in football transfer news. Analyze the sentiment, reliability, and urgency of transfer-related content.\n\nReturn a JSON response with these exact fields:\n- sentiment: \"positive\" | \"negative\" | \"neutral\"\n- confidence: number between 0 and 1\n- emotions: array of emotions from [\"excitement\", \"disappointment\", \"skepticism\", \"optimism\", \"anxiety\"]\n- reliability: number between 0 and 1 (how reliable/credible the source seems)\n- urgency: number between 0 and 1 (how urgent/breaking the news appears)\n\nConsider the author's tier, verification status, and language used when assessing reliability."
                }, {
                  role: "user",
                  content: prompt
                }],
                max_tokens: this.config.maxTokens,
                temperature: this.config.temperature,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context4.v;
              content = (_response$choices$3 = response.choices[0]) === null || _response$choices$3 === void 0 || (_response$choices$3 = _response$choices$3.message) === null || _response$choices$3 === void 0 ? void 0 : _response$choices$3.content;
              if (content) {
                _context4.n = 2;
                break;
              }
              throw new Error("No response from AI sentiment analysis");
            case 2:
              _context4.p = 2;
              parsed = JSON.parse(content);
              return _context4.a(2, SentimentAnalysisSchema.parse(parsed));
            case 3:
              _context4.p = 3;
              _t4 = _context4.v;
              throw new Error("Invalid AI sentiment analysis response: ".concat(_t4 instanceof Error ? _t4.message : "Parse error"));
            case 4:
              return _context4.a(2);
          }
        }, _callee4, this, [[2, 3]]);
      }));
      function analyzeSentiment(_x4) {
        return _analyzeSentiment.apply(this, arguments);
      }
      return analyzeSentiment;
    }()
    /**
     * Build classification prompt
     */
    )
  }, {
    key: "buildClassificationPrompt",
    value: function buildClassificationPrompt(input) {
      var _input$context, _input$context2;
      return "\nTweet Analysis Request:\n\nContent: \"".concat(input.text, "\"\nAuthor: @").concat(input.authorHandle, " (").concat(input.authorName, ")\nVerified: ").concat(input.authorVerified, "\nSource Tier: ").concat(input.authorTier, "\nEngagement: ").concat(input.metrics.retweets, " RTs, ").concat(input.metrics.likes, " likes, ").concat(input.metrics.replies, " replies\nPosted: ").concat(input.createdAt.toISOString(), "\n\nContext:\n").concat((_input$context = input.context) !== null && _input$context !== void 0 && _input$context.authorSpecialties ? "Author specializes in: ".concat(input.context.authorSpecialties.join(", ")) : "", "\n").concat((_input$context2 = input.context) !== null && _input$context2 !== void 0 && _input$context2.recentTweets ? "Recent tweets: ".concat(input.context.recentTweets.join(" | ")) : "", "\n\nPlease classify this tweet for transfer relevance and provide detailed analysis.\n    ").trim();
    }

    /**
     * Build entity extraction prompt
     */
  }, {
    key: "buildEntityExtractionPrompt",
    value: function buildEntityExtractionPrompt(input) {
      return "\nExtract Football Entities:\n\nTweet: \"".concat(input.text, "\"\nAuthor: @").concat(input.authorHandle, " (").concat(input.authorTier, " source)\n\nPlease extract all football-related entities including players, clubs, transfer details, and agents.\nBe specific about confidence levels and include relevant metadata where available.\n    ").trim();
    }

    /**
     * Build sentiment analysis prompt
     */
  }, {
    key: "buildSentimentPrompt",
    value: function buildSentimentPrompt(input) {
      return "\nSentiment Analysis Request:\n\nTweet: \"".concat(input.text, "\"\nAuthor: @").concat(input.authorHandle, " (").concat(input.authorName, ")\nVerified: ").concat(input.authorVerified, ", Tier: ").concat(input.authorTier, "\nEngagement: ").concat(input.metrics.likes, " likes, ").concat(input.metrics.retweets, " retweets\n\nAnalyze the sentiment, perceived reliability, and urgency of this transfer-related content.\nConsider the author's credibility and the language used.\n    ").trim();
    }

    /**
     * Calculate overall quality score
     */
  }, {
    key: "calculateQualityScore",
    value: function calculateQualityScore(classification, entities, sentiment, input) {
      var score = 0;

      // Base score from classification confidence
      score += classification.confidence * 30;

      // Entity quality (specific players/clubs mentioned)
      var entityCount = entities.players.length + entities.clubs.length;
      score += Math.min(entityCount * 5, 20);

      // Source reliability
      switch (input.authorTier) {
        case "tier1":
          score += 25;
          break;
        case "tier2":
          score += 15;
          break;
        case "tier3":
          score += 5;
          break;
      }

      // Verification bonus
      if (input.authorVerified) score += 10;

      // Sentiment reliability
      score += sentiment.reliability * 15;
      return Math.min(Math.round(score), 100);
    }

    /**
     * Calculate Terry compatibility score
     */
  }, {
    key: "calculateTerryCompatibility",
    value: function calculateTerryCompatibility(input, sentiment, entities) {
      var score = 0;

      // Emotional content (Terry loves drama)
      if (sentiment.emotions.includes("excitement")) score += 20;
      if (sentiment.emotions.includes("skepticism")) score += 25;
      if (sentiment.emotions.includes("anxiety")) score += 15;

      // Specific details (Terry loves specificity)
      score += entities.transferDetails.length * 10;

      // Big fees (Terry loves financial absurdity)
      var hasBigFee = entities.transferDetails.some(function (detail) {
        return detail.type === "fee" && /\d{3}/.test(detail.value);
      });
      if (hasBigFee) score += 20;

      // Chaos potential
      if (input.text.toLowerCase().includes("chaos")) score += 10;
      if (input.text.toLowerCase().includes("mental")) score += 15;
      return Math.min(Math.round(score), 100);
    }

    /**
     * Generate cache key for analysis
     */
  }, {
    key: "generateCacheKey",
    value: function generateCacheKey(input) {
      return "".concat(input.id, "_").concat(input.text.length, "_").concat(input.authorHandle);
    }

    /**
     * Clear analysis cache
     */
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.cache.clear();
    }

    /**
     * Get cache statistics
     */
  }, {
    key: "getCacheStats",
    value: function getCacheStats() {
      return {
        size: this.cache.size,
        hitRate: 0 // Would track this with proper metrics
      };
    }

    /**
     * Validate API configuration
     */
  }, {
    key: "validateConfiguration",
    value: (function () {
      var _validateConfiguration = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
        var response, _t5;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              _context5.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "user",
                  content: "Test connection"
                }],
                max_tokens: 10
              });
            case 1:
              response = _context5.v;
              return _context5.a(2, {
                valid: true
              });
            case 2:
              _context5.p = 2;
              _t5 = _context5.v;
              return _context5.a(2, {
                valid: false,
                error: "OpenAI API validation failed: ".concat(_t5 instanceof Error ? _t5.message : "Unknown error")
              });
          }
        }, _callee5, this, [[0, 2]]);
      }));
      function validateConfiguration() {
        return _validateConfiguration.apply(this, arguments);
      }
      return validateConfiguration;
    }())
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,