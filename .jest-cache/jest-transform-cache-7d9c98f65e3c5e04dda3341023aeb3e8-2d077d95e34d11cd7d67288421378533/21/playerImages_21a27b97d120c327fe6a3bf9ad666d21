66f11b61eaeb22ce3fa7e53166398c90
/* istanbul ignore next */
function cov_17mts1b423() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/wikipedia/playerImages.ts";
  var hash = "daf5f09fc370a8664a58535216b492c6001e7648";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/wikipedia/playerImages.ts",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 50
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "1": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 43,
          column: 40
        }
      },
      "2": {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 51,
          column: 17
        }
      },
      "3": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "4": {
        start: {
          line: 67,
          column: 2
        },
        end: {
          line: 67,
          column: 61
        }
      },
      "5": {
        start: {
          line: 67,
          column: 40
        },
        end: {
          line: 67,
          column: 59
        }
      }
    },
    fnMap: {
      "0": {
        name: "getPlayerImage",
        decl: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 16,
            column: 36
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "searchWikipediaPlayer",
        decl: {
          start: {
            line: 49,
            column: 22
          },
          end: {
            line: 49,
            column: 43
          }
        },
        loc: {
          start: {
            line: 49,
            column: 78
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 49
      },
      "2": {
        name: "isAcceptableLicense",
        decl: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 35
          }
        },
        loc: {
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 67,
            column: 33
          },
          end: {
            line: 67,
            column: 34
          }
        },
        loc: {
          start: {
            line: 67,
            column: 40
          },
          end: {
            line: 67,
            column: 59
          }
        },
        line: 67
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 31
          }
        }, {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 43,
            column: 39
          }
        }],
        line: 43
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "daf5f09fc370a8664a58535216b492c6001e7648"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_17mts1b423 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_17mts1b423();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Wikipedia Player Image Service
 * Fetches player images from Wikipedia Commons
 */

/**
 * Get player image from Wikipedia
 */
export
/* istanbul ignore next */
function getPlayerImage(_x) {
  return _getPlayerImage.apply(this, arguments);
}

/**
 * Search for player on Wikipedia
 */
/* istanbul ignore next */
function _getPlayerImage() {
  _getPlayerImage = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(playerName)
  /* istanbul ignore next */
  {
    var mockImages;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_17mts1b423().f[0]++;
          // For now, return mock data
          // In production, this would query Wikipedia API
          mockImages = (cov_17mts1b423().s[0]++, {
            "Erling Haaland": {
              url: "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Erling_Haaland_2023.jpg/440px-Erling_Haaland_2023.jpg",
              wikipediaUrl: "https://en.wikipedia.org/wiki/Erling_Haaland",
              license: "CC BY-SA 4.0",
              attribution: "Via Wikipedia Commons"
            },
            "Kylian MbappÃ©": {
              url: "https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/2019-07-17_SG_Dynamo_Dresden_vs._Paris_Saint-Germain_by_Sandro_Halank%E2%80%93129.jpg/440px-2019-07-17_SG_Dynamo_Dresden_vs._Paris_Saint-Germain_by_Sandro_Halank%E2%80%93129.jpg",
              wikipediaUrl: "https://en.wikipedia.org/wiki/Kylian_Mbapp%C3%A9",
              license: "CC BY-SA 4.0",
              attribution: "Via Wikipedia Commons"
            },
            "Jude Bellingham": {
              url: "https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Jude_Bellingham_2023.jpg/440px-Jude_Bellingham_2023.jpg",
              wikipediaUrl: "https://en.wikipedia.org/wiki/Jude_Bellingham",
              license: "CC BY-SA 4.0",
              attribution: "Via Wikipedia Commons"
            }
          });
          cov_17mts1b423().s[1]++;
          return _context.a(2,
          /* istanbul ignore next */
          (cov_17mts1b423().b[0][0]++, mockImages[playerName]) ||
          /* istanbul ignore next */
          (cov_17mts1b423().b[0][1]++, null));
      }
    }, _callee);
  }));
  return _getPlayerImage.apply(this, arguments);
}
export
/* istanbul ignore next */
function searchWikipediaPlayer(_x2) {
  return _searchWikipediaPlayer.apply(this, arguments);
}

/**
 * Validate image license is acceptable
 */
/* istanbul ignore next */
function _searchWikipediaPlayer() {
  _searchWikipediaPlayer = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(query)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_17mts1b423().f[1]++;
          cov_17mts1b423().s[2]++;
          return _context2.a(2, [query]);
      }
    }, _callee2);
  }));
  return _searchWikipediaPlayer.apply(this, arguments);
}
export function isAcceptableLicense(license) {
  /* istanbul ignore next */
  cov_17mts1b423().f[2]++;
  var acceptableLicenses =
  /* istanbul ignore next */
  (cov_17mts1b423().s[3]++, ["CC BY-SA 4.0", "CC BY-SA 3.0", "CC BY 4.0", "CC BY 3.0", "CC0", "Public Domain"]);
  /* istanbul ignore next */
  cov_17mts1b423().s[4]++;
  return acceptableLicenses.some(function (l) {
    /* istanbul ignore next */
    cov_17mts1b423().f[3]++;
    cov_17mts1b423().s[5]++;
    return license.includes(l);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,