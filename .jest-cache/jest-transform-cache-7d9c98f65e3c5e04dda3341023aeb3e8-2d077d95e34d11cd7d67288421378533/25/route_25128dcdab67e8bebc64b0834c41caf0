0de8d876471cfc2f02d01b9d6755998a
/* istanbul ignore next */
function cov_nbo1tvwz0() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/[timestamp]/related/route.ts";
  var hash = "4d80041260abc2353f145609a70982d79265da8d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/briefings/[timestamp]/related/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "1": {
        start: {
          line: 14,
          column: 33
        },
        end: {
          line: 106,
          column: 1
        }
      },
      "2": {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 15,
          column: 74
        }
      },
      "3": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 58
        }
      },
      "4": {
        start: {
          line: 18,
          column: 39
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "5": {
        start: {
          line: 21,
          column: 18
        },
        end: {
          line: 21,
          column: 32
        }
      },
      "6": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "7": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "8": {
        start: {
          line: 28,
          column: 22
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "9": {
        start: {
          line: 36,
          column: 19
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "10": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 52
        }
      },
      "11": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 102,
          column: 7
        }
      },
      "12": {
        start: {
          line: 105,
          column: 2
        },
        end: {
          line: 105,
          column: 26
        }
      },
      "13": {
        start: {
          line: 112,
          column: 2
        },
        end: {
          line: 215,
          column: 3
        }
      },
      "14": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 70
        }
      },
      "15": {
        start: {
          line: 191,
          column: 22
        },
        end: {
          line: 191,
          column: 66
        }
      },
      "16": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 201,
          column: 6
        }
      },
      "17": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 208,
          column: 5
        }
      },
      "18": {
        start: {
          line: 204,
          column: 6
        },
        end: {
          line: 207,
          column: 8
        }
      },
      "19": {
        start: {
          line: 210,
          column: 4
        },
        end: {
          line: 210,
          column: 62
        }
      },
      "20": {
        start: {
          line: 211,
          column: 4
        },
        end: {
          line: 214,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 33
          },
          end: {
            line: 14,
            column: 34
          }
        },
        loc: {
          start: {
            line: 14,
            column: 75
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 19
          }
        },
        loc: {
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 103,
            column: 3
          }
        },
        line: 23
      },
      "2": {
        name: "GET",
        decl: {
          start: {
            line: 108,
            column: 22
          },
          end: {
            line: 108,
            column: 25
          }
        },
        loc: {
          start: {
            line: 111,
            column: 2
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 111
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d80041260abc2353f145609a70982d79265da8d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nbo1tvwz0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nbo1tvwz0();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import { NextResponse } from "next/server";
import { z } from "zod";
// Timestamp validation schema
var timestampSchema =
/* istanbul ignore next */
(cov_nbo1tvwz0().s[0]++, z.string().regex(/^\d{4}-\d{2}-\d{2}-\d{2}$/, "Timestamp must be in format YYYY-MM-DD-HH"));

// Generate mock related briefings
/* istanbul ignore next */
cov_nbo1tvwz0().s[1]++;
var generateRelatedBriefings = function generateRelatedBriefings(currentTimestamp) {
  /* istanbul ignore next */
  cov_nbo1tvwz0().f[0]++;
  var
    /* istanbul ignore next */
    _ref = (cov_nbo1tvwz0().s[2]++, currentTimestamp.split("-").map(Number)),
    /* istanbul ignore next */
    _ref2 = _slicedToArray(_ref, 4),
    /* istanbul ignore next */
    year = _ref2[0],
    /* istanbul ignore next */
    month = _ref2[1],
    /* istanbul ignore next */
    day = _ref2[2],
    /* istanbul ignore next */
    hour = _ref2[3];
  var currentDate =
  /* istanbul ignore next */
  (cov_nbo1tvwz0().s[3]++, new Date(year, month - 1, day, hour));
  var relatedBriefings =
  /* istanbul ignore next */
  (cov_nbo1tvwz0().s[4]++, []);

  // Generate 2 previous and 2 next briefings for navigation
  var offsets =
  /* istanbul ignore next */
  (cov_nbo1tvwz0().s[5]++, [-2, -1, 1, 2]);
  /* istanbul ignore next */
  cov_nbo1tvwz0().s[6]++;
  offsets.forEach(function (offset, index) {
    /* istanbul ignore next */
    cov_nbo1tvwz0().f[1]++;
    var relatedDate =
    /* istanbul ignore next */
    (cov_nbo1tvwz0().s[7]++, new Date(currentDate.getTime() + offset * 60 * 60 * 1000));
    var timestamp =
    /* istanbul ignore next */
    (cov_nbo1tvwz0().s[8]++, [relatedDate.getFullYear(), String(relatedDate.getMonth() + 1).padStart(2, "0"), String(relatedDate.getDate()).padStart(2, "0"), String(relatedDate.getHours()).padStart(2, "0")].join("-"));

    // Vary titles based on position
    var titles =
    /* istanbul ignore next */
    (cov_nbo1tvwz0().s[9]++, ["Barcelona's Director of Football Caught Using FIFA Career Mode for Transfers", "Bayern Munich's New Strategy: Only Sign Players Named Thomas", "PSG Considering Bid for the Moon to Improve Atmosphere at Parc des Princes", "Inter Milan's Scouting Network Revealed to be One Guy with Twitter"]);
    var funnyTitle =
    /* istanbul ignore next */
    (cov_nbo1tvwz0().s[10]++, titles[index % titles.length]);
    /* istanbul ignore next */
    cov_nbo1tvwz0().s[11]++;
    relatedBriefings.push({
      id:
      /* istanbul ignore next */
      "briefing-".concat(timestamp),
      slug: timestamp,
      timestamp: relatedDate,
      title: {
        day: relatedDate.toLocaleDateString("en-US", {
          weekday: "long"
        }),
        hour:
        /* istanbul ignore next */
        "".concat(relatedDate.getHours(), ":00"),
        month: relatedDate.toLocaleDateString("en-US", {
          month: "short"
        }),
        year: String(relatedDate.getFullYear()),
        funny: funnyTitle,
        full:
        /* istanbul ignore next */
        "".concat(relatedDate.toLocaleDateString("en-US", {
          weekday: "long"
        }), " ").concat(relatedDate.getHours(), ":00 Briefing ").concat(relatedDate.toLocaleDateString("en-US", {
          month: "short"
        }), " ").concat(relatedDate.getFullYear(), " - ").concat(funnyTitle)
      },
      summary: "More transfer chaos and football absurdity from The Terry.",
      metaDescription: "The Terry's take on football's latest transfer nonsense.",
      sections: [],
      // Not needed for related briefings
      polaroids: [],
      tags: {
        clubs: ["Barcelona", "Bayern Munich", "PSG", "Inter Milan"],
        players: ["Various Players"],
        leagues: ["La Liga", "Bundesliga", "Ligue 1", "Serie A"],
        sources: ["Various Sources"]
      },
      metadata: {
        estimatedReadTime: 5,
        wordCount: 1200,
        terryScore: 88,
        shareCount: {
          twitter: 0,
          facebook: 0,
          whatsapp: 0,
          email: 0
        },
        viewCount: 0
      },
      sharing: {
        url:
        /* istanbul ignore next */
        "https://transferjuice.com/briefings/".concat(timestamp),
        shortUrl:
        /* istanbul ignore next */
        "https://tjuice.co/b/".concat(timestamp),
        title: funnyTitle,
        description: "The Terry's latest briefing",
        shareCount: {
          twitter: 0,
          facebook: 0,
          whatsapp: 0,
          email: 0
        }
      },
      openGraph: {
        title:
        /* istanbul ignore next */
        "".concat(funnyTitle, " - Transfer Juice"),
        description: "The Terry's latest briefing",
        image: "https://transferjuice.com/og/briefing-default.jpg",
        url:
        /* istanbul ignore next */
        "https://transferjuice.com/briefings/".concat(timestamp)
      },
      status: "published",
      publishedAt: relatedDate,
      createdAt: relatedDate,
      updatedAt: relatedDate
    });
  });
  /* istanbul ignore next */
  cov_nbo1tvwz0().s[12]++;
  return relatedBriefings;
};
export
/* istanbul ignore next */
function GET(_x, _x2) {
  return _GET.apply(this, arguments);
}
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request,
  /* istanbul ignore next */
  _ref3)
  /* istanbul ignore next */
  {
    var params, validatedTimestamp, briefings, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          params = _ref3.params;
          cov_nbo1tvwz0().f[2]++;
          cov_nbo1tvwz0().s[13]++;
          _context.p = 1;
          // Validate timestamp format
          validatedTimestamp = (cov_nbo1tvwz0().s[14]++, timestampSchema.parse(params.timestamp)); // TODO: Replace with actual database query
          // First, get the current briefing to find its tags
          // const currentBriefing = await prisma.briefing.findUnique({
          //   where: { slug: validatedTimestamp },
          //   select: {
          //     id: true,
          //     tags: true,
          //     publishedAt: true,
          //   },
          // });
          // if (!currentBriefing) {
          //   return NextResponse.json(
          //     { error: 'Briefing not found' },
          //     { status: 404 }
          //   );
          // }
          // Find related briefings based on:
          // 1. Same-day briefings (temporal proximity)
          // 2. Similar tags (content similarity)
          // 3. Exclude the current briefing
          // const relatedBriefings = await prisma.briefing.findMany({
          //   where: {
          //     id: { not: currentBriefing.id },
          //     status: 'published',
          //     OR: [
          //       // Same day briefings
          //       {
          //         publishedAt: {
          //           gte: startOfDay(currentBriefing.publishedAt),
          //           lte: endOfDay(currentBriefing.publishedAt),
          //         },
          //       },
          //       // Similar tags
          //       {
          //         tags: {
          //           clubs: {
          //             hasSome: currentBriefing.tags.clubs,
          //           },
          //         },
          //       },
          //       {
          //         tags: {
          //           players: {
          //             hasSome: currentBriefing.tags.players,
          //           },
          //         },
          //       },
          //     ],
          //   },
          //   orderBy: [
          //     // Prioritize temporal proximity
          //     {
          //       publishedAt: 'desc',
          //     },
          //   ],
          //   take: 5,
          //   select: {
          //     id: true,
          //     slug: true,
          //     timestamp: true,
          //     title: true,
          //     summary: true,
          //     tags: true,
          //     metadata: {
          //       select: {
          //         estimatedReadTime: true,
          //         terryScore: true,
          //       },
          //     },
          //   },
          // });
          briefings = (cov_nbo1tvwz0().s[15]++, generateRelatedBriefings(validatedTimestamp));
          cov_nbo1tvwz0().s[16]++;
          return _context.a(2, NextResponse.json({
            briefings: briefings
          }, {
            status: 200,
            headers: {
              "Cache-Control": "public, s-maxage=600, stale-while-revalidate=1200"
            }
          }));
        case 2:
          _context.p = 2;
          _t = _context.v;
          cov_nbo1tvwz0().s[17]++;
          if (!(
          /* istanbul ignore next */
          _t instanceof z.ZodError)) {
            _context.n = 3;
            break;
          }
          cov_nbo1tvwz0().b[0][0]++;
          cov_nbo1tvwz0().s[18]++;
          return _context.a(2, NextResponse.json({
            error: "Invalid timestamp format. Use YYYY-MM-DD-HH"
          }, {
            status: 400
          }));
        case 3:
          cov_nbo1tvwz0().b[0][1]++;
        case 4:
          cov_nbo1tvwz0().s[19]++;
          console.error("Error fetching related briefings:",
          /* istanbul ignore next */
          _t);
          cov_nbo1tvwz0().s[20]++;
          return _context.a(2, NextResponse.json({
            error: "Internal server error"
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 2]]);
  }));
  return _GET.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,