{"version":3,"names":["cov_1ao10e9hqs","actualCoverage","_regenerator","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","_toPrimitive","_typeof","toPrimitive","String","Number","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","createHash","verifyApiAuth","_x","_x2","_verifyApiAuth","_callee","request","requiredPermission","_request$cookies$get","apiKey","authHeader","token","sessionId","_t","_context","s","headers","get","b","verifyApiKey","startsWith","substring","verifyBearerToken","cookies","verifySession","authenticated","error","console","_x3","_x4","_verifyApiKey","_callee2","hashedKey","validKeys","apiKeyRecord","_t2","_context2","hashApiKey","process","env","BRIEFING_GENERATION_API_KEY","id","name","permissions","createdAt","Date","expiresAt","includes","userId","concat","_x5","_x6","_verifyBearerToken","_callee3","validToken","_t3","_context3","BRIEFING_GENERATION_TOKEN","_x7","_x8","_verifySession","_callee4","_t4","_context4","update","digest","generateApiKey","chars","segments","segmentLength","segments_array","segment","j","charAt","Math","floor","random","push","join","ApiRateLimiter","windowMs","undefined","maxRequests","Map","isRateLimited","identifier","_this","now","requests","validRequests","filter","timestamp","set","getRateLimitHeaders","_this2","remaining","max","resetTime","toString","toISOString","apiRateLimiter","parseInt","API_RATE_LIMIT_WINDOW","API_RATE_LIMIT_MAX"],"sources":["apiAuth.ts"],"sourcesContent":["/**\n * API Authentication System\n * Handles authentication for protected API endpoints\n */\n\nimport { NextRequest } from \"next/server\";\nimport { createHash } from \"crypto\";\n\nexport interface ApiAuthResult {\n  authenticated: boolean;\n  userId?: string;\n  error?: string;\n}\n\nexport interface ApiKey {\n  id: string;\n  key: string;\n  name: string;\n  permissions: string[];\n  createdAt: Date;\n  lastUsedAt?: Date;\n  expiresAt?: Date;\n}\n\n/**\n * Verify API authentication from request\n */\nexport async function verifyApiAuth(\n  request: NextRequest,\n  requiredPermission?: string\n): Promise<ApiAuthResult> {\n  try {\n    // Check for API key in header\n    const apiKey = request.headers.get(\"X-API-Key\");\n    if (apiKey) {\n      return verifyApiKey(apiKey, requiredPermission);\n    }\n\n    // Check for Bearer token\n    const authHeader = request.headers.get(\"Authorization\");\n    if (authHeader && authHeader.startsWith(\"Bearer \")) {\n      const token = authHeader.substring(7);\n      return verifyBearerToken(token, requiredPermission);\n    }\n\n    // Check for session (for admin UI)\n    const sessionId = request.cookies.get(\"session\")?.value;\n    if (sessionId) {\n      return verifySession(sessionId, requiredPermission);\n    }\n\n    return {\n      authenticated: false,\n      error: \"No authentication credentials provided\",\n    };\n  } catch (error) {\n    console.error(\"API authentication error:\", error);\n    return {\n      authenticated: false,\n      error: \"Authentication failed\",\n    };\n  }\n}\n\n/**\n * Verify API key authentication\n */\nasync function verifyApiKey(\n  key: string,\n  requiredPermission?: string\n): Promise<ApiAuthResult> {\n  try {\n    // Hash the key for comparison (keys are stored hashed)\n    const hashedKey = hashApiKey(key);\n\n    // TODO: Replace with database lookup\n    // const apiKeyRecord = await prisma.apiKey.findUnique({\n    //   where: { hashedKey },\n    // });\n\n    // Mock implementation for now\n    const validKeys: Record<string, ApiKey> = {\n      [process.env.BRIEFING_GENERATION_API_KEY || \"test-key\"]: {\n        id: \"key-1\",\n        key: process.env.BRIEFING_GENERATION_API_KEY || \"test-key\",\n        name: \"Briefing Generation Key\",\n        permissions: [\"briefing.generate\", \"briefing.read\"],\n        createdAt: new Date(),\n      },\n    };\n\n    const apiKeyRecord = validKeys[key];\n\n    if (!apiKeyRecord) {\n      return {\n        authenticated: false,\n        error: \"Invalid API key\",\n      };\n    }\n\n    // Check if key is expired\n    if (apiKeyRecord.expiresAt && new Date() > apiKeyRecord.expiresAt) {\n      return {\n        authenticated: false,\n        error: \"API key expired\",\n      };\n    }\n\n    // Check permissions\n    if (\n      requiredPermission &&\n      !apiKeyRecord.permissions.includes(requiredPermission)\n    ) {\n      return {\n        authenticated: false,\n        error: \"Insufficient permissions\",\n      };\n    }\n\n    // Update last used timestamp\n    // TODO: Update in database\n    // await prisma.apiKey.update({\n    //   where: { id: apiKeyRecord.id },\n    //   data: { lastUsedAt: new Date() },\n    // });\n\n    return {\n      authenticated: true,\n      userId: `api-key-${apiKeyRecord.id}`,\n    };\n  } catch (error) {\n    console.error(\"API key verification error:\", error);\n    return {\n      authenticated: false,\n      error: \"API key verification failed\",\n    };\n  }\n}\n\n/**\n * Verify Bearer token authentication\n */\nasync function verifyBearerToken(\n  token: string,\n  requiredPermission?: string\n): Promise<ApiAuthResult> {\n  try {\n    // TODO: Implement JWT verification or external auth service\n    // For now, check against environment variable\n    const validToken = process.env.BRIEFING_GENERATION_TOKEN;\n\n    if (!validToken || token !== validToken) {\n      return {\n        authenticated: false,\n        error: \"Invalid bearer token\",\n      };\n    }\n\n    return {\n      authenticated: true,\n      userId: \"bearer-token-user\",\n    };\n  } catch (error) {\n    console.error(\"Bearer token verification error:\", error);\n    return {\n      authenticated: false,\n      error: \"Bearer token verification failed\",\n    };\n  }\n}\n\n/**\n * Verify session authentication (for admin UI)\n */\nasync function verifySession(\n  sessionId: string,\n  requiredPermission?: string\n): Promise<ApiAuthResult> {\n  try {\n    // TODO: Implement session verification\n    // const session = await prisma.session.findUnique({\n    //   where: { id: sessionId },\n    //   include: { user: true },\n    // });\n\n    // Mock implementation\n    return {\n      authenticated: false,\n      error: \"Session authentication not implemented\",\n    };\n  } catch (error) {\n    console.error(\"Session verification error:\", error);\n    return {\n      authenticated: false,\n      error: \"Session verification failed\",\n    };\n  }\n}\n\n/**\n * Hash API key for secure storage\n */\nexport function hashApiKey(key: string): string {\n  return createHash(\"sha256\").update(key).digest(\"hex\");\n}\n\n/**\n * Generate a new API key\n */\nexport function generateApiKey(): string {\n  const chars =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const segments = 4;\n  const segmentLength = 8;\n\n  const segments_array = [];\n  for (let i = 0; i < segments; i++) {\n    let segment = \"\";\n    for (let j = 0; j < segmentLength; j++) {\n      segment += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    segments_array.push(segment);\n  }\n\n  return segments_array.join(\"-\");\n}\n\n/**\n * Rate limiting for API endpoints\n */\nexport class ApiRateLimiter {\n  private requests: Map<string, number[]> = new Map();\n  private readonly windowMs: number;\n  private readonly maxRequests: number;\n\n  constructor(windowMs = 60000, maxRequests = 60) {\n    this.windowMs = windowMs;\n    this.maxRequests = maxRequests;\n  }\n\n  /**\n   * Check if request should be rate limited\n   */\n  isRateLimited(identifier: string): boolean {\n    const now = Date.now();\n    const requests = this.requests.get(identifier) || [];\n\n    // Remove expired timestamps\n    const validRequests = requests.filter(\n      (timestamp) => now - timestamp < this.windowMs\n    );\n\n    if (validRequests.length >= this.maxRequests) {\n      return true;\n    }\n\n    // Add current request\n    validRequests.push(now);\n    this.requests.set(identifier, validRequests);\n\n    return false;\n  }\n\n  /**\n   * Get rate limit headers\n   */\n  getRateLimitHeaders(identifier: string): Record<string, string> {\n    const requests = this.requests.get(identifier) || [];\n    const now = Date.now();\n    const validRequests = requests.filter(\n      (timestamp) => now - timestamp < this.windowMs\n    );\n\n    const remaining = Math.max(0, this.maxRequests - validRequests.length);\n    const resetTime =\n      validRequests.length > 0\n        ? validRequests[0] + this.windowMs\n        : now + this.windowMs;\n\n    return {\n      \"X-RateLimit-Limit\": this.maxRequests.toString(),\n      \"X-RateLimit-Remaining\": remaining.toString(),\n      \"X-RateLimit-Reset\": new Date(resetTime).toISOString(),\n    };\n  }\n}\n\n// Export singleton rate limiter\nexport const apiRateLimiter = new ApiRateLimiter(\n  parseInt(process.env.API_RATE_LIMIT_WINDOW || \"60000\"),\n  parseInt(process.env.API_RATE_LIMIT_MAX || \"60\")\n);\n"],"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","ignoreList":[]}