d6aabed4cbc5cd9e7fb444d55f657c61
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TerryArticleGenerator = exports.ArticleSectionSchema = exports.ArticleGenerationSchema = exports.ArticleContentSchema = void 0;
var _openai = _interopRequireDefault(require("openai"));
var _zod = require("zod");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Terry-Style Article Generator
 * AI-powered generation of Transfer Juice articles with Terry's distinctive voice
 */ // TODO: Fix circular dependency with terry-style
// import { applyTerryStyle } from '@/lib/terry-style';
// Article generation schemas
var ArticleSectionSchema = exports.ArticleSectionSchema = _zod.z.object({
  id: _zod.z.string(),
  type: _zod.z["enum"](["intro", "main", "context", "analysis", "conclusion"]),
  title: _zod.z.string(),
  content: _zod.z.string(),
  order: _zod.z.number(),
  sourceTweets: _zod.z.array(_zod.z.string()),
  // Tweet IDs used in this section
  terryisms: _zod.z.array(_zod.z.string()) // Specific Terry phrases used
});
var ArticleContentSchema = exports.ArticleContentSchema = _zod.z.object({
  sections: _zod.z.array(ArticleSectionSchema),
  wordCount: _zod.z.number(),
  estimatedReadTime: _zod.z.number(),
  terryScore: _zod.z.number().min(0).max(100),
  // How Terry-esque it is
  qualityMetrics: _zod.z.object({
    coherence: _zod.z.number().min(0).max(100),
    factualAccuracy: _zod.z.number().min(0).max(100),
    brandVoice: _zod.z.number().min(0).max(100),
    readability: _zod.z.number().min(0).max(100)
  })
});
var ArticleGenerationSchema = exports.ArticleGenerationSchema = _zod.z.object({
  title: _zod.z.string(),
  slug: _zod.z.string(),
  content: ArticleContentSchema,
  summary: _zod.z.string(),
  metaDescription: _zod.z.string(),
  tags: _zod.z.array(_zod.z.string()),
  briefingType: _zod.z["enum"](["MORNING", "AFTERNOON", "EVENING", "WEEKEND", "SPECIAL"]),
  status: _zod.z["enum"](["DRAFT", "REVIEW", "PUBLISHED"]),
  qualityScore: _zod.z.number().min(0).max(100),
  aiModel: _zod.z.string(),
  generationTime: _zod.z.number()
});
var TerryArticleGenerator = exports.TerryArticleGenerator = /*#__PURE__*/function () {
  function TerryArticleGenerator(config) {
    _classCallCheck(this, TerryArticleGenerator);
    this.config = _objectSpread({
      model: "gpt-4.1",
      maxTokens: 4000,
      temperature: 0.7,
      terryIntensity: "medium"
    }, config);
    this.openai = new _openai["default"]({
      apiKey: this.config.openaiApiKey
    });
  }

  /**
   * Generate a complete Terry-style article from tweet analyses
   */
  return _createClass(TerryArticleGenerator, [{
    key: "generateArticle",
    value: (function () {
      var _generateArticle = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(input) {
        var startTime, prioritizedTweets, articleStructure, sections, _yield$this$generateM, title, slug, summary, metaDescription, tags, qualityMetrics, terryScore, qualityScore, wordCount, estimatedReadTime, article, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              startTime = Date.now();
              _context.p = 1;
              // Filter and prioritize content
              prioritizedTweets = this.prioritizeContent(input.tweetAnalyses); // Generate article structure
              articleStructure = this.planArticleStructure(prioritizedTweets, input); // Generate content for each section
              _context.n = 2;
              return this.generateSections(articleStructure, prioritizedTweets, input);
            case 2:
              sections = _context.v;
              _context.n = 3;
              return this.generateMetadata(sections, input);
            case 3:
              _yield$this$generateM = _context.v;
              title = _yield$this$generateM.title;
              slug = _yield$this$generateM.slug;
              summary = _yield$this$generateM.summary;
              metaDescription = _yield$this$generateM.metaDescription;
              tags = _yield$this$generateM.tags;
              // Calculate quality metrics
              qualityMetrics = this.calculateQualityMetrics(sections);
              terryScore = this.calculateTerryScore(sections);
              qualityScore = this.calculateOverallQuality(qualityMetrics, terryScore);
              wordCount = sections.reduce(function (total, section) {
                return total + section.content.split(" ").length;
              }, 0);
              estimatedReadTime = Math.ceil(wordCount / 200); // 200 WPM reading speed
              article = {
                title: title,
                slug: slug,
                content: {
                  sections: sections,
                  wordCount: wordCount,
                  estimatedReadTime: estimatedReadTime,
                  terryScore: terryScore,
                  qualityMetrics: qualityMetrics
                },
                summary: summary,
                metaDescription: metaDescription,
                tags: tags,
                briefingType: "SPECIAL",
                // Default briefing type for feed content
                status: qualityScore >= 85 ? "REVIEW" : "DRAFT",
                qualityScore: qualityScore,
                aiModel: this.config.model,
                generationTime: Date.now() - startTime
              };
              return _context.a(2, ArticleGenerationSchema.parse(article));
            case 4:
              _context.p = 4;
              _t = _context.v;
              throw new Error("Article generation failed: ".concat(_t instanceof Error ? _t.message : "Unknown error"));
            case 5:
              return _context.a(2);
          }
        }, _callee, this, [[1, 4]]);
      }));
      function generateArticle(_x) {
        return _generateArticle.apply(this, arguments);
      }
      return generateArticle;
    }()
    /**
     * Prioritize content based on Terry's preferences
     */
    )
  }, {
    key: "prioritizeContent",
    value: function prioritizeContent(analyses) {
      return analyses.filter(function (analysis) {
        return analysis.classification.isTransferRelated;
      }).sort(function (a, b) {
        // Priority scoring for Terry's interests
        var scoreA = a.qualityScore;
        var scoreB = b.qualityScore;

        // Boost chaotic/dramatic content
        if (a.sentiment.emotions.includes("excitement")) scoreA += 15;
        if (a.sentiment.emotions.includes("skepticism")) scoreA += 20;
        if (b.sentiment.emotions.includes("excitement")) scoreB += 15;
        if (b.sentiment.emotions.includes("skepticism")) scoreB += 20;

        // Boost specific financial details
        var aHasFee = a.entities.transferDetails.some(function (d) {
          return d.type === "fee";
        });
        var bHasFee = b.entities.transferDetails.some(function (d) {
          return d.type === "fee";
        });
        if (aHasFee) scoreA += 10;
        if (bHasFee) scoreB += 10;

        // Terry compatibility bonus
        scoreA += a.terryCompatibility * 0.5;
        scoreB += b.terryCompatibility * 0.5;
        return scoreB - scoreA;
      }).slice(0, 10); // Top 10 pieces of content
    }

    /**
     * Plan the structure of the article
     */
  }, {
    key: "planArticleStructure",
    value: function planArticleStructure(analyses, input) {
      var structure = [{
        type: "intro",
        priority: 1,
        content: analyses.slice(0, 2) // Most important stories
      }, {
        type: "main",
        priority: 2,
        content: analyses.slice(2, 6) // Main body content
      }, {
        type: "context",
        priority: 3,
        content: analyses.slice(6, 8) // Supporting stories
      }, {
        type: "analysis",
        priority: 4,
        content: analyses.slice(8, 10) // Terry's take
      }];

      // Add conclusion if enough content
      if (analyses.length >= 5) {
        structure.push({
          type: "analysis",
          priority: 5,
          content: analyses.slice(-2) // Wrap up with interesting bits
        });
      }
      return structure.filter(function (section) {
        return section.content.length > 0;
      });
    }

    /**
     * Generate content for article sections
     */
  }, {
    key: "generateSections",
    value: (function () {
      var _generateSections = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(structure, allAnalyses, input) {
        var sections, _iterator, _step, _step$value, index, sectionPlan, section, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              sections = [];
              _iterator = _createForOfIteratorHelper(structure.entries());
              _context2.p = 1;
              _iterator.s();
            case 2:
              if ((_step = _iterator.n()).done) {
                _context2.n = 5;
                break;
              }
              _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], sectionPlan = _step$value[1];
              _context2.n = 3;
              return this.generateSection(sectionPlan.type, sectionPlan.content, index + 1, input);
            case 3:
              section = _context2.v;
              sections.push(section);
            case 4:
              _context2.n = 2;
              break;
            case 5:
              _context2.n = 7;
              break;
            case 6:
              _context2.p = 6;
              _t2 = _context2.v;
              _iterator.e(_t2);
            case 7:
              _context2.p = 7;
              _iterator.f();
              return _context2.f(7);
            case 8:
              return _context2.a(2, sections);
          }
        }, _callee2, this, [[1, 6, 7, 8]]);
      }));
      function generateSections(_x2, _x3, _x4) {
        return _generateSections.apply(this, arguments);
      }
      return generateSections;
    }()
    /**
     * Generate individual section content
     */
    )
  }, {
    key: "generateSection",
    value: (function () {
      var _generateSection = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(type, analyses, order, input) {
        var _response$choices$;
        var sectionPrompt, response, content, terryisms;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              sectionPrompt = this.buildSectionPrompt(type, analyses, input);
              _context3.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: this.getTerrySystemPrompt(type)
                }, {
                  role: "user",
                  content: sectionPrompt
                }],
                max_tokens: this.getSectionTokenLimit(type),
                temperature: this.config.temperature
              });
            case 1:
              response = _context3.v;
              content = (_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 || (_response$choices$ = _response$choices$.message) === null || _response$choices$ === void 0 ? void 0 : _response$choices$.content;
              if (content) {
                _context3.n = 2;
                break;
              }
              throw new Error("No content generated for ".concat(type, " section"));
            case 2:
              // Extract Terry-isms from the generated content
              terryisms = this.extractTerryisms(content);
              return _context3.a(2, {
                id: "section_".concat(type, "_").concat(order),
                type: type,
                title: this.generateSectionTitle(type, analyses),
                content: content.trim(),
                order: order,
                sourceTweets: analyses.map(function (_, i) {
                  return "tweet_".concat(i);
                }),
                // Would use real tweet IDs
                terryisms: terryisms
              });
          }
        }, _callee3, this);
      }));
      function generateSection(_x5, _x6, _x7, _x8) {
        return _generateSection.apply(this, arguments);
      }
      return generateSection;
    }()
    /**
     * Get Terry-specific system prompt for different section types
     */
    )
  }, {
    key: "getTerrySystemPrompt",
    value: function getTerrySystemPrompt(type) {
      var basePrompt = "You are The Terry, a brilliantly acerbic football journalist with a gift for weaponised irritation and emotional intelligence. Write in Joel Golby's distinctive style.\n\nVOICE CHARACTERISTICS:\n- Acerbic, funny, witty, overstimulated but emotionally intelligent\n- Weaponised irritation paired with genuine insight\n- Parenthetical asides that add humor and context\n- Specific, absurd details that illuminate larger truths\n- Mix of chaos and competence\n\nTRANSFER JUICE STYLE:\n- Sharp, funny observations about football's financial madness\n- Empathy for fans caught in the middle of corporate games\n- Celebration of genuine football moments amid the chaos\n- Terry-level specificity about absurd details";
      var sectionSpecific = {
        intro: "INTRO SECTION: Hook readers immediately with the most dramatic/absurd transfer story. Set the tone for controlled chaos.",
        main: "MAIN SECTION: Deep dive into the key stories with Terry's mix of expertise and exasperation.",
        context: "CONTEXT SECTION: Provide background with Terry's trademark ability to connect dots others miss.",
        analysis: "ANALYSIS SECTION: This is pure Terry - deep insights wrapped in withering observations.",
        conclusion: "CONCLUSION SECTION: Wrap up with Terry's signature mix of resignation and hope."
      };
      return "".concat(basePrompt, "\n\n").concat(sectionSpecific[type]);
    }

    /**
     * Build section-specific prompt
     */
  }, {
    key: "buildSectionPrompt",
    value: function buildSectionPrompt(type, analyses, input) {
      var tweetSummaries = analyses.map(function (analysis, i) {
        var classification = analysis.classification;
        var entities = analysis.entities;
        return "Tweet ".concat(i + 1, ":\n- Content: ").concat(classification.keyPoints.join(", "), "\n- Type: ").concat(classification.transferType, "\n- Players: ").concat(entities.players.map(function (p) {
          return p.name;
        }).join(", ") || "None", "\n- Clubs: ").concat(entities.clubs.map(function (c) {
          return c.name;
        }).join(", ") || "None", "\n- Sentiment: ").concat(analysis.sentiment.sentiment, "\n- Quality: ").concat(analysis.qualityScore, "/100");
      }).join("\n\n");
      return "\nWrite a ".concat(type, " section for a ").concat(input.feedType.toLowerCase(), " Transfer Juice briefing dated ").concat(input.briefingDate.toDateString(), ".\n\nCONTENT TO WORK WITH:\n").concat(tweetSummaries, "\n\nREQUIREMENTS:\n- ").concat(this.getSectionRequirements(type), "\n- Use Terry's voice throughout\n- Include specific details and parenthetical asides\n- Balance humor with genuine insight\n- Focus on the human/absurd elements of transfers\n\nWrite engaging, Terry-style content that transforms these transfer updates into compelling journalism.\n    ").trim();
    }

    /**
     * Get section-specific requirements
     */
  }, {
    key: "getSectionRequirements",
    value: function getSectionRequirements(type) {
      var requirements = {
        intro: "150-200 words. Hook readers with the biggest story. Set comedic tone while delivering news.",
        main: "300-400 words. Deep dive into key transfers. Balance reporting with Terry's observations.",
        context: "200-250 words. Background and connections. Terry's ability to see bigger picture.",
        analysis: "250-300 words. Pure Terry commentary. Withering insights about football's madness.",
        conclusion: "100-150 words. Wrap up with hope/resignation. Terry's emotional intelligence."
      };
      return requirements[type];
    }

    /**
     * Get token limits per section type
     */
  }, {
    key: "getSectionTokenLimit",
    value: function getSectionTokenLimit(type) {
      var limits = {
        intro: 300,
        main: 500,
        context: 350,
        analysis: 400,
        conclusion: 250
      };
      return limits[type];
    }

    /**
     * Generate metadata (title, summary, etc.)
     */
  }, {
    key: "generateMetadata",
    value: (function () {
      var _generateMetadata = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(sections, input) {
        var _response$choices$2;
        var contentSummary, response, content, metadata;
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              contentSummary = sections.map(function (s) {
                return "".concat(s.type, ": ").concat(s.content.substring(0, 100), "...");
              }).join("\n");
              _context4.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "system",
                  content: "Generate metadata for a Terry-style Transfer Juice article. Return JSON with:\n- title: Witty, specific headline (max 60 chars)\n- slug: URL-friendly version\n- summary: One-sentence article summary (max 160 chars)\n- metaDescription: SEO meta description (max 160 chars)\n- tags: Array of relevant tags"
                }, {
                  role: "user",
                  content: "Generate metadata for this ".concat(input.feedType.toLowerCase(), " briefing:\n\n").concat(contentSummary)
                }],
                max_tokens: 300,
                temperature: 0.5,
                response_format: {
                  type: "json_object"
                }
              });
            case 1:
              response = _context4.v;
              content = (_response$choices$2 = response.choices[0]) === null || _response$choices$2 === void 0 || (_response$choices$2 = _response$choices$2.message) === null || _response$choices$2 === void 0 ? void 0 : _response$choices$2.content;
              if (content) {
                _context4.n = 2;
                break;
              }
              throw new Error("No metadata generated");
            case 2:
              metadata = JSON.parse(content);
              return _context4.a(2, {
                title: metadata.title,
                slug: metadata.slug || metadata.title.toLowerCase().replace(/[^a-z0-9]+/g, "-"),
                summary: metadata.summary,
                metaDescription: metadata.metaDescription,
                tags: metadata.tags || []
              });
          }
        }, _callee4, this);
      }));
      function generateMetadata(_x9, _x0) {
        return _generateMetadata.apply(this, arguments);
      }
      return generateMetadata;
    }()
    /**
     * Extract Terry-isms from generated content
     */
    )
  }, {
    key: "extractTerryisms",
    value: function extractTerryisms(content) {
      var terryisms = [];

      // Look for parenthetical asides
      var parentheticals = content.match(/\([^)]+\)/g);
      if (parentheticals) {
        terryisms.push.apply(terryisms, _toConsumableArray(parentheticals));
      }

      // Look for specific Terry phrases
      var terryPhrases = ["of course", "apparently", "somehow", "brilliant", "properly mental", "exactly the sort of", "which is"];
      for (var _i = 0, _terryPhrases = terryPhrases; _i < _terryPhrases.length; _i++) {
        var phrase = _terryPhrases[_i];
        if (content.toLowerCase().includes(phrase)) {
          terryisms.push(phrase);
        }
      }
      return _toConsumableArray(new Set(terryisms)); // Remove duplicates
    }

    /**
     * Generate section title
     */
  }, {
    key: "generateSectionTitle",
    value: function generateSectionTitle(type, analyses) {
      var titleMap = {
        intro: "The Latest Chaos",
        main: "The Main Event",
        context: "What's Actually Happening",
        analysis: "The Terry Take",
        conclusion: "Right Then"
      };
      return titleMap[type];
    }

    /**
     * Calculate quality metrics
     */
  }, {
    key: "calculateQualityMetrics",
    value: function calculateQualityMetrics(sections) {
      // Simplified quality calculation - would use more sophisticated NLP in production
      var totalWords = sections.reduce(function (total, section) {
        return total + section.content.split(" ").length;
      }, 0);
      return {
        coherence: Math.min(85 + Math.random() * 10, 100),
        // Would calculate based on content flow
        factualAccuracy: Math.min(90 + Math.random() * 5, 100),
        // Would verify against sources
        brandVoice: this.calculateTerryScore(sections),
        // Already calculated
        readability: Math.min(80 + totalWords / 50, 100) // Simplified readability
      };
    }

    /**
     * Calculate Terry score
     */
  }, {
    key: "calculateTerryScore",
    value: function calculateTerryScore(sections) {
      var score = 0;
      sections.forEach(function (section) {
        // Check for Terry-isms
        score += section.terryisms.length * 5;

        // Check for specific Terry patterns
        if (section.content.includes("(")) score += 10; // Parenthetical asides
        if (section.content.includes("brilliant")) score += 5;
        if (section.content.includes("of course")) score += 5;
        if (section.content.includes("properly")) score += 5;
      });
      return Math.min(score, 100);
    }

    /**
     * Calculate overall quality
     */
  }, {
    key: "calculateOverallQuality",
    value: function calculateOverallQuality(metrics, terryScore) {
      return Math.round(metrics.coherence * 0.25 + metrics.factualAccuracy * 0.3 + metrics.brandVoice * 0.25 + metrics.readability * 0.2);
    }

    /**
     * Validate configuration
     */
  }, {
    key: "validateConfiguration",
    value: (function () {
      var _validateConfiguration = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {
        var response, _t3;
        return _regenerator().w(function (_context5) {
          while (1) switch (_context5.n) {
            case 0:
              _context5.p = 0;
              _context5.n = 1;
              return this.openai.chat.completions.create({
                model: this.config.model,
                messages: [{
                  role: "user",
                  content: "Test"
                }],
                max_tokens: 5
              });
            case 1:
              response = _context5.v;
              return _context5.a(2, {
                valid: true
              });
            case 2:
              _context5.p = 2;
              _t3 = _context5.v;
              return _context5.a(2, {
                valid: false,
                error: "Article generator validation failed: ".concat(_t3 instanceof Error ? _t3.message : "Unknown error")
              });
          }
        }, _callee5, this, [[0, 2]]);
      }));
      function validateConfiguration() {
        return _validateConfiguration.apply(this, arguments);
      }
      return validateConfiguration;
    }())
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,