a05974d98861da8a752cfb4814030a41
/* istanbul ignore next */ function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function cov_1hi01w52b() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/database/subscribers.ts";
  var hash = "5846bb53ff7ef1bb6843a7c6780a9afbe931545a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/database/subscribers.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "1": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 39,
          column: 5
        }
      },
      "2": {
        start: {
          line: 48,
          column: 2
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "3": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "4": {
        start: {
          line: 74,
          column: 2
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "5": {
        start: {
          line: 84,
          column: 2
        },
        end: {
          line: 90,
          column: 5
        }
      },
      "6": {
        start: {
          line: 97,
          column: 2
        },
        end: {
          line: 103,
          column: 5
        }
      },
      "7": {
        start: {
          line: 116,
          column: 55
        },
        end: {
          line: 116,
          column: 68
        }
      },
      "8": {
        start: {
          line: 118,
          column: 50
        },
        end: {
          line: 123,
          column: 3
        }
      },
      "9": {
        start: {
          line: 126,
          column: 2
        },
        end: {
          line: 131,
          column: 3
        }
      },
      "10": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 52
        }
      },
      "11": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 130,
          column: 6
        }
      },
      "12": {
        start: {
          line: 133,
          column: 2
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "13": {
        start: {
          line: 148,
          column: 2
        },
        end: {
          line: 165,
          column: 5
        }
      },
      "14": {
        start: {
          line: 175,
          column: 2
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "15": {
        start: {
          line: 206,
          column: 2
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "16": {
        start: {
          line: 244,
          column: 14
        },
        end: {
          line: 244,
          column: 24
        }
      },
      "17": {
        start: {
          line: 245,
          column: 21
        },
        end: {
          line: 245,
          column: 79
        }
      },
      "18": {
        start: {
          line: 246,
          column: 18
        },
        end: {
          line: 246,
          column: 67
        }
      },
      "19": {
        start: {
          line: 257,
          column: 6
        },
        end: {
          line: 276,
          column: 4
        }
      },
      "20": {
        start: {
          line: 278,
          column: 23
        },
        end: {
          line: 280,
          column: 37
        }
      },
      "21": {
        start: {
          line: 279,
          column: 27
        },
        end: {
          line: 279,
          column: 50
        }
      },
      "22": {
        start: {
          line: 283,
          column: 43
        },
        end: {
          line: 288,
          column: 3
        }
      },
      "23": {
        start: {
          line: 289,
          column: 2
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "24": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 292,
          column: 5
        }
      },
      "25": {
        start: {
          line: 291,
          column: 6
        },
        end: {
          line: 291,
          column: 29
        }
      },
      "26": {
        start: {
          line: 295,
          column: 2
        },
        end: {
          line: 306,
          column: 4
        }
      },
      "27": {
        start: {
          line: 315,
          column: 21
        },
        end: {
          line: 315,
          column: 73
        }
      },
      "28": {
        start: {
          line: 317,
          column: 17
        },
        end: {
          line: 322,
          column: 4
        }
      },
      "29": {
        start: {
          line: 324,
          column: 2
        },
        end: {
          line: 324,
          column: 22
        }
      },
      "30": {
        start: {
          line: 333,
          column: 24
        },
        end: {
          line: 333,
          column: 71
        }
      },
      "31": {
        start: {
          line: 335,
          column: 48
        },
        end: {
          line: 338,
          column: 3
        }
      },
      "32": {
        start: {
          line: 340,
          column: 2
        },
        end: {
          line: 366,
          column: 3
        }
      },
      "33": {
        start: {
          line: 342,
          column: 6
        },
        end: {
          line: 346,
          column: 8
        }
      },
      "34": {
        start: {
          line: 347,
          column: 6
        },
        end: {
          line: 347,
          column: 12
        }
      },
      "35": {
        start: {
          line: 350,
          column: 6
        },
        end: {
          line: 353,
          column: 8
        }
      },
      "36": {
        start: {
          line: 354,
          column: 6
        },
        end: {
          line: 354,
          column: 12
        }
      },
      "37": {
        start: {
          line: 357,
          column: 6
        },
        end: {
          line: 360,
          column: 8
        }
      },
      "38": {
        start: {
          line: 361,
          column: 6
        },
        end: {
          line: 361,
          column: 12
        }
      },
      "39": {
        start: {
          line: 364,
          column: 6
        },
        end: {
          line: 364,
          column: 61
        }
      },
      "40": {
        start: {
          line: 365,
          column: 6
        },
        end: {
          line: 365,
          column: 12
        }
      },
      "41": {
        start: {
          line: 368,
          column: 2
        },
        end: {
          line: 371,
          column: 5
        }
      }
    },
    fnMap: {
      "0": {
        name: "hashEmail",
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 18
          }
        },
        loc: {
          start: {
            line: 13,
            column: 42
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "createSubscriber",
        decl: {
          start: {
            line: 20,
            column: 22
          },
          end: {
            line: 20,
            column: 38
          }
        },
        loc: {
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 28
      },
      "2": {
        name: "getSubscriberByEmail",
        decl: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 42
          }
        },
        loc: {
          start: {
            line: 47,
            column: 35
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 47
      },
      "3": {
        name: "updateSubscriberPreferences",
        decl: {
          start: {
            line: 56,
            column: 22
          },
          end: {
            line: 56,
            column: 49
          }
        },
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 63
      },
      "4": {
        name: "verifySubscriber",
        decl: {
          start: {
            line: 73,
            column: 22
          },
          end: {
            line: 73,
            column: 38
          }
        },
        loc: {
          start: {
            line: 73,
            column: 69
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 73
      },
      "5": {
        name: "unsubscribeUser",
        decl: {
          start: {
            line: 83,
            column: 22
          },
          end: {
            line: 83,
            column: 37
          }
        },
        loc: {
          start: {
            line: 83,
            column: 68
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 83
      },
      "6": {
        name: "resubscribeUser",
        decl: {
          start: {
            line: 96,
            column: 22
          },
          end: {
            line: 96,
            column: 37
          }
        },
        loc: {
          start: {
            line: 96,
            column: 79
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 96
      },
      "7": {
        name: "getActiveSubscribersForMailing",
        decl: {
          start: {
            line: 109,
            column: 22
          },
          end: {
            line: 109,
            column: 52
          }
        },
        loc: {
          start: {
            line: 115,
            column: 31
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 115
      },
      "8": {
        name: "trackEmailSent",
        decl: {
          start: {
            line: 144,
            column: 22
          },
          end: {
            line: 144,
            column: 36
          }
        },
        loc: {
          start: {
            line: 147,
            column: 17
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 147
      },
      "9": {
        name: "trackEmailOpened",
        decl: {
          start: {
            line: 171,
            column: 22
          },
          end: {
            line: 171,
            column: 38
          }
        },
        loc: {
          start: {
            line: 174,
            column: 17
          },
          end: {
            line: 197,
            column: 1
          }
        },
        line: 174
      },
      "10": {
        name: "trackEmailClick",
        decl: {
          start: {
            line: 202,
            column: 22
          },
          end: {
            line: 202,
            column: 37
          }
        },
        loc: {
          start: {
            line: 205,
            column: 17
          },
          end: {
            line: 227,
            column: 1
          }
        },
        line: 205
      },
      "11": {
        name: "getSubscriberStats",
        decl: {
          start: {
            line: 232,
            column: 22
          },
          end: {
            line: 232,
            column: 40
          }
        },
        loc: {
          start: {
            line: 243,
            column: 3
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 243
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 279,
            column: 21
          }
        },
        loc: {
          start: {
            line: 279,
            column: 27
          },
          end: {
            line: 279,
            column: 50
          }
        },
        line: 279
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 289,
            column: 25
          },
          end: {
            line: 289,
            column: 26
          }
        },
        loc: {
          start: {
            line: 289,
            column: 35
          },
          end: {
            line: 293,
            column: 3
          }
        },
        line: 289
      },
      "14": {
        name: "cleanupUnverifiedSubscribers",
        decl: {
          start: {
            line: 312,
            column: 22
          },
          end: {
            line: 312,
            column: 50
          }
        },
        loc: {
          start: {
            line: 314,
            column: 19
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 314
      },
      "15": {
        name: "getSubscribersByEngagement",
        decl: {
          start: {
            line: 330,
            column: 22
          },
          end: {
            line: 330,
            column: 48
          }
        },
        loc: {
          start: {
            line: 332,
            column: 30
          },
          end: {
            line: 372,
            column: 1
          }
        },
        line: 332
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 31
          }
        }, {
          start: {
            line: 35,
            column: 35
          },
          end: {
            line: 35,
            column: 42
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 36,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 36,
            column: 39
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 50
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 37,
            column: 29
          }
        }, {
          start: {
            line: 37,
            column: 33
          },
          end: {
            line: 37,
            column: 48
          }
        }],
        line: 37
      },
      "3": {
        loc: {
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 116,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 116,
            column: 62
          }
        }, {
          start: {
            line: 116,
            column: 66
          },
          end: {
            line: 116,
            column: 68
          }
        }],
        line: 116
      },
      "4": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 34
          }
        }],
        line: 121
      },
      "5": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 122,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 122,
            column: 16
          }
        }, {
          start: {
            line: 122,
            column: 20
          },
          end: {
            line: 122,
            column: 32
          }
        }],
        line: 122
      },
      "6": {
        loc: {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 131,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 131,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "7": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 135,
            column: 32
          }
        }],
        line: 135
      },
      "8": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 136,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 136,
            column: 14
          }
        }, {
          start: {
            line: 136,
            column: 18
          },
          end: {
            line: 136,
            column: 34
          }
        }],
        line: 136
      },
      "9": {
        loc: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "10": {
        loc: {
          start: {
            line: 313,
            column: 2
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }],
        line: 313
      },
      "11": {
        loc: {
          start: {
            line: 340,
            column: 2
          },
          end: {
            line: 366,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 341,
            column: 4
          },
          end: {
            line: 347,
            column: 12
          }
        }, {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 354,
            column: 12
          }
        }, {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 361,
            column: 12
          }
        }, {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 365,
            column: 12
          }
        }],
        line: 340
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5846bb53ff7ef1bb6843a7c6780a9afbe931545a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hi01w52b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hi01w52b();
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * Email Subscriber Data Access Layer
 * Database operations for email subscriber management
 */

import { prisma } from "@/lib/prisma";
import { createHash } from "crypto";

/**
 * Hash email for privacy
 */
function hashEmail(email) {
  /* istanbul ignore next */
  cov_1hi01w52b().f[0]++;
  cov_1hi01w52b().s[0]++;
  return createHash("sha256").update(email.toLowerCase()).digest("hex");
}

/**
 * Create new subscriber
 */
export
/* istanbul ignore next */
function createSubscriber(_x) {
  return _createSubscriber.apply(this, arguments);
}

/**
 * Get subscriber by email
 */
/* istanbul ignore next */
function _createSubscriber() {
  _createSubscriber = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(data)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1hi01w52b().f[1]++;
          cov_1hi01w52b().s[1]++;
          _context.n = 1;
          return prisma.emailSubscriber.create({
            data: {
              email: data.email.toLowerCase(),
              source: data.source,
              ipAddress: data.ipAddress,
              userAgent: data.userAgent,
              frequency:
              /* istanbul ignore next */
              (cov_1hi01w52b().b[0][0]++, data.frequency) ||
              /* istanbul ignore next */
              (cov_1hi01w52b().b[0][1]++, "DAILY"),
              preferredTime:
              /* istanbul ignore next */
              (cov_1hi01w52b().b[1][0]++, data.preferredTime) ||
              /* istanbul ignore next */
              (cov_1hi01w52b().b[1][1]++, "08:00"),
              timezone:
              /* istanbul ignore next */
              (cov_1hi01w52b().b[2][0]++, data.timezone) ||
              /* istanbul ignore next */
              (cov_1hi01w52b().b[2][1]++, "Europe/London")
            }
          });
        case 1:
          return _context.a(2, _context.v);
      }
    }, _callee);
  }));
  return _createSubscriber.apply(this, arguments);
}
export
/* istanbul ignore next */
function getSubscriberByEmail(_x2) {
  return _getSubscriberByEmail.apply(this, arguments);
}

/**
 * Update subscriber preferences
 */
/* istanbul ignore next */
function _getSubscriberByEmail() {
  _getSubscriberByEmail = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2(email)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_1hi01w52b().f[2]++;
          cov_1hi01w52b().s[2]++;
          _context2.n = 1;
          return prisma.emailSubscriber.findUnique({
            where: {
              email: email.toLowerCase()
            }
          });
        case 1:
          return _context2.a(2, _context2.v);
      }
    }, _callee2);
  }));
  return _getSubscriberByEmail.apply(this, arguments);
}
export
/* istanbul ignore next */
function updateSubscriberPreferences(_x3, _x4) {
  return _updateSubscriberPreferences.apply(this, arguments);
}

/**
 * Verify subscriber email
 */
/* istanbul ignore next */
function _updateSubscriberPreferences() {
  _updateSubscriberPreferences = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee3(email, preferences)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          cov_1hi01w52b().f[3]++;
          cov_1hi01w52b().s[3]++;
          _context3.n = 1;
          return prisma.emailSubscriber.update({
            where: {
              email: email.toLowerCase()
            },
            data: preferences
          });
        case 1:
          return _context3.a(2, _context3.v);
      }
    }, _callee3);
  }));
  return _updateSubscriberPreferences.apply(this, arguments);
}
export
/* istanbul ignore next */
function verifySubscriber(_x5) {
  return _verifySubscriber.apply(this, arguments);
}

/**
 * Unsubscribe user
 */
/* istanbul ignore next */
function _verifySubscriber() {
  _verifySubscriber = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee4(email)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          cov_1hi01w52b().f[4]++;
          cov_1hi01w52b().s[4]++;
          _context4.n = 1;
          return prisma.emailSubscriber.update({
            where: {
              email: email.toLowerCase()
            },
            data: {
              isVerified: true
            }
          });
        case 1:
          return _context4.a(2);
      }
    }, _callee4);
  }));
  return _verifySubscriber.apply(this, arguments);
}
export
/* istanbul ignore next */
function unsubscribeUser(_x6) {
  return _unsubscribeUser.apply(this, arguments);
}

/**
 * Resubscribe user
 */
/* istanbul ignore next */
function _unsubscribeUser() {
  _unsubscribeUser = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee5(email)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          cov_1hi01w52b().f[5]++;
          cov_1hi01w52b().s[5]++;
          _context5.n = 1;
          return prisma.emailSubscriber.update({
            where: {
              email: email.toLowerCase()
            },
            data: {
              isActive: false,
              unsubscribedAt: new Date()
            }
          });
        case 1:
          return _context5.a(2);
      }
    }, _callee5);
  }));
  return _unsubscribeUser.apply(this, arguments);
}
export
/* istanbul ignore next */
function resubscribeUser(_x7) {
  return _resubscribeUser.apply(this, arguments);
}

/**
 * Get active subscribers for mailing
 */
/* istanbul ignore next */
function _resubscribeUser() {
  _resubscribeUser = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee6(email)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context6) {
      while (1) switch (_context6.n) {
        case 0:
          cov_1hi01w52b().f[6]++;
          cov_1hi01w52b().s[6]++;
          _context6.n = 1;
          return prisma.emailSubscriber.update({
            where: {
              email: email.toLowerCase()
            },
            data: {
              isActive: true,
              unsubscribedAt: null
            }
          });
        case 1:
          return _context6.a(2, _context6.v);
      }
    }, _callee6);
  }));
  return _resubscribeUser.apply(this, arguments);
}
export
/* istanbul ignore next */
function getActiveSubscribersForMailing(_x8) {
  return _getActiveSubscribersForMailing.apply(this, arguments);
}

/**
 * Track email sent
 */
/* istanbul ignore next */
function _getActiveSubscribersForMailing() {
  _getActiveSubscribersForMailing = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee7(options)
  /* istanbul ignore next */
  {
    var _ref, frequency, hour, timezone, limit, offset, where, hourStr;
    return _regenerator().w(function (_context7) {
      while (1) switch (_context7.n) {
        case 0:
          cov_1hi01w52b().f[7]++;
          _ref = (cov_1hi01w52b().s[7]++,
          /* istanbul ignore next */
          (cov_1hi01w52b().b[3][0]++, options) ||
          /* istanbul ignore next */
          (cov_1hi01w52b().b[3][1]++, {})), frequency = _ref.frequency, hour = _ref.hour, timezone = _ref.timezone, limit = _ref.limit, offset = _ref.offset;
          where = (cov_1hi01w52b().s[8]++, _objectSpread(_objectSpread({
            isActive: true,
            isVerified: true
          },
          /* istanbul ignore next */
          (cov_1hi01w52b().b[4][0]++, frequency) &&
          /* istanbul ignore next */
          (cov_1hi01w52b().b[4][1]++, {
            frequency: frequency
          })),
          /* istanbul ignore next */
          (cov_1hi01w52b().b[5][0]++, timezone) &&
          /* istanbul ignore next */
          (cov_1hi01w52b().b[5][1]++, {
            timezone: timezone
          }))); // If hour is specified, filter by preferred time
          cov_1hi01w52b().s[9]++;
          if (hour !== undefined) {
            /* istanbul ignore next */
            cov_1hi01w52b().b[6][0]++;
            hourStr = (cov_1hi01w52b().s[10]++, hour.toString().padStart(2, "0"));
            /* istanbul ignore next */
            cov_1hi01w52b().s[11]++;
            where.preferredTime = {
              startsWith: hourStr
            };
          } else
          /* istanbul ignore next */
          {
            cov_1hi01w52b().b[6][1]++;
          }
          cov_1hi01w52b().s[12]++;
          _context7.n = 1;
          return prisma.emailSubscriber.findMany(
          /* istanbul ignore next */
          _objectSpread(_objectSpread(_objectSpread({
            where: where
          },
          /* istanbul ignore next */
          (cov_1hi01w52b().b[7][0]++, limit) &&
          /* istanbul ignore next */
          (cov_1hi01w52b().b[7][1]++, {
            take: limit
          })),
          /* istanbul ignore next */
          (cov_1hi01w52b().b[8][0]++, offset) &&
          /* istanbul ignore next */
          (cov_1hi01w52b().b[8][1]++, {
            skip: offset
          })), {}, {
            orderBy: {
              subscribedAt: "asc"
            }
          }));
        case 1:
          return _context7.a(2, _context7.v);
      }
    }, _callee7);
  }));
  return _getActiveSubscribersForMailing.apply(this, arguments);
}
export
/* istanbul ignore next */
function trackEmailSent(_x9, _x0) {
  return _trackEmailSent.apply(this, arguments);
}

/**
 * Track email opened
 */
/* istanbul ignore next */
function _trackEmailSent() {
  _trackEmailSent = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee8(subscriberId, briefingId)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context8) {
      while (1) switch (_context8.n) {
        case 0:
          cov_1hi01w52b().f[8]++;
          cov_1hi01w52b().s[13]++;
          _context8.n = 1;
          return prisma.$transaction([
          // Update subscriber stats
          prisma.emailSubscriber.update({
            where: {
              id: subscriberId
            },
            data: {
              lastEmailSent: new Date(),
              totalEmailsSent: {
                increment: 1
              }
            }
          }),
          // Create briefing email record
          prisma.briefingEmail.create({
            data: {
              briefingId: briefingId,
              subscriberId: subscriberId
            }
          })]);
        case 1:
          return _context8.a(2);
      }
    }, _callee8);
  }));
  return _trackEmailSent.apply(this, arguments);
}
export
/* istanbul ignore next */
function trackEmailOpened(_x1, _x10) {
  return _trackEmailOpened.apply(this, arguments);
}

/**
 * Track email click
 */
/* istanbul ignore next */
function _trackEmailOpened() {
  _trackEmailOpened = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee9(subscriberId, briefingId)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context9) {
      while (1) switch (_context9.n) {
        case 0:
          cov_1hi01w52b().f[9]++;
          cov_1hi01w52b().s[14]++;
          _context9.n = 1;
          return prisma.$transaction([
          // Update subscriber stats
          prisma.emailSubscriber.update({
            where: {
              id: subscriberId
            },
            data: {
              lastOpenedAt: new Date(),
              totalOpens: {
                increment: 1
              }
            }
          }),
          // Update briefing email record
          prisma.briefingEmail.updateMany({
            where: {
              subscriberId: subscriberId,
              briefingId: briefingId,
              openedAt: null
            },
            data: {
              openedAt: new Date()
            }
          })]);
        case 1:
          return _context9.a(2);
      }
    }, _callee9);
  }));
  return _trackEmailOpened.apply(this, arguments);
}
export
/* istanbul ignore next */
function trackEmailClick(_x11, _x12) {
  return _trackEmailClick.apply(this, arguments);
}

/**
 * Get subscriber statistics
 */
/* istanbul ignore next */
function _trackEmailClick() {
  _trackEmailClick = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee0(subscriberId, briefingId)
  /* istanbul ignore next */
  {
    return _regenerator().w(function (_context0) {
      while (1) switch (_context0.n) {
        case 0:
          cov_1hi01w52b().f[10]++;
          cov_1hi01w52b().s[15]++;
          _context0.n = 1;
          return prisma.$transaction([
          // Update subscriber stats
          prisma.emailSubscriber.update({
            where: {
              id: subscriberId
            },
            data: {
              totalClicks: {
                increment: 1
              }
            }
          }),
          // Update briefing email record
          prisma.briefingEmail.updateMany({
            where: {
              subscriberId: subscriberId,
              briefingId: briefingId
            },
            data: {
              clickedAt: new Date(),
              clickCount: {
                increment: 1
              }
            }
          })]);
        case 1:
          return _context0.a(2);
      }
    }, _callee0);
  }));
  return _trackEmailClick.apply(this, arguments);
}
export
/* istanbul ignore next */
function getSubscriberStats() {
  return _getSubscriberStats.apply(this, arguments);
}

/**
 * Clean up unverified old subscribers
 */
/* istanbul ignore next */
function _getSubscriberStats() {
  _getSubscriberStats = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee1()
  /* istanbul ignore next */
  {
    var now, todayStart, weekAgo, _ref2, _ref3, total, active, verified, unsubscribed, byFrequency, newToday, newThisWeek, unsubscribedThisWeek, frequencyMap, allFrequencies;
    return _regenerator().w(function (_context1) {
      while (1) switch (_context1.n) {
        case 0:
          cov_1hi01w52b().f[11]++;
          now = (cov_1hi01w52b().s[16]++, new Date());
          todayStart = (cov_1hi01w52b().s[17]++, new Date(now.getFullYear(), now.getMonth(), now.getDate()));
          weekAgo = (cov_1hi01w52b().s[18]++, new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000));
          cov_1hi01w52b().s[19]++;
          _context1.n = 1;
          return Promise.all([prisma.emailSubscriber.count(), prisma.emailSubscriber.count({
            where: {
              isActive: true
            }
          }), prisma.emailSubscriber.count({
            where: {
              isVerified: true
            }
          }), prisma.emailSubscriber.count({
            where: {
              isActive: false
            }
          }), prisma.emailSubscriber.groupBy({
            by: ["frequency"],
            where: {
              isActive: true
            },
            _count: true
          }), prisma.emailSubscriber.count({
            where: {
              subscribedAt: {
                gte: todayStart
              }
            }
          }), prisma.emailSubscriber.count({
            where: {
              subscribedAt: {
                gte: weekAgo
              }
            }
          }), prisma.emailSubscriber.count({
            where: {
              unsubscribedAt: {
                gte: weekAgo
              }
            }
          })]);
        case 1:
          _ref2 = _context1.v;
          _ref3 = _slicedToArray(_ref2, 8);
          total = _ref3[0];
          active = _ref3[1];
          verified = _ref3[2];
          unsubscribed = _ref3[3];
          byFrequency = _ref3[4];
          newToday = _ref3[5];
          newThisWeek = _ref3[6];
          unsubscribedThisWeek = _ref3[7];
          frequencyMap = (cov_1hi01w52b().s[20]++, Object.fromEntries(byFrequency.map(function (f) {
            /* istanbul ignore next */
            cov_1hi01w52b().f[12]++;
            cov_1hi01w52b().s[21]++;
            return [f.frequency, f._count];
          }))); // Ensure all frequencies are represented
          allFrequencies = (cov_1hi01w52b().s[22]++, ["DAILY", "WEEKLY", "BREAKING_ONLY", "DISABLED"]);
          cov_1hi01w52b().s[23]++;
          allFrequencies.forEach(function (freq) {
            /* istanbul ignore next */
            cov_1hi01w52b().f[13]++;
            cov_1hi01w52b().s[24]++;
            if (!frequencyMap[freq]) {
              /* istanbul ignore next */
              cov_1hi01w52b().b[9][0]++;
              cov_1hi01w52b().s[25]++;
              frequencyMap[freq] = 0;
            } else
            /* istanbul ignore next */
            {
              cov_1hi01w52b().b[9][1]++;
            }
          });
          cov_1hi01w52b().s[26]++;
          return _context1.a(2, {
            total: total,
            active: active,
            verified: verified,
            unsubscribed: unsubscribed,
            byFrequency: frequencyMap,
            recentActivity: {
              newToday: newToday,
              newThisWeek: newThisWeek,
              unsubscribedThisWeek: unsubscribedThisWeek
            }
          });
      }
    }, _callee1);
  }));
  return _getSubscriberStats.apply(this, arguments);
}
export
/* istanbul ignore next */
function cleanupUnverifiedSubscribers() {
  return _cleanupUnverifiedSubscribers.apply(this, arguments);
}

/**
 * Get subscribers by engagement level
 */
/* istanbul ignore next */
function _cleanupUnverifiedSubscribers() {
  _cleanupUnverifiedSubscribers = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee10()
  /* istanbul ignore next */
  {
    var daysOld,
      cutoffDate,
      result,
      _args10 = arguments;
    return _regenerator().w(function (_context10) {
      while (1) switch (_context10.n) {
        case 0:
          daysOld = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : (cov_1hi01w52b().b[10][0]++, 7);
          cov_1hi01w52b().f[14]++;
          cutoffDate = (cov_1hi01w52b().s[27]++, new Date(Date.now() - daysOld * 24 * 60 * 60 * 1000));
          cov_1hi01w52b().s[28]++;
          _context10.n = 1;
          return prisma.emailSubscriber.deleteMany({
            where: {
              isVerified: false,
              subscribedAt: {
                lt: cutoffDate
              }
            }
          });
        case 1:
          result = _context10.v;
          cov_1hi01w52b().s[29]++;
          return _context10.a(2, result.count);
      }
    }, _callee10);
  }));
  return _cleanupUnverifiedSubscribers.apply(this, arguments);
}
export
/* istanbul ignore next */
function getSubscribersByEngagement(_x13) {
  return _getSubscribersByEngagement.apply(this, arguments);
}
/* istanbul ignore next */
function _getSubscribersByEngagement() {
  _getSubscribersByEngagement = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee11(level)
  /* istanbul ignore next */
  {
    var thirtyDaysAgo, where, _t;
    return _regenerator().w(function (_context11) {
      while (1) switch (_context11.n) {
        case 0:
          cov_1hi01w52b().f[15]++;
          thirtyDaysAgo = (cov_1hi01w52b().s[30]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
          where = (cov_1hi01w52b().s[31]++, {
            isActive: true,
            isVerified: true
          });
          cov_1hi01w52b().s[32]++;
          _t = level;
          _context11.n = _t === "high" ? 1 : _t === "medium" ? 2 : _t === "low" ? 3 : _t === "inactive" ? 4 : 5;
          break;
        case 1:
          cov_1hi01w52b().b[11][0]++;
          cov_1hi01w52b().s[33]++;
          where.AND = [{
            lastOpenedAt: {
              gte: thirtyDaysAgo
            }
          }, {
            totalOpens: {
              gte: 10
            }
          }, {
            totalClicks: {
              gte: 5
            }
          }];
          cov_1hi01w52b().s[34]++;
          return _context11.a(3, 5);
        case 2:
          cov_1hi01w52b().b[11][1]++;
          cov_1hi01w52b().s[35]++;
          where.AND = [{
            lastOpenedAt: {
              gte: thirtyDaysAgo
            }
          }, {
            totalOpens: {
              gte: 3
            }
          }];
          cov_1hi01w52b().s[36]++;
          return _context11.a(3, 5);
        case 3:
          cov_1hi01w52b().b[11][2]++;
          cov_1hi01w52b().s[37]++;
          where.OR = [{
            lastOpenedAt: {
              lt: thirtyDaysAgo
            }
          }, {
            totalOpens: {
              lt: 3
            }
          }];
          cov_1hi01w52b().s[38]++;
          return _context11.a(3, 5);
        case 4:
          cov_1hi01w52b().b[11][3]++;
          cov_1hi01w52b().s[39]++;
          where.OR = [{
            lastOpenedAt: null
          }, {
            totalOpens: 0
          }];
          cov_1hi01w52b().s[40]++;
          return _context11.a(3, 5);
        case 5:
          cov_1hi01w52b().s[41]++;
          _context11.n = 6;
          return prisma.emailSubscriber.findMany({
            where: where,
            orderBy: {
              lastOpenedAt: "desc"
            }
          });
        case 6:
          return _context11.a(2, _context11.v);
      }
    }, _callee11);
  }));
  return _getSubscribersByEngagement.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,