7beab0f3d29c1aa4d1715a39dcae0097
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFeedStore = exports.selectViewMode = exports.selectUnreadCount = exports.selectTotalItems = exports.selectSelectedItem = exports.selectScrollPosition = exports.selectRealtimeStatus = exports.selectPartnerContent = exports.selectMemoryStats = exports.selectLastUpdated = exports.selectIsLoadingMore = exports.selectIsLoading = exports.selectIsFiltering = exports.selectHasUnreadUpdates = exports.selectHasMore = exports.selectFilteredItems = exports.selectFilterStatus = exports.selectFeedStatus = exports.selectError = exports.selectConnectionStatus = exports.selectActiveFilters = void 0;
exports.useMemoryOptimization = useMemoryOptimization;
exports.usePartnerContentIntegration = usePartnerContentIntegration;
var _zustand = require("zustand");
var _middleware = require("zustand/middleware");
var _memoryMonitor = require("@/lib/performance/memoryMonitor");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
// Enhanced mock data generator for global feed development
var generateMockItem = function generateMockItem(index) {
  var types = ["itk", "terry", "partner", "breaking"];

  // Global sources with tier and region
  var sources = [{
    name: "Fabrizio Romano",
    handle: "@FabrizioRomano",
    tier: 1,
    reliability: 0.95,
    region: "GLOBAL"
  }, {
    name: "David Ornstein",
    handle: "@David_Ornstein",
    tier: 1,
    reliability: 0.93,
    region: "UK"
  }, {
    name: "Gianluca Di Marzio",
    handle: "@DiMarzio",
    tier: 1,
    reliability: 0.9,
    region: "IT"
  }, {
    name: "Marca",
    handle: "@marca",
    tier: 2,
    reliability: 0.82,
    region: "ES"
  }, {
    name: "L'Ã‰quipe",
    handle: "@lequipe",
    tier: 2,
    reliability: 0.85,
    region: "FR"
  }, {
    name: "Sky Sports",
    handle: "@SkySports",
    tier: 2,
    reliability: 0.8,
    region: "UK"
  }, {
    name: "ESPN Brasil",
    handle: "@ESPNBrasil",
    tier: 2,
    reliability: 0.78,
    region: "BR"
  }, {
    name: "Bild",
    handle: "@BILD",
    tier: 3,
    reliability: 0.75,
    region: "DE"
  }];

  // Global club coverage
  var clubs = ["Arsenal", "Chelsea", "Manchester United", "Liverpool", "Manchester City", "Tottenham", "Real Madrid", "Barcelona", "Atletico Madrid", "Sevilla", "Juventus", "AC Milan", "Inter Milan", "Napoli", "AS Roma", "Bayern Munich", "Borussia Dortmund", "RB Leipzig", "Bayer Leverkusen", "PSG", "Lyon", "Marseille", "Monaco", "Ajax", "PSV", "Feyenoord"];
  var players = ["Erling Haaland", "Kylian Mbappe", "Jude Bellingham", "Harry Kane", "Mohamed Salah", "Vinicius Jr", "Pedri", "Gavi", "Jamal Musiala", "Eduardo Camavinga", "Victor Osimhen", "Rafael Leao", "Khvicha Kvaratskhelia", "Dusan Vlahovic", "Bukayo Saka", "Phil Foden", "Florian Wirtz", "Youssoufa Moukoko"];
  var leagues = ["PL", "LaLiga", "SerieA", "Bundesliga", "Ligue1", "Other"];
  var transferTypes = ["signing", "rumour", "medical", "confirmed", "bid", "personal_terms"];
  var priorities = ["low", "medium", "high", "breaking"];
  var type = types[index % types.length];
  var source = sources[index % sources.length];
  var club = clubs[Math.floor(Math.random() * clubs.length)];
  var player = players[Math.floor(Math.random() * players.length)];
  var league = leagues[Math.floor(Math.random() * leagues.length)];

  // More realistic transfer content
  var contents = ["\uD83D\uDEA8 BREAKING: ".concat(club, " agree \u20AC").concat(Math.floor(Math.random() * 100 + 20), "m fee for ").concat(player, "! Medical scheduled for tomorrow."), "Personal terms agreed between ".concat(player, " and ").concat(club, ". Club-to-club negotiations ongoing for final fee structure."), "Sources close to ".concat(player, " confirm excitement about potential ").concat(club, " move. Agent in advanced discussions."), "".concat(club, " officials confident about completing ").concat(player, " signing within 48-72 hours."), "Medical planned for ".concat(player, " at ").concat(club, " training ground this week. Deal 90% complete."), "Payment structure still being negotiated between ".concat(club, " and selling club for ").concat(player, " transfer."), "".concat(player, " has already agreed personal terms with ").concat(club, ". Just waiting for clubs to finalize deal."), "Contract details being finalized by legal teams for ".concat(player, "'s move to ").concat(club, "."), "".concat(club, " preparing official announcement for ").concat(player, " signing following completed medical."), "CONFIRMED: ".concat(player, " joins ").concat(club, " on a ").concat(Math.floor(Math.random() * 5 + 2), "-year deal!")];
  var terryCommentaries = ["Right, ".concat(club, " spending \u20AC").concat(Math.floor(Math.random() * 100 + 20), "m on ").concat(player, " is either genius or the most expensive way to disappoint their fanbase."), "The medical's tomorrow which means we'll get 47 updates about ".concat(player, " breathing correctly and walking in a straight line."), "Personal terms agreed between ".concat(player, " and ").concat(club, ", which in football means they've successfully negotiated who pays for the fancy coffee machine."), "".concat(player, "'s agent is probably stuck in traffic somewhere questioning whether this profession was worth the stress."), "\"48 hours FC\" strikes again. In transfer speak, that's anywhere between now and the heat death of the universe.", "".concat(club, " are \"confident\" about signing ").concat(player, ". That's the same confidence I have about finding my car keys each morning."), "The medical at ".concat(club, "'s training ground will be more scrutinized than a space shuttle launch. Probably take longer too."), "Payment structure negotiations between clubs is just posh blokes arguing about who pays for what while ".concat(player, " packs his bags optimistically."), "Contract details being \"finalized\" is code for \"lawyers are about to make this unnecessarily complicated for everyone involved.\"", "CONFIRMED signings are like unicorns - beautiful when you finally see one, but you'd started doubting they actually existed."];
  var attributions = ["The Upshot - Football's finest chaos documented", "FourFourTwo - Where football history lives", "Football Ramble - Weekly mishaps and comedy gold", "The Athletic - Deep dives into transfer madness"];
  return {
    id: "feed-item-".concat(index, "-").concat(Date.now()),
    type: type,
    timestamp: new Date(Date.now() - Math.random() * 86400000 * 2),
    // Random time in last 48h
    content: contents[index % contents.length],
    terryCommentary: type === "terry" || Math.random() > 0.6 ? terryCommentaries[index % terryCommentaries.length] : undefined,
    source: source,
    tags: {
      clubs: [club],
      players: [player],
      sources: [source.name]
    },
    media: Math.random() > 0.7 ? {
      type: "image",
      url: "https://picsum.photos/800/400?random=".concat(index),
      altText: "".concat(player, " during training"),
      thumbnailUrl: "https://picsum.photos/200/120?random=".concat(index)
    } : undefined,
    engagement: {
      shares: Math.floor(Math.random() * 500),
      reactions: Math.floor(Math.random() * 1500),
      clicks: Math.floor(Math.random() * 2000)
    },
    metadata: {
      transferType: transferTypes[Math.floor(Math.random() * transferTypes.length)],
      priority: priorities[Math.floor(Math.random() * priorities.length)],
      relevanceScore: Math.random() * 0.4 + 0.6,
      // 0.6-1.0 range
      league: league,
      originalUrl: type === "partner" ? "https://example.com/article/".concat(index) : undefined,
      attribution: type === "partner" ? attributions[index % attributions.length] : undefined
    },
    isRead: Math.random() > 0.3,
    isNew: Math.random() > 0.8 // 20% chance of being new
  };
};

// Enhanced filter utility function
var _applyFilters = function applyFilters(items, filters) {
  return items.filter(function (item) {
    // Tag filtering (supports all tag types)
    if (filters.tags.length > 0) {
      var allItemTags = [].concat(_toConsumableArray(item.tags.clubs.map(function (tag) {
        return tag.toLowerCase();
      })), _toConsumableArray(item.tags.players.map(function (tag) {
        return tag.toLowerCase();
      })), _toConsumableArray(item.tags.sources.map(function (tag) {
        return tag.toLowerCase();
      })));
      var hasMatchingTag = filters.tags.some(function (filterTag) {
        return allItemTags.includes(filterTag.toLowerCase());
      });
      if (!hasMatchingTag) return false;
    }

    // Club-specific filtering
    if (filters.clubs && filters.clubs.length > 0) {
      var hasMatchingClub = filters.clubs.some(function (club) {
        return item.tags.clubs.some(function (itemClub) {
          return itemClub.toLowerCase().includes(club.toLowerCase());
        });
      });
      if (!hasMatchingClub) return false;
    }

    // Player-specific filtering
    if (filters.players && filters.players.length > 0) {
      var hasMatchingPlayer = filters.players.some(function (player) {
        return item.tags.players.some(function (itemPlayer) {
          return itemPlayer.toLowerCase().includes(player.toLowerCase());
        });
      });
      if (!hasMatchingPlayer) return false;
    }

    // Content type filtering
    if (filters.contentType && filters.contentType.length > 0) {
      if (!filters.contentType.includes(item.type)) return false;
    }

    // Source filtering
    if (filters.sources && filters.sources.length > 0) {
      var hasMatchingSource = filters.sources.some(function (source) {
        return item.tags.sources.some(function (itemSource) {
          return itemSource.toLowerCase().includes(source.toLowerCase());
        });
      });
      if (!hasMatchingSource) return false;
    }

    // League filtering
    if (filters.leagues && filters.leagues.length > 0) {
      if (!item.metadata.league || !filters.leagues.includes(item.metadata.league)) {
        return false;
      }
    }

    // Time range filtering
    if (filters.timeRange) {
      var now = new Date();
      var itemDate = new Date(item.timestamp);
      switch (filters.timeRange) {
        case "today":
          if (itemDate.toDateString() !== now.toDateString()) return false;
          break;
        case "week":
          var weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          if (itemDate < weekAgo) return false;
          break;
        case "month":
          var monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
          if (itemDate < monthAgo) return false;
          break;
        case "transfer_window":
          // Transfer windows: July 1 - Aug 31, Jan 1 - Jan 31
          var month = now.getMonth() + 1;
          var itemMonth = itemDate.getMonth() + 1;
          var isTransferWindow = month >= 7 && month <= 8 || month === 1;
          var isItemInWindow = itemMonth >= 7 && itemMonth <= 8 || itemMonth === 1;
          if (!isTransferWindow || !isItemInWindow) return false;
          break;
      }
    }

    // Priority filtering
    if (filters.priority && filters.priority.length > 0) {
      if (!filters.priority.includes(item.metadata.priority)) return false;
    }
    return true;
  });
};
var useFeedStore = exports.useFeedStore = (0, _zustand.create)()((0, _middleware.devtools)((0, _middleware.subscribeWithSelector)(function (set, get) {
  return {
    // Initial state
    items: [],
    filteredItems: [],
    hasMore: true,
    isLoading: false,
    isLoadingMore: false,
    lastUpdated: null,
    totalItems: 0,
    // Real-time updates
    isConnected: false,
    pendingUpdates: [],
    unreadCount: 0,
    // Filtering and search
    activeFilters: {
      tags: []
    },
    isFiltering: false,
    // UI state
    scrollPosition: 0,
    selectedItemId: null,
    viewMode: "infinite",
    // Memory management
    memoryUsageMB: 0,
    maxItems: 1000,
    // Error handling
    error: null,
    retryCount: 0,
    // Enhanced data loading actions
    loadItems: function () {
      var _loadItems = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(count) {
        var startTime, _data$pagination, _data$pagination2, _get, items, activeFilters, response, data, newItems, memoryMetrics, currentMemoryMB, status, processedItems, loadTime, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              startTime = performance.now();
              console.log("[feedStore] loadItems called with count: ".concat(count));
              set({
                isLoading: true,
                error: null
              });
              _context.p = 1;
              _get = get(), items = _get.items, activeFilters = _get.activeFilters; // Fetch from real API
              console.log("[feedStore] Fetching from /api/feed?limit=".concat(count, "&offset=0"));
              _context.n = 2;
              return fetch("/api/feed?limit=".concat(count, "&offset=0"));
            case 2:
              response = _context.v;
              if (response.ok) {
                _context.n = 3;
                break;
              }
              throw new Error("API responded with ".concat(response.status));
            case 3:
              _context.n = 4;
              return response.json();
            case 4:
              data = _context.v;
              if (data.success) {
                _context.n = 5;
                break;
              }
              throw new Error(data.error || "Failed to fetch feed data");
            case 5:
              newItems = data.data || [];
              memoryMetrics = (0, _memoryMonitor.getMemoryMetrics)();
              currentMemoryMB = (memoryMetrics === null || memoryMetrics === void 0 ? void 0 : memoryMetrics.usedMB) || 0;
              if (memoryMetrics && currentMemoryMB > 90) {
                status = (0, _memoryMonitor.checkMemoryThresholds)(memoryMetrics);
                if (status.shouldCleanup) {
                  get().optimizeMemory();
                }
              }

              // Ensure items have proper date objects
              processedItems = newItems.map(function (item) {
                return _objectSpread(_objectSpread({}, item), {}, {
                  timestamp: new Date(item.timestamp)
                });
              });
              set({
                items: processedItems,
                filteredItems: _applyFilters(processedItems, activeFilters),
                hasMore: ((_data$pagination = data.pagination) === null || _data$pagination === void 0 ? void 0 : _data$pagination.hasMore) || false,
                totalItems: ((_data$pagination2 = data.pagination) === null || _data$pagination2 === void 0 ? void 0 : _data$pagination2.total) || processedItems.length,
                lastUpdated: new Date(),
                isLoading: false,
                memoryUsageMB: currentMemoryMB,
                retryCount: 0
              });
              loadTime = performance.now() - startTime;
              console.log("Loaded ".concat(newItems.length, " items from API in ").concat(loadTime.toFixed(2), "ms"));
              _context.n = 7;
              break;
            case 6:
              _context.p = 6;
              _t = _context.v;
              console.error("Failed to load feed items:", _t);
              set({
                error: _t instanceof Error ? _t.message : "Failed to load items",
                isLoading: false
              });
            case 7:
              return _context.a(2);
          }
        }, _callee, null, [[1, 6]]);
      }));
      function loadItems(_x) {
        return _loadItems.apply(this, arguments);
      }
      return loadItems;
    }(),
    loadMoreItems: function () {
      var _loadMoreItems = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(offset) {
        var _data$pagination3, _data$pagination4, _get2, items, activeFilters, response, data, newItems, processedNewItems, allItems, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              if (!(get().isLoadingMore || !get().hasMore)) {
                _context2.n = 1;
                break;
              }
              return _context2.a(2);
            case 1:
              set({
                isLoadingMore: true,
                error: null
              });
              _context2.p = 2;
              _get2 = get(), items = _get2.items, activeFilters = _get2.activeFilters; // Fetch more items from API
              _context2.n = 3;
              return fetch("/api/feed?limit=20&offset=".concat(offset));
            case 3:
              response = _context2.v;
              if (response.ok) {
                _context2.n = 4;
                break;
              }
              throw new Error("API responded with ".concat(response.status));
            case 4:
              _context2.n = 5;
              return response.json();
            case 5:
              data = _context2.v;
              if (data.success) {
                _context2.n = 6;
                break;
              }
              throw new Error(data.error || "Failed to fetch more feed data");
            case 6:
              newItems = data.data || []; // Ensure items have proper date objects
              processedNewItems = newItems.map(function (item) {
                return _objectSpread(_objectSpread({}, item), {}, {
                  timestamp: new Date(item.timestamp)
                });
              });
              allItems = [].concat(_toConsumableArray(items), _toConsumableArray(processedNewItems));
              set({
                items: allItems,
                filteredItems: _applyFilters(allItems, activeFilters),
                hasMore: ((_data$pagination3 = data.pagination) === null || _data$pagination3 === void 0 ? void 0 : _data$pagination3.hasMore) || false,
                totalItems: ((_data$pagination4 = data.pagination) === null || _data$pagination4 === void 0 ? void 0 : _data$pagination4.total) || allItems.length,
                isLoadingMore: false,
                retryCount: 0
              });
              console.log("Loaded ".concat(newItems.length, " more items from API"));
              _context2.n = 8;
              break;
            case 7:
              _context2.p = 7;
              _t2 = _context2.v;
              console.error("Failed to load more feed items:", _t2);
              set({
                error: _t2 instanceof Error ? _t2.message : "Failed to load more items",
                isLoadingMore: false
              });
            case 8:
              return _context2.a(2);
          }
        }, _callee2, null, [[2, 7]]);
      }));
      function loadMoreItems(_x2) {
        return _loadMoreItems.apply(this, arguments);
      }
      return loadMoreItems;
    }(),
    refreshFeed: function () {
      var _refreshFeed = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {
        var _get3, loadItems;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              _get3 = get(), loadItems = _get3.loadItems;
              set({
                items: [],
                filteredItems: []
              });
              _context3.n = 1;
              return loadItems(50);
            case 1:
              return _context3.a(2);
          }
        }, _callee3);
      }));
      function refreshFeed() {
        return _refreshFeed.apply(this, arguments);
      }
      return refreshFeed;
    }(),
    // Enhanced real-time update actions
    addItem: function addItem(newItem) {
      var _get4 = get(),
        items = _get4.items,
        activeFilters = _get4.activeFilters,
        pendingUpdates = _get4.pendingUpdates,
        maxItems = _get4.maxItems;

      // Check if item already exists
      var exists = items.some(function (item) {
        return item.id === newItem.id;
      });
      if (exists) return;

      // Mark as new and add to pending updates
      var itemWithNewFlag = _objectSpread(_objectSpread({}, newItem), {}, {
        isNew: true
      });
      var updatedPendingUpdates = [itemWithNewFlag].concat(_toConsumableArray(pendingUpdates));

      // Add to main feed (insert at beginning for recency)
      var updatedItems = [itemWithNewFlag].concat(_toConsumableArray(items));
      if (updatedItems.length > maxItems) {
        updatedItems = updatedItems.slice(0, maxItems);
      }
      var memoryMetrics = (0, _memoryMonitor.getMemoryMetrics)();
      var currentMemoryMB = (memoryMetrics === null || memoryMetrics === void 0 ? void 0 : memoryMetrics.usedMB) || 0;
      set({
        items: updatedItems,
        filteredItems: _applyFilters(updatedItems, activeFilters),
        pendingUpdates: updatedPendingUpdates,
        unreadCount: get().unreadCount + 1,
        lastUpdated: new Date(),
        memoryUsageMB: currentMemoryMB
      });
    },
    markUpdatesAsRead: function markUpdatesAsRead() {
      var _get5 = get(),
        items = _get5.items;
      var updatedItems = items.map(function (item) {
        return _objectSpread(_objectSpread({}, item), {}, {
          isNew: false,
          isRead: true
        });
      });
      set({
        items: updatedItems,
        filteredItems: _applyFilters(updatedItems, get().activeFilters),
        pendingUpdates: [],
        unreadCount: 0
      });
    },
    setConnectionStatus: function setConnectionStatus(connected) {
      set({
        isConnected: connected
      });
    },
    // Enhanced filtering actions
    setFilter: function setFilter(tag) {
      var _get6 = get(),
        activeFilters = _get6.activeFilters;
      var newTags = activeFilters.tags.includes(tag) ? activeFilters.tags.filter(function (f) {
        return f !== tag;
      }) : [].concat(_toConsumableArray(activeFilters.tags), [tag]);
      var updatedFilters = _objectSpread(_objectSpread({}, activeFilters), {}, {
        tags: newTags
      });
      var _get7 = get(),
        items = _get7.items;
      set({
        activeFilters: updatedFilters,
        filteredItems: _applyFilters(items, updatedFilters),
        isFiltering: Object.values(updatedFilters).some(function (value) {
          return Array.isArray(value) ? value.length > 0 : value !== undefined;
        })
      });
    },
    setActiveFilters: function setActiveFilters(newFilters) {
      var updatedFilters = _objectSpread(_objectSpread({}, get().activeFilters), newFilters);
      var _get8 = get(),
        items = _get8.items;
      set({
        activeFilters: updatedFilters,
        filteredItems: _applyFilters(items, updatedFilters),
        isFiltering: Object.values(updatedFilters).some(function (value) {
          return Array.isArray(value) ? value.length > 0 : value !== undefined;
        })
      });
    },
    clearFilters: function clearFilters() {
      var defaultFilters = {
        tags: []
      };
      var _get9 = get(),
        items = _get9.items;
      set({
        activeFilters: defaultFilters,
        filteredItems: items,
        isFiltering: false
      });
    },
    addTagFilter: function addTagFilter(tag, type) {
      var _get0 = get(),
        activeFilters = _get0.activeFilters;
      if (type === "club") {
        var updatedFilters = _objectSpread(_objectSpread({}, activeFilters), {}, {
          clubs: [].concat(_toConsumableArray(activeFilters.clubs || []), [tag])
        });
        get().setActiveFilters(updatedFilters);
      } else if (type === "player") {
        var _updatedFilters = _objectSpread(_objectSpread({}, activeFilters), {}, {
          players: [].concat(_toConsumableArray(activeFilters.players || []), [tag])
        });
        get().setActiveFilters(_updatedFilters);
      } else if (type === "source") {
        var _updatedFilters2 = _objectSpread(_objectSpread({}, activeFilters), {}, {
          sources: [].concat(_toConsumableArray(activeFilters.sources || []), [tag])
        });
        get().setActiveFilters(_updatedFilters2);
      } else {
        // Default to general tags
        if (!activeFilters.tags.includes(tag)) {
          var _updatedFilters3 = _objectSpread(_objectSpread({}, activeFilters), {}, {
            tags: [].concat(_toConsumableArray(activeFilters.tags), [tag])
          });
          get().setActiveFilters(_updatedFilters3);
        }
      }
    },
    removeTagFilter: function removeTagFilter(tag) {
      var _activeFilters$clubs, _activeFilters$player, _activeFilters$source;
      var _get1 = get(),
        activeFilters = _get1.activeFilters;
      var updatedFilters = _objectSpread(_objectSpread({}, activeFilters), {}, {
        tags: activeFilters.tags.filter(function (t) {
          return t !== tag;
        }),
        clubs: ((_activeFilters$clubs = activeFilters.clubs) === null || _activeFilters$clubs === void 0 ? void 0 : _activeFilters$clubs.filter(function (c) {
          return c !== tag;
        })) || [],
        players: ((_activeFilters$player = activeFilters.players) === null || _activeFilters$player === void 0 ? void 0 : _activeFilters$player.filter(function (p) {
          return p !== tag;
        })) || [],
        sources: ((_activeFilters$source = activeFilters.sources) === null || _activeFilters$source === void 0 ? void 0 : _activeFilters$source.filter(function (s) {
          return s !== tag;
        })) || []
      });
      get().setActiveFilters(updatedFilters);
    },
    applyFilters: function applyFilters() {
      var _get10 = get(),
        items = _get10.items,
        activeFilters = _get10.activeFilters;
      set({
        filteredItems: _applyFilters(items, activeFilters),
        isFiltering: Object.values(activeFilters).some(function (value) {
          return Array.isArray(value) ? value.length > 0 : value !== undefined;
        })
      });
    },
    // Enhanced UI interaction actions
    setScrollPosition: function setScrollPosition(position) {
      set({
        scrollPosition: position
      });
    },
    setSelectedItem: function setSelectedItem(itemId) {
      set({
        selectedItemId: itemId
      });
    },
    setViewMode: function setViewMode(mode) {
      set({
        viewMode: mode
      });
    },
    // Enhanced analytics and discovery
    getTrendingTags: function getTrendingTags(limit) {
      var _get11 = get(),
        items = _get11.items;
      var tagCounts = new Map();
      items.forEach(function (item) {
        [].concat(_toConsumableArray(item.tags.clubs), _toConsumableArray(item.tags.players), _toConsumableArray(item.tags.sources)).forEach(function (tag) {
          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
        });
      });
      return Array.from(tagCounts.entries()).sort(function (_ref, _ref2) {
        var _ref3 = _slicedToArray(_ref, 2),
          a = _ref3[1];
        var _ref4 = _slicedToArray(_ref2, 2),
          b = _ref4[1];
        return b - a;
      }).slice(0, limit).map(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
          tag = _ref6[0];
        return tag;
      });
    },
    getRelatedTags: function getRelatedTags(tag) {
      var _get12 = get(),
        items = _get12.items;
      var relatedTags = new Map();

      // Find items that contain the given tag
      var relatedItems = items.filter(function (item) {
        return [].concat(_toConsumableArray(item.tags.clubs), _toConsumableArray(item.tags.players), _toConsumableArray(item.tags.sources)).some(function (itemTag) {
          return itemTag.toLowerCase().includes(tag.toLowerCase());
        });
      });

      // Count other tags that appear with the given tag
      relatedItems.forEach(function (item) {
        [].concat(_toConsumableArray(item.tags.clubs), _toConsumableArray(item.tags.players), _toConsumableArray(item.tags.sources)).forEach(function (relatedTag) {
          if (relatedTag.toLowerCase() !== tag.toLowerCase()) {
            relatedTags.set(relatedTag, (relatedTags.get(relatedTag) || 0) + 1);
          }
        });
      });
      return Array.from(relatedTags.entries()).sort(function (_ref7, _ref8) {
        var _ref9 = _slicedToArray(_ref7, 2),
          a = _ref9[1];
        var _ref0 = _slicedToArray(_ref8, 2),
          b = _ref0[1];
        return b - a;
      }).slice(0, 5).map(function (_ref1) {
        var _ref10 = _slicedToArray(_ref1, 1),
          relatedTag = _ref10[0];
        return relatedTag;
      });
    },
    trackEngagement: function trackEngagement(itemId, action) {
      var _get13 = get(),
        items = _get13.items;
      var updatedItems = items.map(function (item) {
        if (item.id === itemId && item.engagement) {
          var updatedEngagement = _objectSpread({}, item.engagement);
          switch (action) {
            case "click":
              updatedEngagement.clicks += 1;
              break;
            case "share":
              updatedEngagement.shares += 1;
              break;
            case "react":
              updatedEngagement.reactions += 1;
              break;
          }
          return _objectSpread(_objectSpread({}, item), {}, {
            engagement: updatedEngagement
          });
        }
        return item;
      });
      set({
        items: updatedItems,
        filteredItems: _applyFilters(updatedItems, get().activeFilters)
      });
    },
    // Enhanced memory and performance actions
    optimizeMemory: function optimizeMemory() {
      var _get14 = get(),
        items = _get14.items,
        maxItems = _get14.maxItems,
        activeFilters = _get14.activeFilters;
      var safeItemCount = Math.floor(maxItems * 0.8);
      if (items.length > safeItemCount) {
        var optimizedItems = items.slice(0, safeItemCount);
        if (typeof window !== "undefined" && window.gc) {
          try {
            window.gc();
          } catch (e) {
            // Ignore GC errors
          }
        }
        var memoryMetrics = (0, _memoryMonitor.getMemoryMetrics)();
        var currentMemoryMB = (memoryMetrics === null || memoryMetrics === void 0 ? void 0 : memoryMetrics.usedMB) || 0;
        set({
          items: optimizedItems,
          filteredItems: _applyFilters(optimizedItems, activeFilters),
          memoryUsageMB: currentMemoryMB
        });
        console.log("Memory optimization: Reduced items from ".concat(items.length, " to ").concat(optimizedItems.length));
      }
    },
    getMemoryStats: function getMemoryStats() {
      var _get15 = get(),
        items = _get15.items,
        memoryUsageMB = _get15.memoryUsageMB;
      var totalSize = items.reduce(function (acc, item) {
        return acc + _memoryMonitor.MemoryOptimizer.estimateObjectSize(item);
      }, 0);
      var avgItemSize = items.length > 0 ? totalSize / items.length : 0;
      return {
        usageMB: memoryUsageMB,
        itemCount: items.length,
        avgItemSize: Math.round(avgItemSize)
      };
    },
    // Enhanced error handling actions
    setError: function setError(error) {
      set({
        error: error
      });
    },
    incrementRetryCount: function incrementRetryCount() {
      set({
        retryCount: get().retryCount + 1
      });
    },
    resetRetryCount: function resetRetryCount() {
      set({
        retryCount: 0
      });
    }
  };
}), {
  name: "transfer-juice-feed"
}));

// Performance-optimized selectors
var selectFilteredItems = exports.selectFilteredItems = function selectFilteredItems(state) {
  return state.filteredItems;
};
var selectIsLoading = exports.selectIsLoading = function selectIsLoading(state) {
  return state.isLoading;
};
var selectIsLoadingMore = exports.selectIsLoadingMore = function selectIsLoadingMore(state) {
  return state.isLoadingMore;
};
var selectHasUnreadUpdates = exports.selectHasUnreadUpdates = function selectHasUnreadUpdates(state) {
  return state.unreadCount > 0;
};
var selectActiveFilters = exports.selectActiveFilters = function selectActiveFilters(state) {
  return state.activeFilters;
};
var selectConnectionStatus = exports.selectConnectionStatus = function selectConnectionStatus(state) {
  return state.isConnected;
};
var selectIsFiltering = exports.selectIsFiltering = function selectIsFiltering(state) {
  return state.isFiltering;
};
var selectTotalItems = exports.selectTotalItems = function selectTotalItems(state) {
  return state.totalItems;
};
var selectHasMore = exports.selectHasMore = function selectHasMore(state) {
  return state.hasMore;
};
var selectError = exports.selectError = function selectError(state) {
  return state.error;
};
var selectLastUpdated = exports.selectLastUpdated = function selectLastUpdated(state) {
  return state.lastUpdated;
};
var selectScrollPosition = exports.selectScrollPosition = function selectScrollPosition(state) {
  return state.scrollPosition;
};
var selectSelectedItem = exports.selectSelectedItem = function selectSelectedItem(state) {
  return state.selectedItemId;
};
var selectViewMode = exports.selectViewMode = function selectViewMode(state) {
  return state.viewMode;
};
var selectUnreadCount = exports.selectUnreadCount = function selectUnreadCount(state) {
  return state.unreadCount;
};
var selectMemoryStats = exports.selectMemoryStats = function selectMemoryStats(state) {
  return {
    usageMB: state.memoryUsageMB,
    itemCount: state.items.length,
    maxItems: state.maxItems
  };
};

// Compound selectors for common use cases
var selectFeedStatus = exports.selectFeedStatus = function selectFeedStatus(state) {
  return {
    isLoading: state.isLoading,
    isLoadingMore: state.isLoadingMore,
    hasMore: state.hasMore,
    error: state.error,
    isConnected: state.isConnected
  };
};
var selectFilterStatus = exports.selectFilterStatus = function selectFilterStatus(state) {
  return {
    activeFilters: state.activeFilters,
    isFiltering: state.isFiltering,
    filteredCount: state.filteredItems.length,
    totalCount: state.items.length
  };
};
var selectRealtimeStatus = exports.selectRealtimeStatus = function selectRealtimeStatus(state) {
  return {
    isConnected: state.isConnected,
    unreadCount: state.unreadCount,
    pendingUpdates: state.pendingUpdates.length,
    lastUpdated: state.lastUpdated
  };
};

// Partner content selectors
var selectPartnerContent = exports.selectPartnerContent = function selectPartnerContent(state) {
  return {
    partnerItems: state.items.filter(function (item) {
      return item.type === "partner";
    }),
    partnerCount: state.items.filter(function (item) {
      return item.type === "partner";
    }).length,
    partnerRatio: state.items.length > 0 ? state.items.filter(function (item) {
      return item.type === "partner";
    }).length / state.items.length : 0
  };
};

// Memory optimization hook
function useMemoryOptimization() {
  var _useFeedStore = useFeedStore(),
    optimizeMemory = _useFeedStore.optimizeMemory,
    getMemoryStats = _useFeedStore.getMemoryStats;
  return {
    optimizeMemory: optimizeMemory,
    getMemoryStats: getMemoryStats
  };
}

// Partner content integration hook
function usePartnerContentIntegration() {
  var _useFeedStore2 = useFeedStore(),
    items = _useFeedStore2.items,
    addItem = _useFeedStore2.addItem;
  var getPartnerContentRatio = function getPartnerContentRatio() {
    var partnerCount = items.filter(function (item) {
      return item.type === "partner";
    }).length;
    return items.length > 0 ? partnerCount / items.length : 0;
  };
  var getRecentPartnerContent = function getRecentPartnerContent() {
    var hours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 24;
    var cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);
    return items.filter(function (item) {
      return item.type === "partner" && new Date(item.timestamp) >= cutoff;
    });
  };
  var addPartnerContent = function addPartnerContent(partnerItem) {
    if (partnerItem.type !== "partner") {
      console.warn("Attempted to add non-partner content via partner integration");
      return;
    }
    addItem(partnerItem);
  };
  return {
    getPartnerContentRatio: getPartnerContentRatio,
    getRecentPartnerContent: getRecentPartnerContent,
    addPartnerContent: addPartnerContent,
    partnerContentCount: items.filter(function (item) {
      return item.type === "partner";
    }).length
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,