/**
 * Rich Media Briefing Layout
 * OneFootball-style article layout with enhanced media and data visualization
 */

import React from "react";
import Image from "next/image";
import Link from "next/link";
import { format } from "date-fns";
import { TweetEmbed } from "@/components/media/TweetEmbed";
import { PlayerCard, PlayerCardCompact } from "@/components/media/PlayerCard";
import { EnrichedTweet } from "@/lib/enrichment/contentEnrichmentOrchestrator";
import { StoryImages } from "@/briefing-generator/steps/06a-fetch-enhanced-images";
import { PlayerStats } from "@/lib/enrichment/playerStatsService";
import { ClubContext } from "@/lib/enrichment/clubContextService";
import { TransferContext } from "@/lib/enrichment/transferHistoryService";

interface RichMediaBriefingProps {
  title: string;
  timestamp: Date;
  summary: string;
  content: string; // The main article content from Terry AI
  enrichedTweets: EnrichedTweet[];
  images: StoryImages[];
  relatedBriefings?: Array<{
    id: string;
    title: string;
    slug: string;
    timestamp: Date;
    image?: string;
  }>;
  theme?: "light" | "dark";
}

export function RichMediaBriefingLayout({
  title,
  timestamp,
  summary,
  content,
  enrichedTweets,
  images,
  relatedBriefings,
  theme = "dark",
}: RichMediaBriefingProps) {
  const bgColor = theme === "dark" ? "bg-zinc-950" : "bg-gray-50";
  const textColor = theme === "dark" ? "text-white" : "text-gray-900";
  const mutedColor = theme === "dark" ? "text-zinc-400" : "text-gray-600";
  const borderColor = theme === "dark" ? "border-zinc-800" : "border-gray-200";

  // Find the main story data
  const mainStory = enrichedTweets[0];
  const mainImages = images.find((img) => img.tweetId === mainStory?.id);
  const mainPlayer = mainStory?.storyElements.mainPlayer;
  const mainPlayerStats = mainPlayer
    ? mainStory.enrichment.players.get(mainPlayer)
    : null;
  const [fromClub, toClub] = mainStory?.storyElements.mainClubs || [];
  const fromClubContext = fromClub
    ? mainStory?.enrichment.clubs.get(fromClub)
    : null;
  const toClubContext = toClub ? mainStory?.enrichment.clubs.get(toClub) : null;

  // Parse content into sections for rich formatting
  const sections = parseContentIntoSections(content);

  return (
    <article className={`${bgColor} min-h-screen`}>
      {/* Hero Section */}
      <div className="relative h-[70vh] min-h-[600px] overflow-hidden">
        {/* Hero Image */}
        {mainImages?.player?.url ? (
          <Image
            src={mainImages.player.url}
            alt={mainPlayer || "Transfer story"}
            fill
            className="object-cover"
            priority
          />
        ) : (
          <div className="absolute inset-0 bg-gradient-to-br from-orange-600 via-purple-600 to-blue-600" />
        )}

        {/* Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent" />

        {/* Hero Content */}
        <div className="absolute bottom-0 left-0 right-0 p-8 md:p-12">
          <div className="max-w-5xl mx-auto">
            {/* Meta Info */}
            <div className="flex items-center gap-4 mb-4">
              <span className="bg-orange-500 text-white px-3 py-1 rounded-full text-sm font-bold">
                Breaking
              </span>
              <time className="text-white/80 text-sm">
                {format(timestamp, "MMM d, yyyy • h:mm a")}
              </time>
            </div>

            {/* Title */}
            <h1 className="text-4xl md:text-6xl font-black text-white mb-4 leading-tight">
              {title}
            </h1>

            {/* Summary */}
            <p className="text-xl text-white/90 max-w-3xl">{summary}</p>

            {/* Transfer Badge */}
            {mainStory?.entities.fee && (
              <div className="mt-6 inline-flex items-center gap-3 bg-white/10 backdrop-blur-md rounded-lg px-4 py-2">
                <span className="text-white/80">Transfer Fee:</span>
                <span className="text-2xl font-bold text-white">
                  €{mainStory.entities.fee.amount}M
                </span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-5xl mx-auto px-4 md:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Article Content */}
          <div className="lg:col-span-2">
            {sections.map((section, index) => (
              <React.Fragment key={index}>
                {renderSection(section, {
                  enrichedTweets,
                  images,
                  theme,
                  textColor,
                  mutedColor,
                  borderColor,
                })}

                {/* Insert rich media elements at strategic points */}
                {index === 1 && mainStory && (
                  <div className="my-8">
                    <TweetEmbed
                      author={{
                        name: mainStory.author || "ITK Source",
                        handle:
                          mainStory.author?.toLowerCase().replace(/\s/g, "") ||
                          "itk",
                        tier: mainStory.tier,
                        verified: mainStory.tier <= 2,
                      }}
                      content={mainStory.originalContent}
                      timestamp={new Date()}
                      theme={theme}
                    />
                  </div>
                )}

                {index === 3 && mainPlayerStats && (
                  <div className="my-8">
                    <PlayerCard
                      stats={mainPlayerStats}
                      imageUrl={mainImages?.player?.url}
                      showFullStats={true}
                      theme={theme}
                      layout="horizontal"
                    />
                  </div>
                )}
              </React.Fragment>
            ))}

            {/* Transfer Timeline */}
            {mainStory && (
              <TransferTimeline
                stage={mainStory.entities.stage}
                theme={theme}
                textColor={textColor}
                mutedColor={mutedColor}
              />
            )}

            {/* Additional Players */}
            {mainImages?.additionalPlayers &&
              mainImages.additionalPlayers.size > 0 && (
                <div className="mt-12">
                  <h3 className={`text-2xl font-bold ${textColor} mb-6`}>
                    Other Players Mentioned
                  </h3>
                  <div className="space-y-3">
                    {Array.from(mainImages.additionalPlayers.entries()).map(
                      ([name, image]) => {
                        const stats =
                          enrichedTweets[0]?.enrichment.players.get(name);
                        if (!stats) return null;

                        return (
                          <PlayerCardCompact
                            key={name}
                            name={stats.player.name}
                            position={stats.player.position}
                            club={stats.player.currentClub}
                            value={stats.player.marketValue}
                            imageUrl={image.url}
                            theme={theme}
                          />
                        );
                      },
                    )}
                  </div>
                </div>
              )}
          </div>

          {/* Sidebar */}
          <div className="lg:col-span-1">
            {/* Club Context Cards */}
            <div className="space-y-6 sticky top-8">
              {fromClubContext && (
                <ClubContextCard
                  club={fromClub}
                  context={fromClubContext}
                  badge={mainImages?.fromClubBadge}
                  type="selling"
                  theme={theme}
                  textColor={textColor}
                  mutedColor={mutedColor}
                  borderColor={borderColor}
                />
              )}

              {toClubContext && (
                <ClubContextCard
                  club={toClub}
                  context={toClubContext}
                  badge={mainImages?.toClubBadge}
                  type="buying"
                  theme={theme}
                  textColor={textColor}
                  mutedColor={mutedColor}
                  borderColor={borderColor}
                />
              )}

              {/* Transfer Market Context */}
              {mainStory?.enrichment.transferContext && (
                <TransferMarketCard
                  context={mainStory.enrichment.transferContext}
                  theme={theme}
                  textColor={textColor}
                  mutedColor={mutedColor}
                  borderColor={borderColor}
                />
              )}

              {/* Related Stories */}
              {relatedBriefings && relatedBriefings.length > 0 && (
                <div
                  className={`${theme === "dark" ? "bg-zinc-900" : "bg-white"} rounded-xl p-6 ${borderColor} border`}
                >
                  <h3 className={`text-lg font-bold ${textColor} mb-4`}>
                    Related Stories
                  </h3>
                  <div className="space-y-3">
                    {relatedBriefings.slice(0, 3).map((briefing) => (
                      <Link
                        key={briefing.id}
                        href={`/briefings/${briefing.slug}`}
                        className="block group"
                      >
                        <div className="flex gap-3">
                          {briefing.image && (
                            <div className="relative w-16 h-16 flex-shrink-0 rounded-lg overflow-hidden">
                              <Image
                                src={briefing.image}
                                alt={briefing.title}
                                fill
                                className="object-cover group-hover:scale-105 transition-transform"
                              />
                            </div>
                          )}
                          <div className="flex-1 min-w-0">
                            <h4
                              className={`${textColor} font-semibold text-sm line-clamp-2 group-hover:text-orange-500 transition-colors`}
                            >
                              {briefing.title}
                            </h4>
                            <time className={`${mutedColor} text-xs`}>
                              {format(briefing.timestamp, "MMM d")}
                            </time>
                          </div>
                        </div>
                      </Link>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Bottom Share Section */}
      <div className={`border-t ${borderColor} mt-16`}>
        <div className="max-w-5xl mx-auto px-4 md:px-8 py-8">
          <div className="flex items-center justify-between">
            <div>
              <h3 className={`text-lg font-bold ${textColor} mb-1`}>
                Share this story
              </h3>
              <p className={`${mutedColor} text-sm`}>
                Get the latest transfer news delivered to your inbox
              </p>
            </div>
            <div className="flex gap-3">
              <ShareButton platform="twitter" theme={theme} />
              <ShareButton platform="facebook" theme={theme} />
              <ShareButton platform="whatsapp" theme={theme} />
              <ShareButton platform="copy" theme={theme} />
            </div>
          </div>
        </div>
      </div>
    </article>
  );
}

/**
 * Parse content into sections for rich formatting
 */
function parseContentIntoSections(content: string): Array<{
  type: "heading" | "paragraph" | "quote" | "stats";
  content: string;
}> {
  const lines = content.split("\n");
  const sections: Array<{
    type: "heading" | "paragraph" | "quote" | "stats";
    content: string;
  }> = [];

  let currentParagraph = "";

  for (const line of lines) {
    const trimmed = line.trim();

    if (!trimmed) {
      if (currentParagraph) {
        sections.push({ type: "paragraph", content: currentParagraph });
        currentParagraph = "";
      }
      continue;
    }

    // Detect headings (lines that are all caps or end with colon)
    if (trimmed.match(/^[A-Z\s]+:?$/) || trimmed.endsWith(":")) {
      if (currentParagraph) {
        sections.push({ type: "paragraph", content: currentParagraph });
        currentParagraph = "";
      }
      sections.push({ type: "heading", content: trimmed });
    }
    // Detect quotes
    else if (trimmed.startsWith('"') || trimmed.startsWith('"')) {
      if (currentParagraph) {
        sections.push({ type: "paragraph", content: currentParagraph });
        currentParagraph = "";
      }
      sections.push({ type: "quote", content: trimmed });
    }
    // Detect stats lines
    else if (
      trimmed.match(/^\d+.*[-–]\s*\d+/) ||
      trimmed.includes("€") ||
      trimmed.match(/\d+%/)
    ) {
      if (currentParagraph) {
        sections.push({ type: "paragraph", content: currentParagraph });
        currentParagraph = "";
      }
      sections.push({ type: "stats", content: trimmed });
    }
    // Regular paragraph
    else {
      currentParagraph += (currentParagraph ? " " : "") + trimmed;
    }
  }

  if (currentParagraph) {
    sections.push({ type: "paragraph", content: currentParagraph });
  }

  return sections;
}

/**
 * Render a content section with appropriate styling
 */
function renderSection(
  section: { type: string; content: string },
  context: {
    enrichedTweets: EnrichedTweet[];
    images: StoryImages[];
    theme: "light" | "dark";
    textColor: string;
    mutedColor: string;
    borderColor: string;
  },
) {
  const { theme, textColor, mutedColor, borderColor } = context;

  switch (section.type) {
    case "heading":
      return (
        <h2 className={`text-2xl font-bold ${textColor} mt-8 mb-4`}>
          {section.content}
        </h2>
      );

    case "paragraph":
      return (
        <p className={`${textColor} text-lg leading-relaxed mb-6`}>
          {section.content}
        </p>
      );

    case "quote":
      return (
        <blockquote
          className={`border-l-4 border-orange-500 pl-6 my-6 ${mutedColor} italic text-lg`}
        >
          {section.content}
        </blockquote>
      );

    case "stats":
      return (
        <div
          className={`${theme === "dark" ? "bg-zinc-900" : "bg-gray-100"} rounded-lg p-4 my-6 ${textColor} font-mono text-sm`}
        >
          {section.content}
        </div>
      );

    default:
      return null;
  }
}

/**
 * Transfer timeline visualization
 */
function TransferTimeline({
  stage,
  theme,
  textColor,
  mutedColor,
}: {
  stage: string;
  theme: "light" | "dark";
  textColor: string;
  mutedColor: string;
}) {
  const stages = [
    { id: "rumor", label: "Rumor", icon: "💭" },
    { id: "interest", label: "Interest", icon: "👀" },
    { id: "negotiation", label: "Talks", icon: "🤝" },
    { id: "agreed", label: "Agreed", icon: "✅" },
    { id: "medical", label: "Medical", icon: "🏥" },
    { id: "completed", label: "Done", icon: "🎉" },
  ];

  const currentIndex = stages.findIndex((s) => s.id === stage);

  return (
    <div className="my-12">
      <h3 className={`text-xl font-bold ${textColor} mb-6`}>
        Transfer Progress
      </h3>
      <div className="relative">
        <div className="absolute top-5 left-0 right-0 h-0.5 bg-zinc-800"></div>
        <div className="relative flex justify-between">
          {stages.map((s, index) => {
            const isActive = index <= currentIndex;
            const isCurrent = index === currentIndex;

            return (
              <div key={s.id} className="flex flex-col items-center">
                <div
                  className={`relative z-10 w-10 h-10 rounded-full flex items-center justify-center text-lg ${
                    isActive
                      ? isCurrent
                        ? "bg-orange-500 text-white"
                        : "bg-green-500 text-white"
                      : theme === "dark"
                        ? "bg-zinc-800 text-zinc-600"
                        : "bg-gray-200 text-gray-400"
                  }`}
                >
                  {s.icon}
                </div>
                <span
                  className={`mt-2 text-xs ${isActive ? textColor : mutedColor}`}
                >
                  {s.label}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}

/**
 * Club context card for sidebar
 */
function ClubContextCard({
  club,
  context,
  badge,
  type,
  theme,
  textColor,
  mutedColor,
  borderColor,
}: {
  club: string;
  context: ClubContext;
  badge?: { url: string };
  type: "buying" | "selling";
  theme: "light" | "dark";
  textColor: string;
  mutedColor: string;
  borderColor: string;
}) {
  const bgColor = theme === "dark" ? "bg-zinc-900" : "bg-white";
  const accentColor = type === "buying" ? "bg-green-500" : "bg-red-500";

  return (
    <div className={`${bgColor} rounded-xl p-6 ${borderColor} border`}>
      <div className="flex items-start gap-4 mb-4">
        {badge?.url && (
          <Image
            src={badge.url}
            alt={club}
            width={48}
            height={48}
            className="object-contain"
          />
        )}
        <div className="flex-1">
          <h3 className={`text-lg font-bold ${textColor}`}>{club}</h3>
          <span
            className={`${accentColor} text-white text-xs px-2 py-1 rounded-full inline-block mt-1`}
          >
            {type === "buying" ? "Buying Club" : "Selling Club"}
          </span>
        </div>
      </div>

      <div className="space-y-3">
        <div>
          <span className={`${mutedColor} text-sm`}>League Position</span>
          <p className={`${textColor} font-semibold`}>
            {context.leaguePosition}
            {context.recentForm && ` • ${context.recentForm}`}
          </p>
        </div>

        <div>
          <span className={`${mutedColor} text-sm`}>Squad Needs</span>
          <p className={`${textColor} font-semibold`}>
            {context.needs.positions.join(", ")}
          </p>
        </div>

        {context.financials.transferBudget && (
          <div>
            <span className={`${mutedColor} text-sm`}>Budget</span>
            <p className={`${textColor} font-semibold`}>
              €{(context.financials.transferBudget / 1000000).toFixed(0)}M
              available
            </p>
          </div>
        )}
      </div>
    </div>
  );
}

/**
 * Transfer market context card
 */
function TransferMarketCard({
  context,
  theme,
  textColor,
  mutedColor,
  borderColor,
}: {
  context: TransferContext;
  theme: "light" | "dark";
  textColor: string;
  mutedColor: string;
  borderColor: string;
}) {
  const bgColor = theme === "dark" ? "bg-zinc-900" : "bg-white";

  return (
    <div className={`${bgColor} rounded-xl p-6 ${borderColor} border`}>
      <h3 className={`text-lg font-bold ${textColor} mb-4`}>Market Context</h3>

      <div className="space-y-3">
        <div>
          <span className={`${mutedColor} text-sm`}>Position Average</span>
          <p className={`${textColor} font-semibold`}>
            €{(context.marketTrend.averageFee / 1000000).toFixed(1)}M
          </p>
        </div>

        <div>
          <span className={`${mutedColor} text-sm`}>Record Transfer</span>
          <p className={`${textColor} font-semibold`}>
            {context.recordTransfer.player}
          </p>
          <p className={`${mutedColor} text-sm`}>
            €{(context.recordTransfer.fee / 1000000).toFixed(0)}M •{" "}
            {context.recordTransfer.year}
          </p>
        </div>

        {context.similarTransfers.length > 0 && (
          <div>
            <span className={`${mutedColor} text-sm`}>Recent Similar</span>
            {context.similarTransfers.slice(0, 2).map((transfer, idx) => (
              <p key={idx} className={`${textColor} text-sm mt-1`}>
                {transfer.player} → {transfer.toClub}
              </p>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

/**
 * Share button component
 */
function ShareButton({
  platform,
  theme,
}: {
  platform: string;
  theme: "light" | "dark";
}) {
  const bgColor =
    theme === "dark"
      ? "bg-zinc-800 hover:bg-zinc-700"
      : "bg-gray-200 hover:bg-gray-300";

  const icons = {
    twitter: "🐦",
    facebook: "📘",
    whatsapp: "💬",
    copy: "📋",
  };

  return (
    <button
      className={`${bgColor} p-3 rounded-lg transition-colors`}
      aria-label={`Share on ${platform}`}
    >
      <span className="text-xl">{icons[platform as keyof typeof icons]}</span>
    </button>
  );
}
