509721762ff10bbe09581596d205873d
/* istanbul ignore next */
function cov_1spbpmg1bz() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/app/api/monitoring/start/route.ts";
  var hash = "3037588a11b33963bcd61587d54e1c521c33eebc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/app/api/monitoring/start/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 2
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "1": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 37
        }
      },
      "2": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "3": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 20,
          column: 8
        }
      },
      "4": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "5": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 27,
          column: 8
        }
      },
      "6": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 56
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 34
        }
      },
      "8": {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 57
        }
      },
      "9": {
        start: {
          line: 38,
          column: 18
        },
        end: {
          line: 38,
          column: 49
        }
      },
      "10": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 48,
          column: 7
        }
      },
      "11": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 60
        }
      },
      "12": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 58,
          column: 6
        }
      },
      "13": {
        start: {
          line: 63,
          column: 2
        },
        end: {
          line: 77,
          column: 3
        }
      },
      "14": {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 64,
          column: 49
        }
      },
      "15": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 71,
          column: 7
        }
      },
      "16": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 76,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 10,
            column: 22
          },
          end: {
            line: 10,
            column: 26
          }
        },
        loc: {
          start: {
            line: 10,
            column: 49
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 62,
            column: 22
          },
          end: {
            line: 62,
            column: 25
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 62
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 17
          },
          end: {
            line: 55,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 42
          },
          end: {
            line: 55,
            column: 55
          }
        }, {
          start: {
            line: 55,
            column: 58
          },
          end: {
            line: 55,
            column: 73
          }
        }],
        line: 55
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3037588a11b33963bcd61587d54e1c521c33eebc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1spbpmg1bz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1spbpmg1bz();
function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/**
 * API Route: Start ITK Monitoring
 * Initializes and starts the global ITK monitoring system
 */

import { NextResponse } from "next/server";
import { itkMonitor } from "@/lib/twitter/itk-monitor";
import { validateEnvironment } from "@/lib/validations/environment";
export
/* istanbul ignore next */
function POST(_x) {
  return _POST.apply(this, arguments);
}
/* istanbul ignore next */
function _POST() {
  _POST = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee(request)
  /* istanbul ignore next */
  {
    var env, results, stats, _t;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          cov_1spbpmg1bz().f[0]++;
          cov_1spbpmg1bz().s[0]++;
          _context.p = 1;
          // Validate environment variables
          env = (cov_1spbpmg1bz().s[1]++, validateEnvironment()); // Check if we have required API keys
          cov_1spbpmg1bz().s[2]++;
          if (env.TWITTER_BEARER_TOKEN) {
            _context.n = 2;
            break;
          }
          cov_1spbpmg1bz().b[0][0]++;
          cov_1spbpmg1bz().s[3]++;
          return _context.a(2, NextResponse.json({
            error: "Twitter API credentials not configured"
          }, {
            status: 500
          }));
        case 2:
          cov_1spbpmg1bz().b[0][1]++;
        case 3:
          cov_1spbpmg1bz().s[4]++;
          if (env.OPENAI_API_KEY) {
            _context.n = 4;
            break;
          }
          cov_1spbpmg1bz().b[1][0]++;
          cov_1spbpmg1bz().s[5]++;
          return _context.a(2, NextResponse.json({
            error: "OpenAI API credentials not configured"
          }, {
            status: 500
          }));
        case 4:
          cov_1spbpmg1bz().b[1][1]++;
        case 5:
          cov_1spbpmg1bz().s[6]++;
          console.log("🚀 Starting ITK monitoring system...");

          // Initialize ITK monitor
          cov_1spbpmg1bz().s[7]++;
          _context.n = 6;
          return itkMonitor.initialize();
        case 6:
          cov_1spbpmg1bz().s[8]++;
          _context.n = 7;
          return itkMonitor.monitorAllAccounts();
        case 7:
          results = _context.v;
          stats = (cov_1spbpmg1bz().s[9]++, itkMonitor.getMonitoringStats());
          cov_1spbpmg1bz().s[10]++;
          return _context.a(2, NextResponse.json({
            success: true,
            message: "ITK monitoring started successfully",
            status: {
              processedTweets: results.length,
              stats: stats,
              startedAt: new Date().toISOString()
            }
          }));
        case 8:
          _context.p = 8;
          _t = _context.v;
          cov_1spbpmg1bz().s[11]++;
          console.error("Failed to start ITK monitoring:",
          /* istanbul ignore next */
          _t);
          cov_1spbpmg1bz().s[12]++;
          return _context.a(2, NextResponse.json({
            error: "Failed to start monitoring system",
            details:
            /* istanbul ignore next */
            _t instanceof Error ?
            /* istanbul ignore next */
            (cov_1spbpmg1bz().b[2][0]++,
            /* istanbul ignore next */
            _t.message) :
            /* istanbul ignore next */
            (cov_1spbpmg1bz().b[2][1]++, "Unknown error")
          }, {
            status: 500
          }));
      }
    }, _callee, null, [[1, 8]]);
  }));
  return _POST.apply(this, arguments);
}
export
/* istanbul ignore next */
function GET() {
  return _GET.apply(this, arguments);
}
/* istanbul ignore next */
function _GET() {
  _GET = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function
  /* istanbul ignore next */
  _callee2()
  /* istanbul ignore next */
  {
    var stats, _t2;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          cov_1spbpmg1bz().f[1]++;
          cov_1spbpmg1bz().s[13]++;
          _context2.p = 1;
          stats = (cov_1spbpmg1bz().s[14]++, itkMonitor.getMonitoringStats());
          cov_1spbpmg1bz().s[15]++;
          return _context2.a(2, NextResponse.json({
            status: {
              stats: stats,
              rateLimit: itkMonitor.getRateLimitStatus()
            }
          }));
        case 2:
          _context2.p = 2;
          _t2 = _context2.v;
          cov_1spbpmg1bz().s[16]++;
          return _context2.a(2, NextResponse.json({
            error: "Failed to get monitoring status"
          }, {
            status: 500
          }));
      }
    }, _callee2, null, [[1, 2]]);
  }));
  return _GET.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,