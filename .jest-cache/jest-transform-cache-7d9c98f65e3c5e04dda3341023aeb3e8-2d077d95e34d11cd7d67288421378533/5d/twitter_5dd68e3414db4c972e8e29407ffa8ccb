052b11a086ac9cef3a75ef90d3797bde
/* istanbul ignore next */
function cov_niesglzyb() {
  var path = "/Users/deannewton/Documents/TransferJuice/src/lib/validations/twitter.ts";
  var hash = "e51221d1001731f4756e7d628fd583af4f38b66b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/deannewton/Documents/TransferJuice/src/lib/validations/twitter.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 33
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "1": {
        start: {
          line: 26,
          column: 40
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "2": {
        start: {
          line: 32,
          column: 37
        },
        end: {
          line: 78,
          column: 2
        }
      },
      "3": {
        start: {
          line: 81,
          column: 42
        },
        end: {
          line: 88,
          column: 2
        }
      },
      "4": {
        start: {
          line: 91,
          column: 34
        },
        end: {
          line: 149,
          column: 2
        }
      },
      "5": {
        start: {
          line: 152,
          column: 34
        },
        end: {
          line: 175,
          column: 2
        }
      },
      "6": {
        start: {
          line: 178,
          column: 42
        },
        end: {
          line: 208,
          column: 2
        }
      },
      "7": {
        start: {
          line: 210,
          column: 43
        },
        end: {
          line: 240,
          column: 2
        }
      },
      "8": {
        start: {
          line: 243,
          column: 39
        },
        end: {
          line: 265,
          column: 2
        }
      },
      "9": {
        start: {
          line: 268,
          column: 36
        },
        end: {
          line: 287,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e51221d1001731f4756e7d628fd583af4f38b66b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_niesglzyb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_niesglzyb();
import { z } from "zod";

/**
 * Twitter API v2 Response Schemas
 * Validates incoming data from Twitter API to ensure type safety
 */

// Twitter User Schema
export var TwitterUserSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[0]++, z.object({
  id: z.string(),
  username: z.string().min(1).max(15),
  name: z.string().min(1).max(50),
  profile_image_url: z.string().url().optional(),
  verified: z[
  /* istanbul ignore next */
  "boolean"]().optional(),
  public_metrics: z.object({
    followers_count: z.number().min(0),
    following_count: z.number().min(0),
    tweet_count: z.number().min(0),
    listed_count: z.number().min(0)
  }).optional()
}));

// Twitter Tweet Attachments Schema
export var TwitterAttachmentsSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[1]++, z.object({
  media_keys: z.array(z.string()).optional(),
  poll_ids: z.array(z.string()).optional()
}));

// Twitter Tweet Entities Schema
export var TwitterEntitiesSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[2]++, z.object({
  hashtags: z.array(z.object({
    start: z.number(),
    end: z.number(),
    tag: z.string()
  })).optional(),
  mentions: z.array(z.object({
    start: z.number(),
    end: z.number(),
    username: z.string(),
    id: z.string()
  })).optional(),
  urls: z.array(z.object({
    start: z.number(),
    end: z.number(),
    url: z.string().url(),
    expanded_url: z.string().url().optional(),
    display_url: z.string().optional(),
    status: z.number().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    unwound_url: z.string().url().optional()
  })).optional(),
  annotations: z.array(z.object({
    start: z.number(),
    end: z.number(),
    probability: z.number().min(0).max(1),
    type: z.string(),
    normalized_text: z.string().optional()
  })).optional()
}));

// Twitter Tweet Public Metrics Schema
export var TwitterPublicMetricsSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[3]++, z.object({
  retweet_count: z.number().min(0),
  reply_count: z.number().min(0),
  like_count: z.number().min(0),
  quote_count: z.number().min(0),
  bookmark_count: z.number().min(0).optional(),
  impression_count: z.number().min(0).optional()
}));

// Twitter Tweet Schema
export var TwitterTweetSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[4]++, z.object({
  id: z.string(),
  text: z.string().min(1).max(280),
  author_id: z.string(),
  created_at: z.string().datetime(),
  conversation_id: z.string().optional(),
  in_reply_to_user_id: z.string().optional(),
  referenced_tweets: z.array(z.object({
    type: z[
    /* istanbul ignore next */
    "enum"](["retweeted", "quoted", "replied_to"]),
    id: z.string()
  })).optional(),
  attachments: TwitterAttachmentsSchema.optional(),
  context_annotations: z.array(z.object({
    domain: z.object({
      id: z.string(),
      name: z.string(),
      description: z.string().optional()
    }),
    entity: z.object({
      id: z.string(),
      name: z.string(),
      description: z.string().optional()
    })
  })).optional(),
  entities: TwitterEntitiesSchema.optional(),
  geo: z.object({
    coordinates: z.object({
      type: z.literal("Point"),
      coordinates: z.array(z.number()).length(2)
    }).optional(),
    place_id: z.string().optional()
  }).optional(),
  lang: z.string().optional(),
  possibly_sensitive: z[
  /* istanbul ignore next */
  "boolean"]().optional(),
  public_metrics: TwitterPublicMetricsSchema.optional(),
  reply_settings: z[
  /* istanbul ignore next */
  "enum"](["everyone", "mentionedUsers", "following"]).optional(),
  source: z.string().optional(),
  withheld: z.object({
    copyright: z[
    /* istanbul ignore next */
    "boolean"]().optional(),
    country_codes: z.array(z.string().length(2)).optional(),
    scope: z[
    /* istanbul ignore next */
    "enum"](["tweet", "user"]).optional()
  }).optional()
}));

// Twitter Media Schema
export var TwitterMediaSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[5]++, z.object({
  media_key: z.string(),
  type: z[
  /* istanbul ignore next */
  "enum"](["photo", "video", "animated_gif"]),
  url: z.string().url().optional(),
  duration_ms: z.number().min(0).optional(),
  height: z.number().min(1).optional(),
  width: z.number().min(1).optional(),
  preview_image_url: z.string().url().optional(),
  public_metrics: z.object({
    view_count: z.number().min(0).optional()
  }).optional(),
  alt_text: z.string().optional(),
  variants: z.array(z.object({
    bit_rate: z.number().min(0).optional(),
    content_type: z.string(),
    url: z.string().url()
  })).optional()
}));

// Twitter API Response Schemas
export var TwitterUsersResponseSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[6]++, z.object({
  data: z.array(TwitterUserSchema).optional(),
  includes: z.object({
    users: z.array(TwitterUserSchema).optional(),
    tweets: z.array(TwitterTweetSchema).optional(),
    media: z.array(TwitterMediaSchema).optional()
  }).optional(),
  errors: z.array(z.object({
    detail: z.string(),
    title: z.string(),
    resource_type: z.string().optional(),
    parameter: z.string().optional(),
    resource_id: z.string().optional(),
    type: z.string().url().optional()
  })).optional(),
  meta: z.object({
    result_count: z.number().min(0),
    next_token: z.string().optional(),
    previous_token: z.string().optional(),
    newest_id: z.string().optional(),
    oldest_id: z.string().optional()
  }).optional()
}));
export var TwitterTweetsResponseSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[7]++, z.object({
  data: z.array(TwitterTweetSchema).optional(),
  includes: z.object({
    users: z.array(TwitterUserSchema).optional(),
    tweets: z.array(TwitterTweetSchema).optional(),
    media: z.array(TwitterMediaSchema).optional()
  }).optional(),
  errors: z.array(z.object({
    detail: z.string(),
    title: z.string(),
    resource_type: z.string().optional(),
    parameter: z.string().optional(),
    resource_id: z.string().optional(),
    type: z.string().url().optional()
  })).optional(),
  meta: z.object({
    result_count: z.number().min(0),
    next_token: z.string().optional(),
    previous_token: z.string().optional(),
    newest_id: z.string().optional(),
    oldest_id: z.string().optional()
  }).optional()
}));

// Transfer Relevance Schema
export var TransferRelevanceSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[8]++, z.object({
  isTransferRelated: z[
  /* istanbul ignore next */
  "boolean"](),
  confidence: z.number().min(0).max(1),
  keywords: z.array(z.string()),
  entities: z.object({
    players: z.array(z.string()),
    clubs: z.array(z.string()),
    agents: z.array(z.string()),
    journalists: z.array(z.string())
  }),
  transferType: z[
  /* istanbul ignore next */
  "enum"](["rumour", "confirmed", "medical", "contract", "loan", "release", "denial"]).optional(),
  priority: z[
  /* istanbul ignore next */
  "enum"](["low", "medium", "high", "urgent"])
}));

// Processed Tweet Schema (internal)
export var ProcessedTweetSchema =
/* istanbul ignore next */
(cov_niesglzyb().s[9]++, z.object({
  id: z.string(),
  originalTweet: TwitterTweetSchema,
  author: TwitterUserSchema,
  processedAt: z.date(),
  relevance: TransferRelevanceSchema,
  content: z.object({
    cleanText: z.string(),
    mentions: z.array(z.string()),
    hashtags: z.array(z.string()),
    urls: z.array(z.string().url()),
    mediaUrls: z.array(z.string().url())
  }),
  metadata: z.object({
    wordCount: z.number().min(0),
    readabilityScore: z.number().min(0).max(100),
    sentimentScore: z.number().min(-1).max(1),
    spamScore: z.number().min(0).max(1)
  })
}));

// Export types inferred from schemas
//# sourceMappingURL=data:application/json;charset=utf-8;base64,